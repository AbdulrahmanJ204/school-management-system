// === FULL PROJECT COMPACT EXPORT ===

// === [Controllers] ===
// ===== C:\Development\Laravel\school\app\Http\Controllers\AdminController.php =====
namespace App\Http\Controllers;class AdminController extends Controller{protected $adminService;public function __construct(AdminService $adminService){$this->adminService = $adminService;}public function show(){return $this->adminService->listAdmins();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\AuthController.php =====
namespace App\Http\Controllers;class AuthController extends Controller{protected $authService;public function __construct(AuthService $authService){$this->authService = $authService;}public function register(RegisterRequest $request){return $this->authService->register($request);}public function login(LoginRequest $request){$user_type = strtolower(request()->query('user_type'));return $this->authService->login($request,$user_type);}public function refresh(Request $request){return $this->authService->refresh($request);}public function logout(Request $request){return $this->authService->logout($request);}public function changePassword(ChangePasswordRequest $request){return $this->authService->changePassword($request);}public function forgotPassword(ForgotPasswordRequest $request){return $this->authService->forgotPassword($request);}public function resetPassword(ResetPasswordRequest $request){return $this->authService->resetPassword($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\BehaviorNoteController.php =====
namespace App\Http\Controllers;class BehaviorNoteController extends Controller{protected $behaviorNoteService;public function __construct(BehaviorNoteService $behaviorNoteService){$this->behaviorNoteService = $behaviorNoteService;}public function index(){return $this->behaviorNoteService->listBehaviorNotes();}public function trashed(){return $this->behaviorNoteService->listTrashedBehaviorNotes();}public function store(BehaviorNoteRequest $request){return $this->behaviorNoteService->createBehaviorNote($request);}public function show($id){return $this->behaviorNoteService->showBehaviorNote($id);}public function update(BehaviorNoteRequest $request,$id){return $this->behaviorNoteService->updateBehaviorNote($request,$id);}public function destroy($id){return $this->behaviorNoteService->deleteBehaviorNote($id);}public function restore($id){return $this->behaviorNoteService->restoreBehaviorNote($id);}public function forceDelete($id){return $this->behaviorNoteService->forceDeleteBehaviorNote($id);}public function getByStudent($studentId){return $this->behaviorNoteService->getByStudent($studentId);}public function getBySchoolDay($schoolDayId){return $this->behaviorNoteService->getBySchoolDay($schoolDayId);}public function getByBehaviorType($behaviorType){return $this->behaviorNoteService->getByBehaviorType($behaviorType);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\Controller.php =====
namespace App\Http\Controllers;abstract class Controller{}
// ===== C:\Development\Laravel\school\app\Http\Controllers\FileController.php =====
namespace App\Http\Controllers;class FileController extends Controller{protected $fileService;public function __construct(FileService $fileService){$this->fileService = $fileService;}public function index(){$this->fileService->getFiles();}public function store(StoreFileRequest $request){return $this->fileService->store($request);}public function show(File $file){}public function update(UpdateFileRequest $request,File $file){}public function destroy(File $file){}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\GradeController.php =====
namespace App\Http\Controllers;class GradeController extends Controller{protected GradeService $gradeService;public function __construct(GradeService $gradeService){$this->gradeService = $gradeService;}public function index(){return $this->gradeService->listGrade();}public function store(GradeRequest $request){return $this->gradeService->createGrade($request);}public function show(Grade $grade){return $this->gradeService->showGrade($grade);}public function update(Request $request,Grade $grade){return $this->gradeService->updateGrade($request,$grade);}public function destroy(Grade $grade){return $this->gradeService->destroyGrade($grade);}public function trashed(){return $this->gradeService->listTrashedGrades();}public function restore($id){return $this->gradeService->restoreGrade($id);}public function forceDelete($id){return $this->gradeService->forceDeleteGrade($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\GradeYearSettingController.php =====
namespace App\Http\Controllers;class GradeYearSettingController extends Controller{protected GradeYearSettingService $gradeYearSettingService;public function __construct(GradeYearSettingService $gradeYearSettingService){$this->gradeYearSettingService = $gradeYearSettingService;}public function index(){return $this->gradeYearSettingService->listGradeYearSettings();}public function store(GradeYearSettingRequest $request){return $this->gradeYearSettingService->createGradeYearSetting($request);}public function show(GradeYearSetting $gradeYearSetting){return $this->gradeYearSettingService->showGradeYearSetting($gradeYearSetting);}public function update(GradeYearSettingRequest $request,GradeYearSetting $gradeYearSetting){return $this->gradeYearSettingService->updateGradeYearSetting($request,$gradeYearSetting);}public function destroy(GradeYearSetting $gradeYearSetting){return $this->gradeYearSettingService->destroyGradeYearSetting($gradeYearSetting);}public function trashed(){return $this->gradeYearSettingService->listTrashedGradeYearSettings();}public function restore($id){return $this->gradeYearSettingService->restoreGradeYearSetting($id);}public function forceDelete($id){return $this->gradeYearSettingService->forceDeleteGradeYearSetting($id);}public function getByGrade($gradeId){return $this->gradeYearSettingService->getSettingsByGrade($gradeId);}public function getByYear($yearId){return $this->gradeYearSettingService->getSettingsByYear($yearId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\MainSubjectController.php =====
namespace App\Http\Controllers;class MainSubjectController extends Controller{protected MainSubjectService $mainSubjectService;public function __construct(MainSubjectService $mainSubjectService){$this->mainSubjectService = $mainSubjectService;}public function index(): JsonResponse{return $this->mainSubjectService->listMainSubjects();}public function store(MainSubjectRequest $request): JsonResponse{return $this->mainSubjectService->createMainSubject($request);}public function show(MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->showMainSubject($mainSubject);}public function update(MainSubjectRequest $request,MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->updateMainSubject($request,$mainSubject);}public function destroy(MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->destroyMainSubject($mainSubject);}public function trashed(): JsonResponse{return $this->mainSubjectService->listTrashedMainSubjects();}public function restore($id): JsonResponse{return $this->mainSubjectService->restoreMainSubject($id);}public function forceDelete($id): JsonResponse{return $this->mainSubjectService->forceDeleteMainSubject($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\MessageController.php =====
namespace App\Http\Controllers;class MessageController extends Controller{protected $messageService;public function __construct(MessageService $messageService){$this->messageService = $messageService;}public function index(){return $this->messageService->listMessages();}public function store(MessageRequest $request){return $this->messageService->createMessage($request);}public function show($id){return $this->messageService->showMessage($id);}public function update(MessageRequest $request,$id){return $this->messageService->updateMessage($request,$id);}public function destroy($id){return $this->messageService->deleteMessage($id);}public function getByUser($userId){return $this->messageService->getByUser($userId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\NewsController.php =====
namespace App\Http\Controllers;class NewsController extends Controller{protected $newsService;public function __construct(NewsService $newsService){$this->newsService = $newsService;}public function index(): ?JsonResponse{return $this->newsService->getNews();}public function store(StoreNewsRequest $request){return $this->newsService->createNews($request);}public function show(News $news){return $this->newsService->showNews($news);}public function update(UpdateNewsRequest $request,News $news){return $this->newsService->updateNews($request,$news);}public function destroy(News $news): JsonResponse{return $this->newsService->deleteNews($news);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\PermissionController.php =====
namespace App\Http\Controllers;class PermissionController extends Controller{protected $permissionService;public function __construct(PermissionService $permissionService){$this->permissionService = $permissionService;}public function show(){return $this->permissionService->listPermissions();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuestionController.php =====
namespace App\Http\Controllers;class QuestionController extends Controller{protected $questionService;public function __construct(QuestionService $questionService){return $this->questionService = $questionService;}public function create(CreateQuestionRequest $request,int $quiz_id){return $this->questionService->create($request,$quiz_id);}public function update(UpdateQuestionRequest $request,int $quiz_id,int $question_id){return $this->questionService->update($request,$quiz_id,$question_id);}public function destroy(int $quiz_id,int $question_id){return $this->questionService->delete($quiz_id,$question_id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuizController.php =====
namespace App\Http\Controllers;class QuizController extends Controller{protected $quizService;public function __construct(QuizService $quizService){$this->quizService = $quizService;}public function index(ListQuizzesRequest $request){return $this->quizService->listQuizzes($request);}public function store(CreateAndUpdateQuizRequest $request){return $this->quizService->create($request);}public function activate(int $id){return $this->quizService->activate($id);}public function deactivate(int $id){return $this->quizService->deactivate($id);}public function show(int $id){return $this->quizService->showQuiz($id);}public function update(CreateAndUpdateQuizRequest $request,int $id){return $this->quizService->update($request,$id);}public function destroy(int $id){return $this->quizService->destroy($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\RoleController.php =====
namespace App\Http\Controllers;class RoleController extends Controller{protected $roleService;public function __construct(RoleService $roleService){$this->roleService = $roleService;}public function index(){return $this->roleService->list();}public function store(CreateRoleRequest $request){return $this->roleService->create($request);}public function show(int $id){return $this->roleService->getRole($id);}public function update(UpdateRoleRequest $request,int $id){return $this->roleService->update($request,$id);}public function destroy(int $id){return $this->roleService->delete($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SchoolDayController.php =====
namespace App\Http\Controllers;class SchoolDayController extends Controller{protected SchoolDayService $schoolDayService;public function __construct(SchoolDayService $schoolDayService){$this->schoolDayService = $schoolDayService;}public function index(Semester $semester){return $this->schoolDayService->listSchoolDay($semester);}public function trashed(Semester $semester){return $this->schoolDayService->listTrashedSchoolDays($semester);}public function store(SchoolDayRequest $request){return $this->schoolDayService->createSchoolDay($request);}public function update(Request $request,SchoolDay $schoolDay){return $this->schoolDayService->updateSchoolDay($request,$schoolDay);}public function destroy(SchoolDay $schoolDay){return $this->schoolDayService->destroySchoolDay($schoolDay);}public function forceDelete($id){return $this->schoolDayService->forceDeleteSchoolDay($id);}public function restore($id){return $this->schoolDayService->restoreSchoolDay($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ScoreQuizController.php =====
namespace App\Http\Controllers;class ScoreQuizController extends Controller{protected $scoreQuizService;public function __construct(ScoreQuizService $scoreQuizService){$this->scoreQuizService = $scoreQuizService;}public function create(CreateScoreQuizRequest $request){return $this->scoreQuizService->create($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SectionController.php =====
namespace App\Http\Controllers;class SectionController extends Controller{protected SectionService $sectionService;public function __construct(SectionService $sectionService){$this->sectionService = $sectionService;}public function index(){return $this->sectionService->listSection();}public function store(SectionRequest $request){return $this->sectionService->createSection($request);}public function show(Section $section){return $this->sectionService->showSection($section);}public function update(SectionRequest $request,Section $section){return $this->sectionService->updateSection($request,$section);}public function destroy(Section $section){return $this->sectionService->destroySection($section);}public function trashed(){return $this->sectionService->listTrashedSections();}public function restore($id){return $this->sectionService->restoreSection($id);}public function forceDelete($id){return $this->sectionService->forceDeleteSection($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SemesterController.php =====
namespace App\Http\Controllers;class SemesterController extends Controller{protected SemesterService $semesterService;public function __construct(SemesterService $semesterService){$this->semesterService = $semesterService;}public function store(SemesterRequest $request){return $this->semesterService->createSemester($request);}public function update(Request $request,Semester $semester){return $this->semesterService->updateSemester($request,$semester);}public function destroy(Semester $semester){return $this->semesterService->destroySemester($semester);}public function forceDelete($id){return $this->semesterService->forceDeleteSemester($id);}public function restore($id){return $this->semesterService->restoreSemester($id);}public function Active(Semester $semester){return $this->semesterService->ActiveSemester($semester);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentController.php =====
namespace App\Http\Controllers;class StudentController extends Controller{protected $studentService;public function __construct(StudentService $studentService){$this->studentService = $studentService;}public function show(){return $this->studentService->listStudents();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentEnrollmentController.php =====
namespace App\Http\Controllers;class StudentEnrollmentController extends Controller{protected StudentEnrollmentService $studentEnrollmentService;public function __construct(StudentEnrollmentService $studentEnrollmentService){$this->studentEnrollmentService = $studentEnrollmentService;}public function index(){return $this->studentEnrollmentService->listStudentEnrollments();}public function store(StudentEnrollmentRequest $request){return $this->studentEnrollmentService->createStudentEnrollment($request);}public function show(StudentEnrollment $studentEnrollment){return $this->studentEnrollmentService->showStudentEnrollment($studentEnrollment);}public function update(StudentEnrollmentRequest $request,StudentEnrollment $studentEnrollment){return $this->studentEnrollmentService->updateStudentEnrollment($request,$studentEnrollment);}public function destroy(StudentEnrollment $studentEnrollment){return $this->studentEnrollmentService->destroyStudentEnrollment($studentEnrollment);}public function trashed(){return $this->studentEnrollmentService->listTrashedStudentEnrollments();}public function restore($id){return $this->studentEnrollmentService->restoreStudentEnrollment($id);}public function forceDelete($id){return $this->studentEnrollmentService->forceDeleteStudentEnrollment($id);}public function getByStudent($studentId){return $this->studentEnrollmentService->getEnrollmentsByStudent($studentId);}public function getBySection($sectionId){return $this->studentEnrollmentService->getEnrollmentsBySection($sectionId);}public function getBySemester($semesterId){return $this->studentEnrollmentService->getEnrollmentsBySemester($semesterId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentMarkController.php =====
namespace App\Http\Controllers;class StudentMarkController extends Controller{protected StudentMarkService $studentMarkService;public function __construct(StudentMarkService $studentMarkService){$this->studentMarkService = $studentMarkService;}public function index(){return $this->studentMarkService->listStudentMarks();}public function store(StudentMarkRequest $request){return $this->studentMarkService->createStudentMark($request);}public function show(StudentMark $studentMark){return $this->studentMarkService->showStudentMark($studentMark);}public function update(StudentMarkRequest $request,StudentMark $studentMark){return $this->studentMarkService->updateStudentMark($request,$studentMark);}public function destroy(StudentMark $studentMark){return $this->studentMarkService->destroyStudentMark($studentMark);}public function getByEnrollment($enrollmentId){return $this->studentMarkService->getMarksByEnrollment($enrollmentId);}public function getBySubject($subjectId){return $this->studentMarkService->getMarksBySubject($subjectId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudyNoteController.php =====
namespace App\Http\Controllers;class StudyNoteController extends Controller{protected $studyNoteService;public function __construct(StudyNoteService $studyNoteService){$this->studyNoteService = $studyNoteService;}public function index(){return $this->studyNoteService->listStudyNotes();}public function trashed(){return $this->studyNoteService->listTrashedStudyNotes();}public function store(StudyNoteRequest $request){return $this->studyNoteService->createStudyNote($request);}public function show($id){return $this->studyNoteService->showStudyNote($id);}public function update(StudyNoteRequest $request,$id){return $this->studyNoteService->updateStudyNote($request,$id);}public function destroy($id){return $this->studyNoteService->deleteStudyNote($id);}public function restore($id){return $this->studyNoteService->restoreStudyNote($id);}public function forceDelete($id){return $this->studyNoteService->forceDeleteStudyNote($id);}public function getByStudent($studentId){return $this->studyNoteService->getByStudent($studentId);}public function getBySchoolDay($schoolDayId){return $this->studyNoteService->getBySchoolDay($schoolDayId);}public function getBySubject($subjectId){return $this->studyNoteService->getBySubject($subjectId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SubjectController.php =====
namespace App\Http\Controllers;class SubjectController extends Controller{protected SubjectService $subjectService;public function __construct(SubjectService $subjectService){$this->subjectService = $subjectService;}public function index(){return $this->subjectService->listSubjects();}public function store(SubjectRequest $request){return $this->subjectService->createSubject($request);}public function show(Subject $subject){return $this->subjectService->showSubject($subject);}public function update(SubjectRequest $request,Subject $subject){return $this->subjectService->updateSubject($request,$subject);}public function destroy(Subject $subject){return $this->subjectService->destroySubject($subject);}public function trashed(){return $this->subjectService->listTrashedSubjects();}public function restore($id){return $this->subjectService->restoreSubject($id);}public function forceDelete($id){return $this->subjectService->forceDeleteSubject($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherController.php =====
namespace App\Http\Controllers;class TeacherController extends Controller{protected $teacherService;public function __construct(TeacherService $teacherService){$this->teacherService = $teacherService;}public function show(){return $this->teacherService->listTeachers();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherSectionSubjectController.php =====
namespace App\Http\Controllers;class TeacherSectionSubjectController extends Controller{protected $teacherSectionSubjectService;public function __construct(TeacherSectionSubjectService $teacherSectionSubjectService){$this->teacherSectionSubjectService = $teacherSectionSubjectService;}public function index(){return $this->teacherSectionSubjectService->listTeacherSectionSubjects();}public function trashed(){return $this->teacherSectionSubjectService->listTrashedTeacherSectionSubjects();}public function store(TeacherSectionSubjectRequest $request){return $this->teacherSectionSubjectService->createTeacherSectionSubject($request);}public function show($id){return $this->teacherSectionSubjectService->showTeacherSectionSubject($id);}public function update(TeacherSectionSubjectRequest $request,$id){return $this->teacherSectionSubjectService->updateTeacherSectionSubject($request,$id);}public function destroy($id){return $this->teacherSectionSubjectService->deleteTeacherSectionSubject($id);}public function restore($id){return $this->teacherSectionSubjectService->restoreTeacherSectionSubject($id);}public function forceDelete($id){return $this->teacherSectionSubjectService->forceDeleteTeacherSectionSubject($id);}public function getByTeacher($teacherId){return $this->teacherSectionSubjectService->getByTeacher($teacherId);}public function getBySection($sectionId){return $this->teacherSectionSubjectService->getBySection($sectionId);}public function getBySubject($subjectId){return $this->teacherSectionSubjectService->getBySubject($subjectId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\UserController.php =====
namespace App\Http\Controllers;class UserController extends Controller{protected $userService;public function __construct(UserService $userService){$this->userService = $userService;}public function show($id){return $this->userService->getUser($id);}public function getStaff(){return $this->userService->listAdminsAndTeachers();}public function update(UpdateRequest $request,$id){return $this->userService->updateUser($request,$id);}public function destroy($id){return $this->userService->deleteUser($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\YearController.php =====
namespace App\Http\Controllers;class YearController extends Controller{protected YearService $yearService;public function __construct(YearService $yearService){$this->yearService = $yearService;}public function index(){return $this->yearService->listYear();}public function trashed(){return $this->yearService->listTrashedYears();}public function store(YearRequest $request){return $this->yearService->createYear($request);}public function show(Year $year){return $this->yearService->showYear($year);}public function update(Request $request,Year $year){return $this->yearService->updateYear($request,$year);}public function destroy(Year $year){return $this->yearService->destroyYear($year);}public function forceDelete($id){return $this->yearService->forceDeleteYear($id);}public function restore($id){return $this->yearService->restoreYear($id);}public function Active(Year $year){return $this->yearService->ActiveYear($year);}}

// === [Services] ===
// ===== C:\Development\Laravel\school\app\Services\AdminService.php =====
namespace App\Services;class AdminService{public function listAdmins(){if(!auth()->user()->hasPermissionTo('عرض المشرفين')){throw new PermissionException();}$admins = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','admin')->with(['admin'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($admins),);}}
// ===== C:\Development\Laravel\school\app\Services\AuthService.php =====
namespace App\Services;class AuthService{public function __construct(){}public function register($request){$admin = auth()->user();if(!$admin->hasPermissionTo('انشاء مستخدم')){throw new PermissionException();}$credentials = $request->validated();if($request->hasFile('image')){try{$image = $request->file('image');$imageName = $image->hashName();$imagePath = 'user_images/' . $imageName;if(!Storage::disk('public')->exists($imagePath)){$image->storeAs('user_images',$imageName,'public');}$credentials['image'] = $imagePath;}catch(\Exception $e){throw new ImageUploadFailed();}}else{$credentials['image'] = 'user_images/default.png';}$userTypeName = $credentials['user_type'];if($request->user_type !== 'student')$credentials['password'] = Hash::make($credentials['password']);$user = null;DB::transaction(function()use($admin,$credentials,$userTypeName,&$user){$user = User::create($credentials);match($userTypeName){'admin' => Admin::create([
'user_id' => $user->id,'created_by' => $admin->id,]),'teacher' => Teacher::create([
'user_id' => $user->id,'created_by' => $admin->id,]),'student' => Student::create([
'user_id' => $user->id,'created_by' => $admin->id,'grandfather'=> $credentials['grandfather'],'general_id' => $credentials['general_id'],'is_active' => $credentials['is_active']
])};});return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.created'),201,true);}public function login($request,$user_type){$credentials = $request->validated();$username = $credentials['user_name'];$expectedUserType = strtolower($user_type);if(!$expectedUserType){throw new MustPassUserTypeException();}if(!in_array($expectedUserType,['admin','teacher','student'])){throw new InvalidUserTypeException();}$prefixMap = [
'admin' => 'Adm_','teacher' => 'Tch_','student' => 'Std_',];$expectedPrefix = $prefixMap[$expectedUserType];if(!str_starts_with($username,$expectedPrefix)){throw new InvalidUserException(__('messages.auth.invalid_username_prefix'));}$idPart = str_replace($expectedPrefix,'',$username);if(!is_numeric($idPart)){throw new InvalidUserException(__('messages.auth.invalid_user_id'));}$userId =(int)$idPart;$user = User::find($userId);if(!$user){throw new UserNotFoundException();}if($user->user_type !== $expectedUserType){throw new InvalidUserTypeException();}if(!Hash::check($credentials['password'],$user->password)){throw new InvalidPasswordException();}$user->update(['last_login' => now()]);DB::beginTransaction();try{$device = Device_info::where('device_id',$credentials['device_id'])->first();if($device){$conflict =
$device->platform !== $credentials['platform'] ||
$device->type !== $credentials['device_type'] ||
$device->name !== $credentials['device_name'];if($conflict){throw new DeviceAlreadyExistsException();}$user->devices()->syncWithoutDetaching([$device->id]);}else{$device = Device_info::create([
'device_id' => $credentials['device_id'],'platform' => $credentials['platform'],'type' => $credentials['device_type'],'name' => $credentials['device_name'],]);$user->devices()->attach($device->id);}$accessToken = $user->createToken('access_token',['access']);$refreshToken = $user->createToken('refresh_token',['refresh']);$accessToken->accessToken->expires_at = now()->addMinutes(60);$accessToken->accessToken->device_id = $device->id;$accessToken->accessToken->save();$refreshToken->accessToken->expires_at = now()->addDays(30);$refreshToken->accessToken->device_id = $device->id;$refreshToken->accessToken->save();DB::commit();return ResponseHelper::jsonResponse([
'user' => new UserResource($user),'access_token' => $accessToken->plainTextToken,'refresh_token' => $refreshToken->plainTextToken,],__('messages.auth.login'));}catch(\Throwable $e){DB::rollBack();throw $e;}}public function refresh(Request $request){$refreshToken = $request->bearerToken();$token = PersonalAccessToken::findToken($refreshToken);if(!$token || !in_array('refresh',$token->abilities ?? [])){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),401,false);}$user = $token->tokenable;$deviceId = $token->device_id;$token->delete();$newAccessToken = $user->createToken('access_token',['access']);$newRefreshToken = $user->createToken('refresh_token',['refresh']);$newAccessToken->accessToken->expires_at = now()->addMinutes(60);$newAccessToken->accessToken->device_id = $deviceId;$newAccessToken->accessToken->save();$newRefreshToken->accessToken->expires_at = now()->addDays(30);$newRefreshToken->accessToken->device_id = $deviceId;$newRefreshToken->accessToken->save();return ResponseHelper::jsonResponse([
'new_access_token' => $newAccessToken->plainTextToken,'new_refresh_token' => $newRefreshToken->plainTextToken
],__('messages.auth.refresh'),200,true);}public function logout(Request $request){$token = $request->user()->currentAccessToken();$deviceId = $token->device_id;if($token->expires_at?->isPast()|!$token || !in_array('access',$token->abilities ?? [])){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),401,false);}$token->delete();$request->user()->tokens()->where('device_id',$deviceId)->whereJsonContains('abilities','refresh')->delete();return ResponseHelper::jsonResponse(null,__('messages.auth.logout'),200,true);}public function changePassword($request){$user = auth()->user();if(!$user->hasPermissionTo('change_password')){throw new PermissionException();}$credentials = $request->validated();if(!Hash::check($credentials['current_password'],$user->password)){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_password'),401,false);}$user->update([
'password' => Hash::make($credentials['new_password']),]);return ResponseHelper::jsonResponse(null,__('messages.auth.password_changed'),200,true);}public function forgotPassword($request){$request->validated();Password::sendResetLink($request->only('email'));return ResponseHelper::jsonResponse(null,__('messages.auth.reset_link_sent'),200,true);}public function resetPassword($request){$request->validated();$status = Password::reset($request->only('email','password','password_confirmation','token'),function($user,$password){$user->forceFill([
'password' => Hash::make($password),])->save();$user->tokens()->delete();});return $status === Password::PASSWORD_RESET
? ResponseHelper::jsonResponse(null,__('messages.auth.password_changed'),200,true): ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),400,false);}}
// ===== C:\Development\Laravel\school\app\Services\BehaviorNoteService.php =====
namespace App\Services;class BehaviorNoteService{public function listBehaviorNotes(){if(!auth()->user()->hasPermissionTo('عرض ملاحظات السلوك')){throw new PermissionException();}$behaviorNotes = BehaviorNote::with(['student','schoolDay','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(BehaviorNoteResource::collection($behaviorNotes),);}public function listTrashedBehaviorNotes(){if(!auth()->user()->hasPermissionTo('عرض ملاحظات السلوك المحذوفة')){throw new PermissionException();}$behaviorNotes = BehaviorNote::onlyTrashed()->with(['student','schoolDay','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(BehaviorNoteResource::collection($behaviorNotes),);}public function createBehaviorNote($request){if(!auth()->user()->hasPermissionTo('إضافة ملاحظة سلوك')){throw new PermissionException();}$data = $request->validated();$data['created_by'] = auth()->id();$behaviorNote = BehaviorNote::create($data);return ResponseHelper::jsonResponse(new BehaviorNoteResource($behaviorNote->load(['student','schoolDay','createdBy'])),'تم إنشاء ملاحظة السلوك بنجاح',201);}public function showBehaviorNote($id){if(!auth()->user()->hasPermissionTo('عرض ملاحظة سلوك')){throw new PermissionException();}$behaviorNote = BehaviorNote::with(['student','schoolDay','createdBy'])->findOrFail($id);return ResponseHelper::jsonResponse(new BehaviorNoteResource($behaviorNote),);}public function updateBehaviorNote($request,$id){if(!auth()->user()->hasPermissionTo('تعديل ملاحظة سلوك')){throw new PermissionException();}$behaviorNote = BehaviorNote::findOrFail($id);$data = $request->validated();$behaviorNote->update($data);return ResponseHelper::jsonResponse(new BehaviorNoteResource($behaviorNote->load(['student','schoolDay','createdBy'])),'تم تحديث ملاحظة السلوك بنجاح');}public function deleteBehaviorNote($id){if(!auth()->user()->hasPermissionTo('حذف ملاحظة سلوك')){throw new PermissionException();}$behaviorNote = BehaviorNote::findOrFail($id);$behaviorNote->delete();return ResponseHelper::jsonResponse(null,'تم حذف ملاحظة السلوك بنجاح');}public function restoreBehaviorNote($id){if(!auth()->user()->hasPermissionTo('استعادة ملاحظة سلوك')){throw new PermissionException();}$behaviorNote = BehaviorNote::onlyTrashed()->findOrFail($id);$behaviorNote->restore();return ResponseHelper::jsonResponse(new BehaviorNoteResource($behaviorNote->load(['student','schoolDay','createdBy'])),'تم استعادة ملاحظة السلوك بنجاح');}public function forceDeleteBehaviorNote($id){if(!auth()->user()->hasPermissionTo('حذف ملاحظة سلوك نهائياً')){throw new PermissionException();}$behaviorNote = BehaviorNote::onlyTrashed()->findOrFail($id);$behaviorNote->forceDelete();return ResponseHelper::jsonResponse(null,'تم حذف ملاحظة السلوك نهائياً بنجاح');}public function getByStudent($studentId){if(!auth()->user()->hasPermissionTo('عرض ملاحظات السلوك')){throw new PermissionException();}$behaviorNotes = BehaviorNote::where('student_id',$studentId)->with(['student','schoolDay','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(BehaviorNoteResource::collection($behaviorNotes),);}public function getBySchoolDay($schoolDayId){if(!auth()->user()->hasPermissionTo('عرض ملاحظات السلوك')){throw new PermissionException();}$behaviorNotes = BehaviorNote::where('school_day_id',$schoolDayId)->with(['student','schoolDay','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(BehaviorNoteResource::collection($behaviorNotes),);}public function getByBehaviorType($behaviorType){if(!auth()->user()->hasPermissionTo('عرض ملاحظات السلوك')){throw new PermissionException();}$behaviorNotes = BehaviorNote::where('behavior_type',$behaviorType)->with(['student','schoolDay','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(BehaviorNoteResource::collection($behaviorNotes),);}}
// ===== C:\Development\Laravel\school\app\Services\FileService.php =====
namespace App\Services;class FileService{public function getFiles(){$role = auth()->user()->role;if($role == 'admin'){return $this->getAdminFiles();}}public function getAdminFiles(){$files = File::with('schoolDay')->get();return ResponseHelper::jsonResponse(FileResource::collection($files),'files retrieved successfully');}public function getLastSchoolDayID(){$today = now()->toDateString();$todaySchoolDay = SchoolDay::where('date',$today)->first();if($todaySchoolDay){return $todaySchoolDay->id;}$lastSchoolDay = SchoolDay::where('date','<',$today)->orderBy('date','desc')->orderBy('id','desc')->first();return $lastSchoolDay ? $lastSchoolDay->id : null;}public function store(StoreFileRequest $request){$data = $request->validated();$lastSchoolDayID = $this->getLastSchoolDayID();$subjectCode = Subject::find($data['subject_id'])->first()->code;$lastFileID = File::latest()->first()->id ?? 0;$photo = $this->handlePhoto($request,$subjectCode);$file = $this->handleFile($request,$subjectCode,$lastFileID);$size = Storage::disk('public')->size($file);$result = File::create([
'subject_id' => $data['subject_id'],'title' => $data['title'],'description' => $data['description'],'school_day_id' => $lastSchoolDayID,'photo' => $photo,'file' => $file,'size' => $size,'created_by' => $request->user()->id,]);$this->handleFileTargetsOnCreate($result,$request);return ResponseHelper::jsonResponse(FileResource::make($result),'file stored successfully');}public function handlePhoto($request,$subjectCode){$photoPath = null;if($request->hasFile('photo')){try{$image = $request->file('photo');$imageName = $image->hashName();$path = 'library/images/' . $subjectCode;$imagePath = $path . '/' . $imageName;if(!Storage::disk('public')->exists($imagePath)){$image->storeAs($path,$imageName,'public');}$photoPath = $imagePath;}catch(\Exception $e){throw new ImageUploadFailed();}}return $photoPath;}public function handleFile(StoreFileRequest $request,$subjectCode,$id){$rPath = null;if($request->hasFile('file')){$file = $request->file('file');$extension = $file->getClientOriginalExtension();$fileName = $subjectCode . '-' .($id + 1). '.' . $extension;$path = 'library/files/' . $subjectCode;$filePath = $path . '/' . $fileName;if(!Storage::disk('public')->exists($filePath)){$file->storeAs($path,$fileName,'public');}$rPath = $filePath;}return $rPath;}public function handleFileTargetsOnCreate(File $file,StoreFileRequest $request){$user = auth()->user();if($request->filled('section_ids')){foreach($request->section_ids as $section_id){FileTarget::create([
'file_id' => $file->id,'grade_id' => null,'section_id' => $section_id,'created_by' => $user->id,]);}}else if($request->filled('grade_ids')){foreach($request->grade_ids as $grade_id){FileTarget::create([
'file_id' => $file->id,'grade_id' => $grade_id,'section_id' => null,'created_by' => $user->id,]);}}else{FileTarget::create([
'file_id' => $file->id,'grade_id' => null,'section_id' => null,'created_by' => $user->id,]);}}}
// ===== C:\Development\Laravel\school\app\Services\GradeService.php =====
namespace App\Services;class GradeService{public function listGrade(){$grades = Grade::with([
'createdBy',])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeResource::collection($grades));}public function createGrade(GradeRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$grade = Grade::create($credentials);return ResponseHelper::jsonResponse(new GradeResource($grade),__('messages.grade.created'),201,true);}public function showGrade(Grade $grade){$grade->load([
'createdBy',]);return ResponseHelper::jsonResponse(new GradeResource($grade),);}public function updateGrade($request,Grade $grade){$grade->update([
'title' => $request->title,]);$grade->load([
'createdBy',]);return ResponseHelper::jsonResponse(new GradeResource($grade),__('messages.grade.updated'),);}public function destroyGrade(Grade $grade){$grade->delete();return ResponseHelper::jsonResponse(null,__('messages.grade.deleted'),);}public function listTrashedGrades(){$grades = Grade::with([
'createdBy',])->onlyTrashed()->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeResource::collection($grades));}public function restoreGrade($id){$grade = Grade::withTrashed()->findOrFail($id);if(!$grade->trashed()){return ResponseHelper::jsonResponse(null,'Grade is not deleted',400,false);}$grade->restore();return ResponseHelper::jsonResponse(new GradeResource($grade),__('messages.grade.restored'),);}public function forceDeleteGrade($id){$grade = Grade::withTrashed()->findOrFail($id);if($grade->sections()->exists()){return ResponseHelper::jsonResponse(null,__('messages.grade.has_sections'),400,false);}if($grade->subjectMajors()->exists()){return ResponseHelper::jsonResponse(null,__('messages.grade.has_subject_majors'),400,false);}if($grade->settingGradeYears()->exists()){return ResponseHelper::jsonResponse(null,__('messages.grade.has_settings'),400,false);}$grade->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.grade.force_deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\GradeYearSettingService.php =====
namespace App\Services;class GradeYearSettingService{public function listGradeYearSettings(){$user = auth()->user();if(!$user->hasPermissionTo('عرض إعدادات الصفوف السنوية')){throw new PermissionException();}$settings = GradeYearSetting::with([
'year','grade','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeYearSettingResource::collection($settings));}public function createGradeYearSetting(GradeYearSettingRequest $request){$user = auth()->user();if(!$user->hasPermissionTo('انشاء إعداد صف سنوي')){throw new PermissionException();}$credentials = $request->validated();$credentials['created_by'] = $user->id;$existingSetting = GradeYearSetting::where('year_id',$credentials['year_id'])->where('grade_id',$credentials['grade_id'])->first();if($existingSetting){return ResponseHelper::jsonResponse(null,__('messages.grade_year_setting.already_exists'),400,false);}$setting = GradeYearSetting::create($credentials);$setting->load([
'year','grade','createdBy'
]);return ResponseHelper::jsonResponse(new GradeYearSettingResource($setting),__('messages.grade_year_setting.created'),201,true);}public function showGradeYearSetting(GradeYearSetting $gradeYearSetting){$user = auth()->user();if(!$user->hasPermissionTo('عرض إعداد صف سنوي')){throw new PermissionException();}$gradeYearSetting->load([
'year','grade','createdBy'
]);return ResponseHelper::jsonResponse(new GradeYearSettingResource($gradeYearSetting));}public function updateGradeYearSetting(GradeYearSettingRequest $request,GradeYearSetting $gradeYearSetting){$user = auth()->user();if(!$user->hasPermissionTo('تعديل إعداد صف سنوي')){throw new PermissionException();}$credentials = $request->validated();$gradeYearSetting->update($credentials);$gradeYearSetting->load([
'year','grade','createdBy'
]);return ResponseHelper::jsonResponse(new GradeYearSettingResource($gradeYearSetting),__('messages.grade_year_setting.updated'));}public function destroyGradeYearSetting(GradeYearSetting $gradeYearSetting){$user = auth()->user();if(!$user->hasPermissionTo('حذف إعداد صف سنوي')){throw new PermissionException();}$gradeYearSetting->delete();return ResponseHelper::jsonResponse(null,__('messages.grade_year_setting.deleted'));}public function listTrashedGradeYearSettings(){$user = auth()->user();if(!$user->hasPermissionTo('عرض إعدادات الصفوف السنوية')){throw new PermissionException();}$settings = GradeYearSetting::with([
'year','grade','createdBy'
])->onlyTrashed()->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeYearSettingResource::collection($settings));}public function restoreGradeYearSetting($id){$user = auth()->user();if(!$user->hasPermissionTo('تعديل إعداد صف سنوي')){throw new PermissionException();}$setting = GradeYearSetting::withTrashed()->findOrFail($id);if(!$setting->trashed()){return ResponseHelper::jsonResponse(null,'Grade year setting is not deleted',400,false);}$setting->restore();return ResponseHelper::jsonResponse(new GradeYearSettingResource($setting),__('messages.grade_year_setting.restored'));}public function forceDeleteGradeYearSetting($id){$user = auth()->user();if(!$user->hasPermissionTo('حذف إعداد صف سنوي')){throw new PermissionException();}$setting = GradeYearSetting::withTrashed()->findOrFail($id);$setting->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.grade_year_setting.force_deleted'));}public function getSettingsByGrade($gradeId){$user = auth()->user();if(!$user->hasPermissionTo('عرض إعدادات الصفوف السنوية')){throw new PermissionException();}$grade = Grade::findOrFail($gradeId);$settings = GradeYearSetting::where('grade_id',$gradeId)->with([
'year','grade','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeYearSettingResource::collection($settings));}public function getSettingsByYear($yearId){$user = auth()->user();if(!$user->hasPermissionTo('عرض إعدادات الصفوف السنوية')){throw new PermissionException();}$year = Year::findOrFail($yearId);$settings = GradeYearSetting::where('year_id',$yearId)->with([
'year','grade','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeYearSettingResource::collection($settings));}}
// ===== C:\Development\Laravel\school\app\Services\MainSubjectService.php =====
namespace App\Services;class MainSubjectService{public function listMainSubjects(): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('عرض المواد')){throw new PermissionException();}$mainSubjects = MainSubject::with([
'grade','createdBy','subjects'
])->orderBy('name','asc')->get();return ResponseHelper::jsonResponse(MainSubjectResource::collection($mainSubjects));}public function createMainSubject($request): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('انشاء المواد')){throw new PermissionException();}$credentials = $request->validated();$credentials['created_by'] = $user->id;$mainSubject = MainSubject::create($credentials);$mainSubject->load(['grade','createdBy']);return ResponseHelper::jsonResponse(new MainSubjectResource($mainSubject),__('messages.main_subject.created'),201,true);}public function showMainSubject(MainSubject $mainSubject): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('عرض المواد')){throw new PermissionException();}$mainSubject->load([
'grade','createdBy','subjects.createdBy'
]);return ResponseHelper::jsonResponse(new MainSubjectResource($mainSubject));}public function updateMainSubject($request,MainSubject $mainSubject): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('تعديل المواد')){throw new PermissionException();}$credentials = $request->validated();$mainSubject->update($credentials);$mainSubject->load(['grade','createdBy']);return ResponseHelper::jsonResponse(new MainSubjectResource($mainSubject),__('messages.main_subject.updated'));}public function destroyMainSubject(MainSubject $mainSubject): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('حذف المواد')){throw new PermissionException();}if($mainSubject->subjects()->exists()){return response()->json([
'message' => 'Cannot delete main subject with existing subjects'
],Response::HTTP_CONFLICT);}$mainSubject->delete();return ResponseHelper::jsonResponse(null,__('messages.main_subject.deleted'));}public function listTrashedMainSubjects(): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('عرض المواد')){throw new PermissionException();}$mainSubjects = MainSubject::with(['grade','createdBy'])->onlyTrashed()->orderBy('name','asc')->get();return ResponseHelper::jsonResponse(MainSubjectResource::collection($mainSubjects));}public function restoreMainSubject($id): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('تعديل المواد')){throw new PermissionException();}$mainSubject = MainSubject::withTrashed()->findOrFail($id);if(!$mainSubject->trashed()){return ResponseHelper::jsonResponse(null,'Main subject is not deleted',400,false);}$mainSubject->restore();return ResponseHelper::jsonResponse(new MainSubjectResource($mainSubject),__('messages.main_subject.restored'));}public function forceDeleteMainSubject($id): JsonResponse{$user = auth()->user();if(!$user->hasPermissionTo('حذف المواد')){throw new PermissionException();}$mainSubject = MainSubject::withTrashed()->findOrFail($id);if($mainSubject->subjects()->exists()){return ResponseHelper::jsonResponse(null,__('messages.main_subject.cannot_delete_with_subjects'),400,false);}$mainSubject->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.main_subject.force_deleted'));}}
// ===== C:\Development\Laravel\school\app\Services\MessageService.php =====
namespace App\Services;class MessageService{public function listMessages(){if(!auth()->user()->hasPermissionTo('عرض الرسائل')){throw new PermissionException();}$messages = Message::with(['user','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(MessageResource::collection($messages),);}public function createMessage($request){if(!auth()->user()->hasPermissionTo('إضافة رسالة')){throw new PermissionException();}$data = $request->validated();$data['created_by'] = auth()->id();$message = Message::create($data);return ResponseHelper::jsonResponse(new MessageResource($message->load(['user','createdBy'])),'تم إنشاء الرسالة بنجاح',201);}public function showMessage($id){if(!auth()->user()->hasPermissionTo('عرض رسالة')){throw new PermissionException();}$message = Message::with(['user','createdBy'])->findOrFail($id);return ResponseHelper::jsonResponse(new MessageResource($message),);}public function updateMessage($request,$id){if(!auth()->user()->hasPermissionTo('تعديل رسالة')){throw new PermissionException();}$message = Message::findOrFail($id);$data = $request->validated();$message->update($data);return ResponseHelper::jsonResponse(new MessageResource($message->load(['user','createdBy'])),'تم تحديث الرسالة بنجاح');}public function deleteMessage($id){if(!auth()->user()->hasPermissionTo('حذف رسالة')){throw new PermissionException();}$message = Message::findOrFail($id);$message->delete();return ResponseHelper::jsonResponse(null,'تم حذف الرسالة بنجاح');}public function getByUser($userId){if(!auth()->user()->hasPermissionTo('عرض الرسائل')){throw new PermissionException();}$messages = Message::where('user_id',$userId)->with(['user','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(MessageResource::collection($messages),);}}
// ===== C:\Development\Laravel\school\app\Services\NewsService.php =====
namespace App\Services;class NewsService{public function getNews(){$user = auth()->user();if($user->role === 'student'){return $this->getStudentNews();}if($user->role === 'admin'){return $this->getAdminNews();}}public function getStudentNews(): JsonResponse{$student = auth()->user()->student;$enrollments = StudentEnrollment::where('student_id',$student->id)->whereHas('semester.year',function($query){$query->where('is_active',true);})->get();$sectionIds = $enrollments->pluck('section_id');$gradeId = $enrollments->pluck('grade_id')->unique();$news = News::whereHas('newsTargets',function($query)use($gradeId,$sectionIds){$query
->whereIn('section_id',$sectionIds)->orWhere('grade_id',$gradeId)->orWhere(function($q){$q->whereNull('section_id')->whereNull('grade_id');});})->orderBy('created_at','desc')->get();$uniqueNews = collect($news)->unique('id')->values();return ResponseHelper::jsonResponse(NewsResource::collection($uniqueNews));}public function getAdminNews(){$news = News::with('newsTargets.section.grade','newsTargets.grade')->get();return ResponseHelper::jsonResponse(NewsResource::collection($news));}public function handlePhoto($request){$photoPath = null;if($request->hasFile('photo')){try{$image = $request->file('photo');$imageName = $image->hashName();$imagePath = 'news_images/' . $imageName;if(!Storage::disk('public')->exists($imagePath)){$image->storeAs('news_images',$imageName,'public');}$photoPath = $imagePath;}catch(\Exception $e){throw new ImageUploadFailed();}}return $photoPath;}public function getLastSchoolDayID(){$today = now()->toDateString();$todaySchoolDay = SchoolDay::where('date',$today)->first();if($todaySchoolDay){return $todaySchoolDay->id;}$lastSchoolDay = SchoolDay::where('date','<',$today)->orderBy('date','desc')->orderBy('id','desc')->first();return $lastSchoolDay ? $lastSchoolDay->id : null;}public function createNews($request): NewsResource{$user = auth()->user();$data = $request->validated();$photoPath = $this->handlePhoto($request);$schoolDayID = $this->getLastSchoolDayID();$content = $data['content'];$content = $this->handleContent($content);$news = News::create([
'title' => $data['title'],'content' => $content,'photo' => $photoPath,'school_day_id' => $schoolDayID,'created_by' => $user->id,]);$this->handleNewsTargetsOnCreate($request,$news);return NewsResource::make($news);}public function updateNews($request,$news){$user = auth()->user();$data = $request->validated();$photoPath = $this->handlePhoto($request);$content = $this->handleContent($data['content']);$data['content'] = $content;if($request->filled('section_ids')){$this->updateSections($news,$request);}else if($request->filled('grade_ids')){$this->updateGrades($news,$request);}else{NewsTarget::where('news_id',$news->id)->delete();NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => null,'created_by' => $user->id,]);}if($photoPath){$data['photo'] = $photoPath;}$news->update($data);return ResponseHelper::jsonResponse(NewsResource::make($news),'news updated');}public function showNews(News $news){return ResponseHelper::jsonResponse(NewsResource::make($news));}public function deleteNews($news){$data = clone $news;NewsTarget::where('news_id',$news->id)->delete();$news->delete();return ResponseHelper::jsonResponse(NewsResource::make($data),'news deleted');}public function handleContent(mixed $content): mixed{if(is_string($content)){$decodedContent = json_decode($content,true);if(json_last_error()!== JSON_ERROR_NONE){throw new \InvalidArgumentException('Invalid JSON content provided');}if(!isset($decodedContent['ops'])|| !is_array($decodedContent['ops'])){throw new \InvalidArgumentException('Content must have ops array structure');}}return $content;}public function handleNewsTargetsOnCreate($request,$news): void{$user = auth()->user();if($request->filled('section_ids')){foreach($request->section_ids as $section_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => $section_id,'created_by' => $user->id,]);}}else if($request->filled('grade_ids')){foreach($request->grade_ids as $grade_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => $grade_id,'section_id' => null,'created_by' => $user->id,]);}}else{NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => null,'created_by' => $user->id,]);}}public function updateSections($news,$request): void{$user = auth()->user();NewsTarget::where('news_id',$news->id)->whereNotNull('grade_id')->delete();NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNull('grade_id')->delete();$existingSections = NewsTarget::where('news_id',$news->id)->whereNotNull('section_id')->whereNull('grade_id')->pluck('section_id')->toArray();$sectionsToDelete = array_diff($existingSections,$request->section_ids);$sectionsToAdd = array_diff($request->section_ids,$existingSections);NewsTarget::where('news_id',$news->id)->whereIn('section_id',$sectionsToDelete)->whereNull('grade_id')->delete();foreach($sectionsToAdd as $section_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => $section_id,'created_by' => $user->id,]);}}public function updateGrades($news,$request): void{$user = auth()->user();NewsTarget::where('news_id',$news->id)->whereNotNull('section_id')->delete();NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNull('grade_id')->delete();$existingGrades = NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNotNull('grade_id')->pluck('grade_id')->toArray();$gradesToDelete = array_diff($existingGrades,$request->grade_ids);$gradesToAdd = array_diff($request->grade_ids,$existingGrades);NewsTarget::where('news_id',$news->id)->whereIn('grade_id',$gradesToDelete)->whereNull('section_id')->delete();foreach($gradesToAdd as $grade_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => $grade_id,'section_id' => null,'created_by' => $user->id,]);}}}
// ===== C:\Development\Laravel\school\app\Services\PermissionService.php =====
namespace App\Services;class PermissionService{public function listPermissions(){$user = auth()->user();if($user->hasPermissionTo('عرض الصلاحيات')){throw new PermissionException();}return ResponseHelper::jsonResponse(PermissionResource::collection(Permission::all()),__('messages.permission.list'),201);}}
// ===== C:\Development\Laravel\school\app\Services\QuestionService.php =====
namespace App\Services;class QuestionService{private function handleImageUpload($request,string $fieldName,string $folder): ?string{if(!$request->hasFile($fieldName)){if($fieldName == 'question_photo')return 'question_images/default.png';else
return 'hint_images/default.png';}try{$file = $request->file($fieldName);$hash = md5_file($file->getRealPath());$extension = $file->getClientOriginalExtension();$filename = "{$folder}/{$hash}.{$extension}";if(!Storage::disk('public')->exists($filename)){Storage::disk('public')->putFileAs($folder,$file,"{$hash}.{$extension}");}return $filename;}catch(\Exception $e){throw new ImageUploadFailed();}}private function normalizeDeltaToPlainText($delta){if(is_string($delta)){$decoded = json_decode($delta,true);}elseif(is_array($delta)){$decoded = $delta;}else{return '';}$ops = $decoded['ops'] ?? [];$plainText = '';foreach($ops as $op){if(isset($op['insert'])){$plainText .= $op['insert'];}}$plainText = strtolower($plainText);$plainText = preg_replace('/\s+/','',$plainText);return trim($plainText);}public function create($request,$quiz_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$credentials = $request->validated();$plainText = $this->normalizeDeltaToPlainText($request->input('question_text'));$existingQuestion = Question::where('quiz_id',$quiz_id)->whereRaw("LOWER(question_text_plain)= ?",[strtolower($plainText)])->first();if($existingQuestion || empty($plainText)){throw new QuestionAlreadyExistsException();}$credentials['quiz_id'] = $quiz_id;$credentials['question_text_plain'] = $plainText;$credentials['question_photo'] = $this->handleImageUpload($request,'question_photo','question_images');$credentials['hint_photo'] = $this->handleImageUpload($request,'hint_photo','hint_images');if($credentials['right_choice'] >= $credentials['choices_count']){return ResponseHelper::jsonResponse(null,__('messages.question.invalid_right_choice'),400,false);}Question::create($credentials);return ResponseHelper::jsonResponse(null,__('messages.question.created'),);}public function update($request,$quiz_id,$question_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعديل سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz){throw new QuizNotFoundException();}$question = Question::where('id',$question_id)->where('quiz_id',$quiz_id)->first();if(!$question){throw new QuestionNotFoundException();}$credentials = $request->validated();if(array_key_exists('question_text',$credentials)){$plain = $this->normalizeDeltaToPlainText($credentials['question_text']);if(empty($plain)){throw new InvalidQuestionTextException();}$credentials['question_text_plain'] = $plain;}if($request->hasFile('question_photo')){if($question->question_photo && $question->question_photo !== 'question_images/default.png'){Storage::disk('public')->delete($question->question_photo);}$credentials['question_photo'] = $this->handleImageUpload($request,'question_photo','question_images');}if($request->hasFile('hint_photo')){if($question->hint_photo && $question->hint_photo !== 'hint_images/default.png'){Storage::disk('public')->delete($question->hint_photo);}$credentials['hint_photo'] = $this->handleImageUpload($request,'hint_photo','hint_images');}if($credentials['right_choice'] >= $credentials['choices_count']){return ResponseHelper::jsonResponse(null,__('messages.question.invalid_right_choice'),400,false);}$question->update($credentials);return ResponseHelper::jsonResponse([],__('messages.question.updated'),201);}public function delete(int $quiz_id,int $question_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('حذف سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$question = Question::where('id',$question_id)->where('quiz_id',$quiz_id)->first();if(!$question){throw new QuestionNotFoundException();}if($question->question_photo && $question->question_photo !== 'question_images/default.png'){Storage::disk('public')->delete($question->question_photo);}if($question->hint_photo && $question->hint_photo !== 'hint_images/default.png'){Storage::disk('public')->delete($question->hint_photo);}$question->delete();return ResponseHelper::jsonResponse(null,__('messages.question.deleted'),200);}}
// ===== C:\Development\Laravel\school\app\Services\QuizService.php =====
namespace App\Services;class QuizService{public function listQuizzes($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('عرض الاختبارات المؤتمتة'))){throw new PermissionException();}$credentials = $request->validated();$query = Quiz::withCount('questions')->with(['targets.subject','targets.section.grade','targets.semester'])->where('created_by',$user->id);if(isset($credentials['grade_id'])){$query->whereHas('targets.section.grade',fn($q)=> $q->where('id',$credentials['grade_id']));}if(isset($credentials['section_id'])){$query->whereHas('targets',fn($q)=> $q->where('section_id',$credentials['section_id']));}$quizzes = $query->get();return ResponseHelper::jsonResponse(QuizResource::collection($quizzes),__('messages.quiz.listed'));}public function showQuiz($id){$user = auth()->user();$quiz = Quiz::with([
'questions','targets.subject','targets.section.grade','targets.semester',])->find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('عرض الاختبار المؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}return ResponseHelper::jsonResponse(new DetailedQuizResource($quiz),__('messages.quiz.fetched'));}public function create($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء اختبار مؤتمت'))){throw new PermissionException();}$credentials = $request->validated();DB::beginTransaction();try{$quiz = Quiz::create([
'name' => $credentials['name'],'created_by' => $user->id,]);foreach($credentials['targets'] as $target){QuizTarget::create([
'quiz_id' => $quiz->id,'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);}DB::commit();return ResponseHelper::jsonResponse(null,__('messages.quiz.created'),201);}catch(\Throwable $e){DB::rollBack();throw $e;}}public function activate($id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تفعيل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if($quiz->is_active){return ResponseHelper::jsonResponse(null,__("messages.quiz.already_active"),422,false);}$quiz->update([
'is_active' => 1,'taken_at' => now(),]);return ResponseHelper::jsonResponse(null,__("messages.quiz.activated"));}public function deactivate(int $id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعطيل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz->is_active){return ResponseHelper::jsonResponse(null,__("messages.quiz.already_inactive"),422,false);}$quiz->update([
'is_active' => false
]);return ResponseHelper::jsonResponse(null,__("messages.quiz.deactivated"));}public function update($request,$id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعديل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$credentials = $request->validated();DB::beginTransaction();try{$quiz->update([
'name' => $credentials['name'],]);$existingIds = [];foreach($credentials['targets'] as $target){if(isset($target['id'])){$quizTarget = QuizTarget::where('id',$target['id'])->where('quiz_id',$quiz->id)->first();if($quizTarget){$quizTarget->update([
'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);$existingIds[] = $quizTarget->id;}}else{$new = $quiz->targets()->create([
'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);$existingIds[] = $new->id;}}$quiz->targets()->whereNotIn('id',$existingIds)->delete();DB::commit();return ResponseHelper::jsonResponse(null,__("messages.quiz.updated"),201);}catch(\Throwable $e){DB::rollBack();throw $e;}}public function destroy($id){$user = auth()->user();$quiz = Quiz::with('questions','targets')->find($id);if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('حذف اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz){throw new QuizNotFoundException();}$quiz->delete();return ResponseHelper::jsonResponse(null,__("messages.quiz.deleted"));}}
// ===== C:\Development\Laravel\school\app\Services\RoleService.php =====
namespace App\Services;class RoleService{public function create($request){$user = auth()->user();if(!$user->hasPermissionTo('انشاء دور')){throw new PermissionException();}$credentials = $request->validated();try{DB::beginTransaction();$role = Role::create([
'name' => $credentials['name'],'guard_name' => 'api',]);if(!empty($credentials['permissions'])){$role->syncPermissions($credentials['permissions']);}DB::commit();return ResponseHelper::jsonResponse(new RoleResource($role),__('messages.role.created'),201);}catch(\Exception $e){DB::rollBack();}}public function update($request,$id){$admin = auth()->user();if(!$admin->hasPermissionTo('تعديل دور')){throw new PermissionException();}$credentials = $request->validated();$role = Role::find($id);$role->update([
'name' => $credentials['name'],]);$role->syncPermissions($credentials['permissions']);return ResponseHelper::jsonResponse(new RoleResource($role),__('messages.role.updated'),201,true);}public function list(){$admin = auth()->user();if(!$admin->hasPermissionTo('عرض ادوار')){throw new PermissionException();}$roles = Role::with('permissions')->get();return ResponseHelper::jsonResponse(RoleResource::collection($roles),__('messages.role.listed'),200,true);}public function getRole($id){$admin = auth()->user();if(!$admin->hasPermissionTo('عرض دور')){throw new PermissionException();}$role = Role::with('permissions')->find($id);if(!$role){throw new RoleNotFoundException();}return ResponseHelper::jsonResponse(new RoleResource($role),__('messages.role.get'),200,true);}public function delete($id){$admin = auth()->user();$role = Role::Find($id);if(!$role){throw new RoleNotFoundException();}$role->delete();return ResponseHelper::jsonResponse(null,__('messages.role.deleted'),200,true);}}
// ===== C:\Development\Laravel\school\app\Services\SchoolDayService.php =====
namespace App\Services;class SchoolDayService{public function listTrashedSchoolDays(Semester $semester){$schoolDays = SchoolDay::with(['createdBy','semester'])->where('semester_id',$semester->id)->onlyTrashed()->orderBy('date','desc')->get();return ResponseHelper::jsonResponse(SchoolDayResource::collection($schoolDays));}public function listSchoolDay(Semester $semester){$schoolDays = $semester->schoolDays;return ResponseHelper::jsonResponse(SchoolDayResource::collection($schoolDays));}public function createSchoolDay(SchoolDayRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$schoolDay = SchoolDay::create($credentials);return ResponseHelper::jsonResponse(new SchoolDayResource($schoolDay),__('messages.school_day.created'),201,true);}public function updateSchoolDay($request,SchoolDay $schoolDay){$schoolDay->update([
'date' => $request->date,'semester_id' => $request->semester_id,'type' => $request->type,]);$schoolDay->load(['createdBy','semester']);return ResponseHelper::jsonResponse(new SchoolDayResource($schoolDay),__('messages.school_day.updated'),);}public function destroySchoolDay(SchoolDay $schoolDay){if($schoolDay->assignments()->exists()||
$schoolDay->behaviorNotes()->exists()||
$schoolDay->studyNotes()->exists()||
$schoolDay->studentAttendances()->exists()||
$schoolDay->teacherAttendances()->exists()){return response()->json([
'message' => 'Cannot delete school day with existing related data'
],400);}$schoolDay->delete();return ResponseHelper::jsonResponse(null,__('messages.school_day.deleted'),);}public function restoreSchoolDay($id){$schoolDay = SchoolDay::withTrashed()->findOrFail($id);if(!$schoolDay->trashed()){return ResponseHelper::jsonResponse(null,'School day is not deleted',400,false);}$schoolDay->restore();return ResponseHelper::jsonResponse(new SchoolDayResource($schoolDay),__('messages.school_day.restored'),);}public function forceDeleteSchoolDay($id){$schoolDay = SchoolDay::withTrashed()->findOrFail($id);if($schoolDay->assignments()->exists()||
$schoolDay->behaviorNotes()->exists()||
$schoolDay->studyNotes()->exists()||
$schoolDay->studentAttendances()->exists()||
$schoolDay->teacherAttendances()->exists()){return ResponseHelper::jsonResponse(null,__('messages.school_day.has_related_data'),400,false);}$schoolDay->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.school_day.force_deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\ScoreQuizService.php =====
namespace App\Services;class ScoreQuizService{public function create($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء نتيجة اختبار مؤتمت'))){throw new PermissionException();}$student_id = auth()->user()->student->id;if(!$student_id){throw new StudentNotFoundException();}$credentials = $request->validated();$credentials['student_id'] = $student_id;$existing = ScoreQuiz::where('quiz_id',$credentials['quiz_id'])->where('student_id',$student_id)->first();if($existing){throw new QuizAlreadySubmittedException();}if($credentials['score'] > $credentials['full_score']){ResponseHelper::jsonResponse([
null,__('messages.quiz.score_must_not_exceed{$credentials->full_score}.'),400,false
]);}ScoreQuiz::create($credentials);return ResponseHelper::jsonResponse(null,__('messages.quiz.score_created'),200);}}
// ===== C:\Development\Laravel\school\app\Services\SectionService.php =====
namespace App\Services;class SectionService{public function listSection(){$sections = Section::with(['createdBy','grade'])->orderBy('title','asc')->get();return ResponseHelper::jsonResponse(SectionResource::collection($sections));}public function createSection(SectionRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$section = Section::create($credentials);$section->load(['createdBy','grade']);return ResponseHelper::jsonResponse(new SectionResource($section),__('messages.section.created'),201,true);}public function showSection(Section $section){$section->load([
'createdBy','grade',]);return ResponseHelper::jsonResponse(new SectionResource($section),);}public function updateSection(SectionRequest $request,Section $section){$section->update($request->validated());$section->load(['createdBy','grade']);return ResponseHelper::jsonResponse(new SectionResource($section),__('messages.section.updated'),);}public function destroySection(Section $section){$section->delete();return ResponseHelper::jsonResponse(null,__('messages.section.deleted'),);}public function listTrashedSections(){$sections = Section::with(['createdBy','grade'])->onlyTrashed()->orderBy('title','asc')->get();return ResponseHelper::jsonResponse(SectionResource::collection($sections));}public function restoreSection($id){$section = Section::withTrashed()->findOrFail($id);if(!$section->trashed()){return ResponseHelper::jsonResponse(null,'Section is not deleted',400,false);}$section->restore();return ResponseHelper::jsonResponse(new SectionResource($section),__('messages.section.restored'),);}public function forceDeleteSection($id){$section = Section::withTrashed()->findOrFail($id);if($section->studentEnrollments()->exists()){return ResponseHelper::jsonResponse(null,__('messages.section.has_students'),400,false);}if($section->quizTargets()->exists()){return ResponseHelper::jsonResponse(null,__('messages.section.has_quiz_targets'),400,false);}$section->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.section.force_deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\SemesterService.php =====
namespace App\Services;class SemesterService{public function createSemester(SemesterRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$semester = Semester::create($credentials);return ResponseHelper::jsonResponse(new SemesterResource($semester),__('messages.semester.created'),201,true);}public function updateSemester($request,$semester){$semester->update([
'name' => $request->name,'start_date' => $request->start_date,'end_date' => $request->end_date,'is_active' => $request->is_active ?? $semester->is_active,]);$semester->load(['createdBy']);return ResponseHelper::jsonResponse(new SemesterResource($semester),__('messages.semester.updated'),);}public function destroySemester(Semester $semester){if($semester->schoolDays()->exists()){return response()->json([
'message' => 'Cannot delete semester with existing school days'
],400);}$semester->delete();return ResponseHelper::jsonResponse(null,__('messages.semester.deleted'),);}public function restoreSemester($id){$semester = Semester::withTrashed()->findOrFail($id);if(!$semester->trashed()){return ResponseHelper::jsonResponse(null,'Semester is not deleted',400,false);}$semester->restore();return ResponseHelper::jsonResponse(new SemesterResource($semester),__('messages.semester.restored'),);}public function forceDeleteSemester($id){$semester = Semester::withTrashed()->findOrFail($id);if($semester->schoolDays()->exists()){return ResponseHelper::jsonResponse(null,__('messages.semester.has_school_days'),400,false);}if($semester->studentEnrollments()->exists()){return ResponseHelper::jsonResponse(null,__('messages.semester.has_enrollments'),400,false);}$semester->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.semester.force_deleted'),);}public function ActiveSemester(Semester $semester){$activeYears = Year::where('is_active',true)->get();foreach($activeYears as $activeYear){$activeYear->update(['is_active' => false]);}$year = $semester->year();$year->update(['is_active' => true]);$activeSemesters = Semester::where('is_active',true)->get();foreach($activeSemesters as $activeSemester){$activeSemester->update(['is_active' => false]);}$semester->update(['is_active' => true]);return ResponseHelper::jsonResponse(new SemesterResource($semester),);}}
// ===== C:\Development\Laravel\school\app\Services\StudentEnrollmentService.php =====
namespace App\Services;class StudentEnrollmentService{public function listStudentEnrollments(){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيلات الطلاب')){throw new PermissionException();}$enrollments = StudentEnrollment::with([
'student.user','section.grade','semester.year','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentEnrollmentResource::collection($enrollments));}public function createStudentEnrollment(StudentEnrollmentRequest $request){$user = auth()->user();if(!$user->hasPermissionTo('انشاء تسجيل طالب')){throw new PermissionException();}$credentials = $request->validated();$credentials['created_by'] = $user->id;$existingEnrollment = StudentEnrollment::where('student_id',$credentials['student_id'])->where('semester_id',$credentials['semester_id'])->first();if($existingEnrollment){return ResponseHelper::jsonResponse(null,__('messages.student_enrollment.already_exists'),400,false);}$enrollment = StudentEnrollment::create($credentials);$enrollment->load([
'student.user','section.grade','semester.year','createdBy'
]);return ResponseHelper::jsonResponse(new StudentEnrollmentResource($enrollment),__('messages.student_enrollment.created'),201,true);}public function showStudentEnrollment(StudentEnrollment $studentEnrollment){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيل طالب')){throw new PermissionException();}$studentEnrollment->load([
'student.user','section.grade','semester.year','createdBy','studentMarks.subject.mainSubject'
]);return ResponseHelper::jsonResponse(new StudentEnrollmentResource($studentEnrollment));}public function updateStudentEnrollment(StudentEnrollmentRequest $request,StudentEnrollment $studentEnrollment){$user = auth()->user();if(!$user->hasPermissionTo('تعديل تسجيل طالب')){throw new PermissionException();}$credentials = $request->validated();$studentEnrollment->update($credentials);$studentEnrollment->load([
'student.user','section.grade','semester.year','createdBy'
]);return ResponseHelper::jsonResponse(new StudentEnrollmentResource($studentEnrollment),__('messages.student_enrollment.updated'));}public function destroyStudentEnrollment(StudentEnrollment $studentEnrollment){$user = auth()->user();if(!$user->hasPermissionTo('حذف تسجيل طالب')){throw new PermissionException();}if($studentEnrollment->studentMarks()->exists()){return ResponseHelper::jsonResponse(null,__('messages.student_enrollment.has_marks'),400,false);}$studentEnrollment->delete();return ResponseHelper::jsonResponse(null,__('messages.student_enrollment.deleted'));}public function listTrashedStudentEnrollments(){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيلات الطلاب')){throw new PermissionException();}$enrollments = StudentEnrollment::with([
'student.user','section.grade','semester.year','createdBy'
])->onlyTrashed()->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentEnrollmentResource::collection($enrollments));}public function restoreStudentEnrollment($id){$user = auth()->user();if(!$user->hasPermissionTo('تعديل تسجيل طالب')){throw new PermissionException();}$enrollment = StudentEnrollment::withTrashed()->findOrFail($id);if(!$enrollment->trashed()){return ResponseHelper::jsonResponse(null,'Student enrollment is not deleted',400,false);}$enrollment->restore();return ResponseHelper::jsonResponse(new StudentEnrollmentResource($enrollment),__('messages.student_enrollment.restored'));}public function forceDeleteStudentEnrollment($id){$user = auth()->user();if(!$user->hasPermissionTo('حذف تسجيل طالب')){throw new PermissionException();}$enrollment = StudentEnrollment::withTrashed()->findOrFail($id);if($enrollment->studentMarks()->exists()){return ResponseHelper::jsonResponse(null,__('messages.student_enrollment.has_marks'),400,false);}$enrollment->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.student_enrollment.force_deleted'));}public function getEnrollmentsByStudent($studentId){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيلات الطلاب')){throw new PermissionException();}$student = Student::findOrFail($studentId);$enrollments = StudentEnrollment::where('student_id',$studentId)->with([
'student.user','section.grade','semester.year','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentEnrollmentResource::collection($enrollments));}public function getEnrollmentsBySection($sectionId){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيلات الطلاب')){throw new PermissionException();}$section = Section::findOrFail($sectionId);$enrollments = StudentEnrollment::where('section_id',$sectionId)->with([
'student.user','section.grade','semester.year','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentEnrollmentResource::collection($enrollments));}public function getEnrollmentsBySemester($semesterId){$user = auth()->user();if(!$user->hasPermissionTo('عرض تسجيلات الطلاب')){throw new PermissionException();}$semester = Semester::findOrFail($semesterId);$enrollments = StudentEnrollment::where('semester_id',$semesterId)->with([
'student.user','section.grade','semester.year','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentEnrollmentResource::collection($enrollments));}}
// ===== C:\Development\Laravel\school\app\Services\StudentMarkService.php =====
namespace App\Services;class StudentMarkService{public function listStudentMarks(){$user = auth()->user();if(!$user->hasPermissionTo('عرض درجات الطلاب')){throw new PermissionException();}$studentMarks = StudentMark::with([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentMarkResource::collection($studentMarks));}public function createStudentMark($request){$user = auth()->user();if(!$user->hasPermissionTo('انشاء درجة طالب')){throw new PermissionException();}$credentials = $request->validated();$credentials['created_by'] = $user->id;$existingMark = StudentMark::where('enrollment_id',$credentials['enrollment_id'])->where('subject_id',$credentials['subject_id'])->first();if($existingMark){return ResponseHelper::jsonResponse(null,__('messages.student_mark.already_exists'),400,false);}$subject = Subject::find($credentials['subject_id']);$total = $this->calculateTotalMark($credentials,$subject);$credentials['total'] = $total;$studentMark = StudentMark::create($credentials);$studentMark->load([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
]);return ResponseHelper::jsonResponse(new StudentMarkResource($studentMark),__('messages.student_mark.created'),201,true);}public function showStudentMark(StudentMark $studentMark){$user = auth()->user();if(!$user->hasPermissionTo('عرض درجة طالب')){throw new PermissionException();}$studentMark->load([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
]);return ResponseHelper::jsonResponse(new StudentMarkResource($studentMark));}public function updateStudentMark($request,StudentMark $studentMark){$user = auth()->user();if(!$user->hasPermissionTo('تعديل درجة طالب')){throw new PermissionException();}$credentials = $request->validated();$subject = Subject::find($credentials['subject_id']);$total = $this->calculateTotalMark($credentials,$subject);$credentials['total'] = $total;$studentMark->update($credentials);$studentMark->load([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
]);return ResponseHelper::jsonResponse(new StudentMarkResource($studentMark),__('messages.student_mark.updated'));}public function destroyStudentMark(StudentMark $studentMark){$user = auth()->user();if(!$user->hasPermissionTo('حذف درجة طالب')){throw new PermissionException();}$studentMark->delete();return ResponseHelper::jsonResponse(null,__('messages.student_mark.deleted'));}public function getMarksByEnrollment($enrollmentId){$user = auth()->user();if(!$user->hasPermissionTo('عرض درجات الطلاب')){throw new PermissionException();}$enrollment = StudentEnrollment::findOrFail($enrollmentId);$studentMarks = StudentMark::where('enrollment_id',$enrollmentId)->with([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentMarkResource::collection($studentMarks));}public function getMarksBySubject($subjectId){$user = auth()->user();if(!$user->hasPermissionTo('عرض درجات الطلاب')){throw new PermissionException();}$subject = Subject::findOrFail($subjectId);$studentMarks = StudentMark::where('subject_id',$subjectId)->with([
'subject.mainSubject.grade','enrollment.student','enrollment.section','enrollment.semester','createdBy'
])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(StudentMarkResource::collection($studentMarks));}private function calculateTotalMark($credentials,$subject){$total = 0;if(isset($credentials['homework'])&& $credentials['homework']){$total +=($credentials['homework'] * $subject->homework_percentage)/ 100;}if(isset($credentials['oral'])&& $credentials['oral']){$total +=($credentials['oral'] * $subject->oral_percentage)/ 100;}if(isset($credentials['activity'])&& $credentials['activity']){$total +=($credentials['activity'] * $subject->activity_percentage)/ 100;}if(isset($credentials['quiz'])&& $credentials['quiz']){$total +=($credentials['quiz'] * $subject->quiz_percentage)/ 100;}if(isset($credentials['exam'])&& $credentials['exam']){$total +=($credentials['exam'] * $subject->exam_percentage)/ 100;}return round($total,2);}}
// ===== C:\Development\Laravel\school\app\Services\StudentService.php =====
namespace App\Services;class StudentService{public function listStudents(){if(!auth()->user()->hasPermissionTo('عرض الطلاب')){throw new PermissionException();}$students = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','student')->with(['devices','student'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($students),);}}
// ===== C:\Development\Laravel\school\app\Services\StudyNoteService.php =====
namespace App\Services;class StudyNoteService{public function listStudyNotes(){if(!auth()->user()->hasPermissionTo('عرض الملاحظات الدراسية')){throw new PermissionException();}$studyNotes = StudyNote::with(['student','schoolDay','subject','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(StudyNoteResource::collection($studyNotes),);}public function listTrashedStudyNotes(){if(!auth()->user()->hasPermissionTo('عرض الملاحظات الدراسية المحذوفة')){throw new PermissionException();}$studyNotes = StudyNote::onlyTrashed()->with(['student','schoolDay','subject','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(StudyNoteResource::collection($studyNotes),);}public function createStudyNote($request){if(!auth()->user()->hasPermissionTo('إضافة ملاحظة دراسية')){throw new PermissionException();}$data = $request->validated();$data['created_by'] = auth()->id();$studyNote = StudyNote::create($data);return ResponseHelper::jsonResponse(new StudyNoteResource($studyNote->load(['student','schoolDay','subject','createdBy'])),'تم إنشاء الملاحظة الدراسية بنجاح',201);}public function showStudyNote($id){if(!auth()->user()->hasPermissionTo('عرض ملاحظة دراسية')){throw new PermissionException();}$studyNote = StudyNote::with(['student','schoolDay','subject','createdBy'])->findOrFail($id);return ResponseHelper::jsonResponse(new StudyNoteResource($studyNote),);}public function updateStudyNote($request,$id){if(!auth()->user()->hasPermissionTo('تعديل ملاحظة دراسية')){throw new PermissionException();}$studyNote = StudyNote::findOrFail($id);$data = $request->validated();$studyNote->update($data);return ResponseHelper::jsonResponse(new StudyNoteResource($studyNote->load(['student','schoolDay','subject','createdBy'])),'تم تحديث الملاحظة الدراسية بنجاح');}public function deleteStudyNote($id){if(!auth()->user()->hasPermissionTo('حذف ملاحظة دراسية')){throw new PermissionException();}$studyNote = StudyNote::findOrFail($id);$studyNote->delete();return ResponseHelper::jsonResponse(null,'تم حذف الملاحظة الدراسية بنجاح');}public function restoreStudyNote($id){if(!auth()->user()->hasPermissionTo('استعادة ملاحظة دراسية')){throw new PermissionException();}$studyNote = StudyNote::onlyTrashed()->findOrFail($id);$studyNote->restore();return ResponseHelper::jsonResponse(new StudyNoteResource($studyNote->load(['student','schoolDay','subject','createdBy'])),'تم استعادة الملاحظة الدراسية بنجاح');}public function forceDeleteStudyNote($id){if(!auth()->user()->hasPermissionTo('حذف ملاحظة دراسية نهائياً')){throw new PermissionException();}$studyNote = StudyNote::onlyTrashed()->findOrFail($id);$studyNote->forceDelete();return ResponseHelper::jsonResponse(null,'تم حذف الملاحظة الدراسية نهائياً بنجاح');}public function getByStudent($studentId){if(!auth()->user()->hasPermissionTo('عرض الملاحظات الدراسية')){throw new PermissionException();}$studyNotes = StudyNote::where('student_id',$studentId)->with(['student','schoolDay','subject','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(StudyNoteResource::collection($studyNotes),);}public function getBySchoolDay($schoolDayId){if(!auth()->user()->hasPermissionTo('عرض الملاحظات الدراسية')){throw new PermissionException();}$studyNotes = StudyNote::where('school_day_id',$schoolDayId)->with(['student','schoolDay','subject','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(StudyNoteResource::collection($studyNotes),);}public function getBySubject($subjectId){if(!auth()->user()->hasPermissionTo('عرض الملاحظات الدراسية')){throw new PermissionException();}$studyNotes = StudyNote::where('subject_id',$subjectId)->with(['student','schoolDay','subject','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(StudyNoteResource::collection($studyNotes),);}}
// ===== C:\Development\Laravel\school\app\Services\SubjectService.php =====
namespace App\Services;class SubjectService{public function listSubjects(){$user = auth()->user();if(!$user->hasPermissionTo('عرض المواد')){throw new PermissionException();}$subjects = Subject::with([
'mainSubject.grade','createdBy'
])->orderBy('name','asc')->get();return ResponseHelper::jsonResponse(SubjectResource::collection($subjects));}public function createSubject($request){$user = auth()->user();if(!$user->hasPermissionTo('انشاء مادة')){throw new PermissionException();}$credentials = $request->validated();$credentials['created_by'] = $user->id;$totalPercentage = $credentials['homework_percentage'] +
$credentials['oral_percentage'] +
$credentials['activity_percentage'] +
$credentials['quiz_percentage'] +
$credentials['exam_percentage'];if($totalPercentage !== 100){return ResponseHelper::jsonResponse(null,__('messages.subject.percentage_sum_error'),400,false);}$subject = Subject::create($credentials);$subject->load(['mainSubject.grade','createdBy']);return ResponseHelper::jsonResponse(new SubjectResource($subject),__('messages.subject.created'),201,true);}public function showSubject(Subject $subject){$user = auth()->user();if(!$user->hasPermissionTo('عرض المادة')){throw new PermissionException();}$subject->load([
'mainSubject.grade','createdBy'
]);return ResponseHelper::jsonResponse(new SubjectResource($subject));}public function updateSubject($request,Subject $subject){$user = auth()->user();if(!$user->hasPermissionTo('تعديل مادة')){throw new PermissionException();}$credentials = $request->validated();$totalPercentage = $credentials['homework_percentage'] +
$credentials['oral_percentage'] +
$credentials['activity_percentage'] +
$credentials['quiz_percentage'] +
$credentials['exam_percentage'];if($totalPercentage !== 100){return ResponseHelper::jsonResponse(null,__('messages.subject.percentage_sum_error'),400,false);}$subject->update($credentials);$subject->load(['mainSubject.grade','createdBy']);return ResponseHelper::jsonResponse(new SubjectResource($subject),__('messages.subject.updated'));}public function destroySubject(Subject $subject){$user = auth()->user();if(!$user->hasPermissionTo('حذف مادة')){throw new PermissionException();}if($subject->teacherSectionSubjects()->exists()||
$subject->quizTargets()->exists()||
$subject->assignments()->exists()||
$subject->studentMarks()->exists()||
$subject->studyNotes()->exists()||
$subject->files()->exists()){return response()->json([
'message' => 'Cannot delete subject with existing related data'
],Response::HTTP_CONFLICT);}$subject->delete();return ResponseHelper::jsonResponse(null,__('messages.subject.deleted'));}public function listTrashedSubjects(){$user = auth()->user();if(!$user->hasPermissionTo('عرض المواد')){throw new PermissionException();}$subjects = Subject::with([
'mainSubject.grade','createdBy'
])->onlyTrashed()->orderBy('name','asc')->get();return ResponseHelper::jsonResponse(SubjectResource::collection($subjects));}public function restoreSubject($id){$user = auth()->user();if(!$user->hasPermissionTo('تعديل مادة')){throw new PermissionException();}$subject = Subject::withTrashed()->findOrFail($id);if(!$subject->trashed()){return ResponseHelper::jsonResponse(null,'Subject is not deleted',400,false);}$subject->restore();return ResponseHelper::jsonResponse(new SubjectResource($subject),__('messages.subject.restored'));}public function forceDeleteSubject($id){$user = auth()->user();if(!$user->hasPermissionTo('حذف مادة')){throw new PermissionException();}$subject = Subject::withTrashed()->findOrFail($id);if($subject->teacherSectionSubjects()->exists()||
$subject->quizTargets()->exists()||
$subject->assignments()->exists()||
$subject->studentMarks()->exists()||
$subject->studyNotes()->exists()||
$subject->files()->exists()){return ResponseHelper::jsonResponse(null,__('messages.subject.cannot_delete_with_relations'),400,false);}$subject->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.subject.force_deleted'));}}
// ===== C:\Development\Laravel\school\app\Services\TeacherSectionSubjectService.php =====
namespace App\Services;class TeacherSectionSubjectService{public function listTeacherSectionSubjects(){if(!auth()->user()->hasPermissionTo('عرض معلمي المواد')){throw new PermissionException();}$teacherSectionSubjects = TeacherSectionSubject::with(['teacher','grade','subject','section','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(TeacherSectionSubjectResource::collection($teacherSectionSubjects),);}public function listTrashedTeacherSectionSubjects(){if(!auth()->user()->hasPermissionTo('عرض معلمي المواد المحذوفة')){throw new PermissionException();}$teacherSectionSubjects = TeacherSectionSubject::onlyTrashed()->with(['teacher','grade','subject','section','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(TeacherSectionSubjectResource::collection($teacherSectionSubjects),);}public function createTeacherSectionSubject($request){if(!auth()->user()->hasPermissionTo('إضافة معلم مادة')){throw new PermissionException();}$data = $request->validated();$data['created_by'] = auth()->id();$teacherSectionSubject = TeacherSectionSubject::create($data);return ResponseHelper::jsonResponse(new TeacherSectionSubjectResource($teacherSectionSubject->load(['teacher','grade','subject','section','createdBy'])),'تم إنشاء معلم المادة بنجاح',201);}public function showTeacherSectionSubject($id){if(!auth()->user()->hasPermissionTo('عرض معلم مادة')){throw new PermissionException();}$teacherSectionSubject = TeacherSectionSubject::with(['teacher','grade','subject','section','createdBy'])->findOrFail($id);return ResponseHelper::jsonResponse(new TeacherSectionSubjectResource($teacherSectionSubject),);}public function updateTeacherSectionSubject($request,$id){if(!auth()->user()->hasPermissionTo('تعديل معلم مادة')){throw new PermissionException();}$teacherSectionSubject = TeacherSectionSubject::findOrFail($id);$data = $request->validated();$teacherSectionSubject->update($data);return ResponseHelper::jsonResponse(new TeacherSectionSubjectResource($teacherSectionSubject->load(['teacher','grade','subject','section','createdBy'])),'تم تحديث معلم المادة بنجاح');}public function deleteTeacherSectionSubject($id){if(!auth()->user()->hasPermissionTo('حذف معلم مادة')){throw new PermissionException();}$teacherSectionSubject = TeacherSectionSubject::findOrFail($id);$teacherSectionSubject->delete();return ResponseHelper::jsonResponse(null,'تم حذف معلم المادة بنجاح');}public function restoreTeacherSectionSubject($id){if(!auth()->user()->hasPermissionTo('استعادة معلم مادة')){throw new PermissionException();}$teacherSectionSubject = TeacherSectionSubject::onlyTrashed()->findOrFail($id);$teacherSectionSubject->restore();return ResponseHelper::jsonResponse(new TeacherSectionSubjectResource($teacherSectionSubject->load(['teacher','grade','subject','section','createdBy'])),'تم استعادة معلم المادة بنجاح');}public function forceDeleteTeacherSectionSubject($id){if(!auth()->user()->hasPermissionTo('حذف معلم مادة نهائياً')){throw new PermissionException();}$teacherSectionSubject = TeacherSectionSubject::onlyTrashed()->findOrFail($id);$teacherSectionSubject->forceDelete();return ResponseHelper::jsonResponse(null,'تم حذف معلم المادة نهائياً بنجاح');}public function getByTeacher($teacherId){if(!auth()->user()->hasPermissionTo('عرض معلمي المواد')){throw new PermissionException();}$teacherSectionSubjects = TeacherSectionSubject::where('teacher_id',$teacherId)->with(['teacher','grade','subject','section','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(TeacherSectionSubjectResource::collection($teacherSectionSubjects),);}public function getBySection($sectionId){if(!auth()->user()->hasPermissionTo('عرض معلمي المواد')){throw new PermissionException();}$teacherSectionSubjects = TeacherSectionSubject::where('section_id',$sectionId)->with(['teacher','grade','subject','section','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(TeacherSectionSubjectResource::collection($teacherSectionSubjects),);}public function getBySubject($subjectId){if(!auth()->user()->hasPermissionTo('عرض معلمي المواد')){throw new PermissionException();}$teacherSectionSubjects = TeacherSectionSubject::where('subject_id',$subjectId)->with(['teacher','grade','subject','section','createdBy'])->orderBy('id','desc')->paginate(15);return ResponseHelper::jsonResponse(TeacherSectionSubjectResource::collection($teacherSectionSubjects),);}}
// ===== C:\Development\Laravel\school\app\Services\TeacherService.php =====
namespace App\Services;class TeacherService{public function listTeachers(){if(!auth()->user()->hasPermissionTo('عرض الاساتذة')){throw new PermissionException();}$teachers = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','teacher')->with(['teacher'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($teachers),);}}
// ===== C:\Development\Laravel\school\app\Services\UserService.php =====
namespace App\Services;class UserService{public function __construct(){}public function getUser($id){$user = User::select([
'id','first_name','father_name','last_name','email','user_type','birth_date','gender','phone','image','last_login'
])->with('devices')->find($id);if(!$user){throw new UserNotFoundException();}match($user->user_type){'admin' => $user->load('admin.createdBy'),'teacher' => $user->load('teacher.createdBy'),'student' => $user->load('student.createdBy'),};return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.get'));}public function updateUser($request,$id){$admin = auth()->user();if(!$admin->hasPermissionTo('تعديل مستخدم')){throw new PermissionException();}$user = User::select([
'id','first_name','father_name','last_name','email','user_type','birth_date','gender','phone','image'
])->find($id);if(!$user){throw new UserNotFoundException();}$credentials = $request->validated();if($request->hasFile('image')){try{if($user->image && $user->image !== 'user_images/default.png'){Storage::disk('public')->delete($user->image);}$credentials['image'] = $request->file('image')->store('user_images','public');$user->image = $credentials['image'];$user->save();}catch(\Exception $e){throw new ImageUploadFailed();}}DB::transaction(function()use($user,$credentials){$user->update($credentials);match($user->user_type){'admin' => $user->admin->touch(),'teacher' => $user->teacher->touch(),'student' => $user->student->update([
'updated_at' => now(),'grandfather' => $credentials['grandfather'] ?? $user->student->grandfather,'general_id' => $credentials['general_id'] ?? $user->student->general_id,'is_active' => $credentials['is_active'] ?? $user->student->is_active,])};});return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.updated'),201,true);}public function deleteUser(int $id){$admin = auth()->user();if(!$admin->hasPermissionTo('حذف مستخدم')){throw new PermissionException();}$user = User::find($id);if(!$user){throw new UserNotFoundException();}DB::transaction(function()use($user){match($user->user_type){'admin' => $user->admin?->delete(),'teacher' => $user->teacher?->delete(),'student' => $user->student?->delete()};if($user->image !== 'user_images/default.png'){Storage::disk('public')->delete($user->image);}$user->delete();});return ResponseHelper::jsonResponse(null,__('messages.user.deleted'),200,true);}public function listAdminsAndTeachers(){if(!auth()->user()->hasPermissionTo('عرض المشرفين و الاساتذة')){throw new PermissionException();}$users = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->whereIn('user_type',['admin','teacher'])->with(['admin','teacher'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($users),__('messages.user.list_admins_and_teachers'),);}}
// ===== C:\Development\Laravel\school\app\Services\YearService.php =====
namespace App\Services;class YearService{public function listYear(){$years = Year::with(['createdBy','semesters'])->orderBy('start_date','desc')->get();return ResponseHelper::jsonResponse(YearResource::collection($years));}public function listTrashedYears(){$years = Year::with(['createdBy','semesters'])->onlyTrashed()->orderBy('start_date','desc')->get();return ResponseHelper::jsonResponse(YearResource::collection($years));}public function createYear(YearRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$year = Year::create($credentials);return ResponseHelper::jsonResponse(new YearResource($year),__('messages.year.created'),201,true);}public function showYear(Year $year){$year->load(['createdBy','semesters.schoolDays','settingGradeYears.grade']);return ResponseHelper::jsonResponse(new YearResource($year),);}public function updateYear($request,Year $year){$year->update([
'name' => $request->name,'start_date' => $request->start_date,'end_date' => $request->end_date,'is_active' => $request->is_active ?? $year->is_active,]);$year->load(['createdBy','semesters']);return ResponseHelper::jsonResponse(new YearResource($year),__('messages.year.updated'),);}public function destroyYear(Year $year){if($year->semesters()->exists()){return response()->json([
'message' => 'Cannot delete year with existing semesters'
],Response::HTTP_CONFLICT);}$year->delete();return ResponseHelper::jsonResponse(null,__('messages.year.deleted'),);}public function restoreYear($id){$year = Year::withTrashed()->findOrFail($id);if(!$year->trashed()){return ResponseHelper::jsonResponse(null,'Year is not deleted',400,false);}$year->restore();return ResponseHelper::jsonResponse(new YearResource($year),__('messages.year.restored'),);}public function forceDeleteYear($id){$year = Year::withTrashed()->findOrFail($id);if($year->semesters()->exists()){return ResponseHelper::jsonResponse(null,__('messages.year.has_semesters'),400,false);}$year->forceDelete();return ResponseHelper::jsonResponse(null,__('messages.year.force_deleted'),);}public function ActiveYear(Year $year){$activeYears = Year::where('is_active',true)->get();foreach($activeYears as $activeYear){$activeYear->update(['is_active' => false]);}$year->update(['is_active' => true]);return ResponseHelper::jsonResponse(new YearResource($year),);}}

// === [Routes] ===
// ===== C:\Development\Laravel\school\routes\api.php =====
Route::prefix('auth')->name('auth.')->group(function(){Route::post('login',[AuthController::class,'login'])->name('login')->middleware('throttle:10,1');Route::post('forgot-password',[AuthController::class,'forgotPassword'])->name('forgot-password')->middleware('throttle:5,1');Route::post('reset-password',[AuthController::class,'resetPassword'])->name('reset-password')->middleware('throttle:5,1');Route::middleware(['auth:api'])->group(function(){Route::post('refresh',[AuthController::class,'refresh'])->name('refresh');Route::post('logout',[AuthController::class,'logout'])->name('logout');});});Route::middleware('auth:api')->group(function(){Route::post('register',[AuthController::class,'register']);Route::get('admins',[AdminController::class,'show']);Route::get('teachers',[TeacherController::class,'show']);Route::get('students',[StudentController::class,'show']);Route::get('staff',[UserController::class,'getStaff']);Route::resource('users',UserController::class)->only(['show','destroy']);Route::post('users/{user}',[UserController::class,'update']);Route::resource('roles',RoleController::class);Route::get('permissions',[PermissionController::class,'show']);})->middleware(['user_type:admin','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('change-password',[AuthController::class,'changePassword'])->name('change-password');})->middleware(['user_type:admin|teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::apiResource('quizzes',QuizController::class);Route::put('quizzes/{id}/activate',[QuizController::class,'activate']);Route::put('quizzes/{id}/deactivate',[QuizController::class,'deactivate']);Route::post('quizzes/{quiz_id}/questions',[QuestionController::class,'create']);Route::post('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'update']);Route::delete('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'destroy']);Route::get('quizzes',[QuizController::class,'index']);Route::get('quiz/{id}',[QuizController::class,'show']);})->middleware(['user_type:teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('score-quizzes',[ScoreQuizController::class,'create']);})->middleware(['user_type:student','throttle:5,1']);require __DIR__.'/news.php';require __DIR__.'/files.php';require __DIR__.'/years.php';require __DIR__.'/semesters.php';require __DIR__.'/school-days.php';require __DIR__.'/grades.php';require __DIR__.'/sections.php';require __DIR__.'/subjects.php';require __DIR__.'/student-enrollments.php';require __DIR__.'/grade-year-settings.php';require __DIR__.'/student-marks.php';require __DIR__.'/teacher-section-subjects.php';require __DIR__.'/study-notes.php';require __DIR__.'/behavior-notes.php';require __DIR__.'/messages.php';
// ===== C:\Development\Laravel\school\routes\behavior-notes.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('behavior-notes',BehaviorNoteController::class);Route::get('behavior-notes/trashed',[BehaviorNoteController::class,'trashed']);Route::patch('behavior-notes/{id}/restore',[BehaviorNoteController::class,'restore']);Route::delete('behavior-notes/{id}/force-delete',[BehaviorNoteController::class,'forceDelete']);Route::get('behavior-notes/student/{studentId}',[BehaviorNoteController::class,'getByStudent']);Route::get('behavior-notes/school-day/{schoolDayId}',[BehaviorNoteController::class,'getBySchoolDay']);Route::get('behavior-notes/type/{behaviorType}',[BehaviorNoteController::class,'getByBehaviorType']);});
// ===== C:\Development\Laravel\school\routes\console.php =====
Artisan::command('inspire',function(){$this->comment(Inspiring::quote());})->purpose('Display an inspiring quote');
// ===== C:\Development\Laravel\school\routes\files.php =====
Route::middleware('auth:api')->prefix('admin/files')->controller(FileController::class)->group(function(){Route::get('/','index')->name('files');Route::post('/store','store')->name('files.store');Route::post('/{file}','update')->name('files.store');Route::delete('/{file}','destroy')->name('files.store');})->middleware(['role:admin']);Route::middleware('auth:api')->prefix('teacher/files')->controller(FileController::class)->group(function(){Route::get('/','index')->name('files');Route::post('/store','store')->name('files.store');})->middleware(['role:teacher']);Route::middleware('auth:api')->prefix('student/files')->controller(FileController::class)->group(function(){Route::get('/','index')->name('files');})->middleware(['role:student']);
// ===== C:\Development\Laravel\school\routes\grade-year-settings.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('grade-year-settings',GradeYearSettingController::class);Route::get('grade-year-settings/trashed',[GradeYearSettingController::class,'trashed']);Route::patch('grade-year-settings/{id}/restore',[GradeYearSettingController::class,'restore']);Route::delete('grade-year-settings/{id}/force-delete',[GradeYearSettingController::class,'forceDelete']);Route::get('grade-year-settings/grade/{gradeId}',[GradeYearSettingController::class,'getByGrade']);Route::get('grade-year-settings/year/{yearId}',[GradeYearSettingController::class,'getByYear']);});
// ===== C:\Development\Laravel\school\routes\grades.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('grades',GradeController::class);Route::get('grades/trashed',[GradeController::class,'trashed']);Route::patch('grades/{id}/restore',[GradeController::class,'restore']);Route::delete('grades/{id}/force-delete',[GradeController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\messages.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('messages',MessageController::class);Route::get('messages/user/{userId}',[MessageController::class,'getByUser']);});
// ===== C:\Development\Laravel\school\routes\news.php =====
Route::prefix('student/news')->middleware(['auth:api'])->group(function(){Route::get('/',[NewsController::class,'index'])->name('news.index');})->middleware(['role:student','throttle:5,1']);Route::prefix('admin/news')->controller(NewsController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::post('/store','store');Route::get('/{news}','show');Route::delete('/{news}','destroy');Route::post('/{news}','update');})->middleware(['role:admin','throttle:5,1']);
// ===== C:\Development\Laravel\school\routes\school-days.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('school-days')->group(function(){Route::get('/{semester}/trashed',[SchoolDayController::class,'trashed']);Route::get('/{semester}',[SchoolDayController::class,'index']);Route::post('/',[SchoolDayController::class,'store']);Route::put('/{schoolDay}',[SchoolDayController::class,'update']);Route::delete('/{schoolDay}',[SchoolDayController::class,'destroy']);Route::patch('/{id}/restore',[SchoolDayController::class,'restore']);Route::delete('/{id}/force-delete',[SchoolDayController::class,'forceDelete']);});});
// ===== C:\Development\Laravel\school\routes\sections.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('sections',SectionController::class);Route::get('sections/trashed',[SectionController::class,'trashed']);Route::patch('sections/{id}/restore',[SectionController::class,'restore']);Route::delete('sections/{id}/force-delete',[SectionController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\semesters.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('semesters')->group(function(){Route::post('/',[SemesterController::class,'store']);Route::put('/{semester}',[SemesterController::class,'update']);Route::delete('/{semester}',[SemesterController::class,'destroy']);Route::patch('/{semester}/active',[SemesterController::class,'Active']);Route::patch('/{id}/restore',[SemesterController::class,'restore']);Route::delete('/{id}/force-delete',[SemesterController::class,'forceDelete']);});});
// ===== C:\Development\Laravel\school\routes\student-enrollments.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('student-enrollments',StudentEnrollmentController::class);Route::get('student-enrollments/trashed',[StudentEnrollmentController::class,'trashed']);Route::patch('student-enrollments/{id}/restore',[StudentEnrollmentController::class,'restore']);Route::delete('student-enrollments/{id}/force-delete',[StudentEnrollmentController::class,'forceDelete']);Route::get('student-enrollments/student/{studentId}',[StudentEnrollmentController::class,'getByStudent']);Route::get('student-enrollments/section/{sectionId}',[StudentEnrollmentController::class,'getBySection']);Route::get('student-enrollments/semester/{semesterId}',[StudentEnrollmentController::class,'getBySemester']);});
// ===== C:\Development\Laravel\school\routes\student-marks.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('student-marks',StudentMarkController::class);Route::get('student-marks/enrollment/{enrollmentId}',[StudentMarkController::class,'getByEnrollment']);Route::get('student-marks/subject/{subjectId}',[StudentMarkController::class,'getBySubject']);});
// ===== C:\Development\Laravel\school\routes\study-notes.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('study-notes',StudyNoteController::class);Route::get('study-notes/trashed',[StudyNoteController::class,'trashed']);Route::patch('study-notes/{id}/restore',[StudyNoteController::class,'restore']);Route::delete('study-notes/{id}/force-delete',[StudyNoteController::class,'forceDelete']);Route::get('study-notes/student/{studentId}',[StudyNoteController::class,'getByStudent']);Route::get('study-notes/school-day/{schoolDayId}',[StudyNoteController::class,'getBySchoolDay']);Route::get('study-notes/subject/{subjectId}',[StudyNoteController::class,'getBySubject']);});
// ===== C:\Development\Laravel\school\routes\subjects.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('main-subjects',SubjectMajorController::class);Route::get('main-subjects/trashed',[SubjectMajorController::class,'trashed']);Route::patch('main-subjects/{id}/restore',[SubjectMajorController::class,'restore']);Route::delete('main-subjects/{id}/force-delete',[SubjectMajorController::class,'forceDelete']);Route::apiResource('subjects',SubjectController::class);Route::get('subjects/trashed',[SubjectController::class,'trashed']);Route::patch('subjects/{id}/restore',[SubjectController::class,'restore']);Route::delete('subjects/{id}/force-delete',[SubjectController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\teacher-section-subjects.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('teacher-section-subjects',TeacherSectionSubjectController::class);Route::get('teacher-section-subjects/trashed',[TeacherSectionSubjectController::class,'trashed']);Route::patch('teacher-section-subjects/{id}/restore',[TeacherSectionSubjectController::class,'restore']);Route::delete('teacher-section-subjects/{id}/force-delete',[TeacherSectionSubjectController::class,'forceDelete']);Route::get('teacher-section-subjects/teacher/{teacherId}',[TeacherSectionSubjectController::class,'getByTeacher']);Route::get('teacher-section-subjects/section/{sectionId}',[TeacherSectionSubjectController::class,'getBySection']);Route::get('teacher-section-subjects/subject/{subjectId}',[TeacherSectionSubjectController::class,'getBySubject']);});
// ===== C:\Development\Laravel\school\routes\web.php =====
Route::get('/reset-password/{token}',function($token){return 'Reset link: ' . $token;})->name('password.reset');
// ===== C:\Development\Laravel\school\routes\years.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('years')->group(function(){Route::get('/',[YearController::class,'index']);Route::get('/trashed',[YearController::class,'trashed']);Route::post('/',[YearController::class,'store']);Route::get('/{year}',[YearController::class,'show']);Route::put('/{year}',[YearController::class,'update']);Route::delete('/{year}',[YearController::class,'destroy']);Route::patch('/{year}/active',[YearController::class,'Active']);Route::patch('/{id}/restore',[YearController::class,'restore']);Route::delete('/{id}/force-delete',[YearController::class,'forceDelete']);});});
