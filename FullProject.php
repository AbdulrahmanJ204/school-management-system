// === FULL PROJECT COMPACT EXPORT ===

// === [Controllers] ===
// ===== C:\Development\Laravel\school\app\Http\Controllers\AdminController.php =====
namespace App\Http\Controllers;class AdminController extends Controller{protected $adminService;public function __construct(AdminService $adminService){$this->adminService = $adminService;}public function show(){return $this->adminService->listAdmins();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\AssignmentController.php =====
namespace App\Http\Controllers;class AssignmentController extends Controller{protected $assignmentService;public function __construct(AssignmentService $assignmentService){$this->assignmentService = $assignmentService;}public function index(ListAssignmentRequest $request): ?JsonResponse{return $this->assignmentService->listAssignments($request);}public function store(StoreAssignmentRequest $request){return $this->assignmentService->createAssignment($request);}public function show($assignmentId): JsonResponse{return $this->assignmentService->showAssignment($assignmentId);}public function update(UpdateAssignmentRequest $request,Assignment $assignment){return $this->assignmentService->updateAssignment($request,$assignment->id);}public function destroy(Assignment $assignment): JsonResponse{return $this->assignmentService->deleteAssignment($assignment->id);}public function restore($assignmentId): JsonResponse{return $this->assignmentService->restoreAssignment($assignmentId);}public function delete($assignmentId): JsonResponse{return $this->assignmentService->forceDeleteAssignment($assignmentId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\AuthController.php =====
namespace App\Http\Controllers;class AuthController extends Controller{protected $authService;public function __construct(AuthService $authService){$this->authService = $authService;}public function register(RegisterRequest $request){return $this->authService->register($request);}public function login(LoginRequest $request){$user_type = strtolower(request()->query('user_type'));return $this->authService->login($request,$user_type);}public function refresh(Request $request){return $this->authService->refresh($request);}public function logout(Request $request){return $this->authService->logout($request);}public function changePassword(ChangePasswordRequest $request){return $this->authService->changePassword($request);}public function forgotPassword(ForgotPasswordRequest $request){return $this->authService->forgotPassword($request);}public function resetPassword(ResetPasswordRequest $request){return $this->authService->resetPassword($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\BehaviorNoteController.php =====
namespace App\Http\Controllers;class BehaviorNoteController extends Controller{protected BehaviorNoteService $behaviorNoteService;public function __construct(BehaviorNoteService $behaviorNoteService){$this->behaviorNoteService = $behaviorNoteService;}public function index(): JsonResponse{return $this->behaviorNoteService->listBehaviorNotes();}public function trashed(): JsonResponse{return $this->behaviorNoteService->listTrashedBehaviorNotes();}public function store(BehaviorNoteRequest $request): JsonResponse{return $this->behaviorNoteService->createBehaviorNote($request);}public function show($id): JsonResponse{return $this->behaviorNoteService->showBehaviorNote($id);}public function update(BehaviorNoteRequest $request,$id): JsonResponse{return $this->behaviorNoteService->updateBehaviorNote($request,$id);}public function destroy($id): JsonResponse{return $this->behaviorNoteService->deleteBehaviorNote($id);}public function restore($id): JsonResponse{return $this->behaviorNoteService->restoreBehaviorNote($id);}public function forceDelete($id): JsonResponse{return $this->behaviorNoteService->forceDeleteBehaviorNote($id);}public function getByStudent($studentId): JsonResponse{return $this->behaviorNoteService->getByStudent($studentId);}public function getBySchoolDay($schoolDayId): JsonResponse{return $this->behaviorNoteService->getBySchoolDay($schoolDayId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ClassSessionController.php =====
namespace App\Http\Controllers;class ClassSessionController extends Controller{protected ClassSessionService $classSessionService;public function __construct(ClassSessionService $classSessionService){$this->classSessionService = $classSessionService;}public function index(): JsonResponse{return $this->classSessionService->listClassSessions();}public function store(ClassSessionRequest $request): JsonResponse{return $this->classSessionService->createClassSession($request);}public function show(ClassSession $classSession): JsonResponse{return $this->classSessionService->showClassSession($classSession);}public function update(ClassSessionRequest $request,ClassSession $classSession): JsonResponse{return $this->classSessionService->updateClassSession($request,$classSession);}public function destroy(ClassSession $classSession): JsonResponse{return $this->classSessionService->destroyClassSession($classSession);}public function cancel(ClassSession $classSession): JsonResponse{return $this->classSessionService->cancelClassSession($classSession);}public function getByTeacher($teacherId): JsonResponse{return $this->classSessionService->getClassSessionsByTeacher($teacherId);}public function getBySection($sectionId): JsonResponse{return $this->classSessionService->getClassSessionsBySection($sectionId);}public function getBySchoolDay($schoolDayId): JsonResponse{return $this->classSessionService->getClassSessionsBySchoolDay($schoolDayId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ComplaintController.php =====
namespace App\Http\Controllers;class ComplaintController extends Controller{protected ComplaintService $complaintService;public function __construct(ComplaintService $complaintService){$this->complaintService = $complaintService;}public function index(): JsonResponse{return $this->complaintService->listComplaints();}public function trashed(): JsonResponse{return $this->complaintService->listTrashedComplaints();}public function store(ComplaintRequest $request): JsonResponse{return $this->complaintService->createComplaint($request);}public function show($id): JsonResponse{return $this->complaintService->showComplaint($id);}public function update(ComplaintRequest $request,$id): JsonResponse{return $this->complaintService->updateComplaint($request,$id);}public function destroy($id): JsonResponse{return $this->complaintService->deleteComplaint($id);}public function restore($id): JsonResponse{return $this->complaintService->restoreComplaint($id);}public function forceDelete($id): JsonResponse{return $this->complaintService->forceDeleteComplaint($id);}public function getByUser($userId): JsonResponse{return $this->complaintService->getByUser($userId);}public function answer(BaseRequest $request,$id): JsonResponse{return $this->complaintService->answerComplaint($request,$id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\Controller.php =====
namespace App\Http\Controllers;abstract class Controller{}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ExamController.php =====
namespace App\Http\Controllers;class ExamController extends Controller{protected ExamService $examService;public function __construct(ExamService $examService){$this->examService = $examService;}public function index(): JsonResponse{return $this->examService->listExams();}public function trashed(): JsonResponse{return $this->examService->listTrashedExams();}public function store(ExamRequest $request): JsonResponse{return $this->examService->createExam($request);}public function show($id): JsonResponse{return $this->examService->showExam($id);}public function update(ExamRequest $request,$id): JsonResponse{return $this->examService->updateExam($request,$id);}public function destroy($id): JsonResponse{return $this->examService->deleteExam($id);}public function restore($id): JsonResponse{return $this->examService->restoreExam($id);}public function forceDelete($id): JsonResponse{return $this->examService->forceDeleteExam($id);}public function getBySchoolDay($schoolDayId): JsonResponse{return $this->examService->getBySchoolDay($schoolDayId);}public function getByGrade($gradeId): JsonResponse{return $this->examService->getByGrade($gradeId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\FileController.php =====
namespace App\Http\Controllers;class FileController extends Controller{protected FileService $fileService;public function __construct(FileService $fileService){$this->fileService = $fileService;}public function index(ListFilesRequest $request): JsonResponse{return $this->fileService->list($request);}public function bySubject(ListFilesRequest $request,$id): JsonResponse{return $this->fileService->list($request,$id);}public function store(StoreFileRequest $request): JsonResponse{return $this->fileService->store($request);}public function show(string $file): JsonResponse{return $this->fileService->show($file);}public function update(UpdateFileRequest $request,File $file): JsonResponse{return $this->fileService->update($request,$file);}public function destroy(File $file): JsonResponse{return $this->fileService->softDelete($file);}public function restore($fileId): JsonResponse{return $this->fileService->restore($fileId);}public function download($fileId){return $this->fileService->download($fileId);}public function delete($fileId){return $this->fileService->delete($fileId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\GradeController.php =====
namespace App\Http\Controllers;class GradeController extends Controller{protected GradeService $gradeService;public function __construct(GradeService $gradeService){$this->gradeService = $gradeService;}public function index(): JsonResponse{return $this->gradeService->listGrade();}public function store(GradeRequest $request): JsonResponse{return $this->gradeService->createGrade($request);}public function show(Grade $grade): JsonResponse{return $this->gradeService->showGrade($grade);}public function update(GradeRequest $request,Grade $grade): JsonResponse{return $this->gradeService->updateGrade($request,$grade);}public function destroy(Grade $grade): JsonResponse{return $this->gradeService->destroyGrade($grade);}public function trashed(): JsonResponse{return $this->gradeService->listTrashedGrades();}public function restore($id): JsonResponse{return $this->gradeService->restoreGrade($id);}public function forceDelete($id): JsonResponse{return $this->gradeService->forceDeleteGrade($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\GradeYearSettingController.php =====
namespace App\Http\Controllers;class GradeYearSettingController extends Controller{protected GradeYearSettingService $gradeYearSettingService;public function __construct(GradeYearSettingService $gradeYearSettingService){$this->gradeYearSettingService = $gradeYearSettingService;}public function index(): JsonResponse{return $this->gradeYearSettingService->listGradeYearSettings();}public function store(GradeYearSettingRequest $request): JsonResponse{return $this->gradeYearSettingService->createGradeYearSetting($request);}public function show(GradeYearSetting $gradeYearSetting): JsonResponse{return $this->gradeYearSettingService->showGradeYearSetting($gradeYearSetting);}public function update(GradeYearSettingRequest $request,GradeYearSetting $gradeYearSetting): JsonResponse{return $this->gradeYearSettingService->updateGradeYearSetting($request,$gradeYearSetting);}public function destroy(GradeYearSetting $gradeYearSetting): JsonResponse{return $this->gradeYearSettingService->destroyGradeYearSetting($gradeYearSetting);}public function trashed(): JsonResponse{return $this->gradeYearSettingService->listTrashedGradeYearSettings();}public function restore($id): JsonResponse{return $this->gradeYearSettingService->restoreGradeYearSetting($id);}public function forceDelete($id): JsonResponse{return $this->gradeYearSettingService->forceDeleteGradeYearSetting($id);}public function getByGrade($gradeId): JsonResponse{return $this->gradeYearSettingService->getSettingsByGrade($gradeId);}public function getByYear($yearId): JsonResponse{return $this->gradeYearSettingService->getSettingsByYear($yearId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\MainSubjectController.php =====
namespace App\Http\Controllers;class MainSubjectController extends Controller{protected MainSubjectService $mainSubjectService;public function __construct(MainSubjectService $mainSubjectService){$this->mainSubjectService = $mainSubjectService;}public function index(): JsonResponse{return $this->mainSubjectService->listMainSubjects();}public function store(MainSubjectRequest $request): JsonResponse{return $this->mainSubjectService->createMainSubject($request);}public function show(MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->showMainSubject($mainSubject);}public function update(MainSubjectRequest $request,MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->updateMainSubject($request,$mainSubject);}public function destroy(MainSubject $mainSubject): JsonResponse{return $this->mainSubjectService->destroyMainSubject($mainSubject);}public function trashed(): JsonResponse{return $this->mainSubjectService->listTrashedMainSubjects();}public function restore($id): JsonResponse{return $this->mainSubjectService->restoreMainSubject($id);}public function forceDelete($id): JsonResponse{return $this->mainSubjectService->forceDeleteMainSubject($id);}public function createWithSubject(CreateMainSubjectWithSubjectRequest $request): JsonResponse{return $this->mainSubjectService->createMainSubjectWithSubject($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\MessageController.php =====
namespace App\Http\Controllers;class MessageController extends Controller{protected MessageService $messageService;public function __construct(MessageService $messageService){$this->messageService = $messageService;}public function index(): JsonResponse{return $this->messageService->listMessages();}public function trashed(): JsonResponse{return $this->messageService->listTrashedMessages();}public function store(MessageRequest $request): JsonResponse{return $this->messageService->createMessage($request);}public function show($id): JsonResponse{return $this->messageService->showMessage($id);}public function update(MessageRequest $request,$id): JsonResponse{return $this->messageService->updateMessage($request,$id);}public function destroy($id): JsonResponse{return $this->messageService->deleteMessage($id);}public function restore($id): JsonResponse{return $this->messageService->restoreMessage($id);}public function forceDelete($id): JsonResponse{return $this->messageService->forceDeleteMessage($id);}public function getByUser($userId): JsonResponse{return $this->messageService->getByUser($userId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\NewsController.php =====
namespace App\Http\Controllers;class NewsController extends Controller{protected $newsService;public function __construct(NewsService $newsService){$this->newsService = $newsService;}public function index(ListNewsRequest $request): ?JsonResponse{return $this->newsService->list($request);}public function store(StoreNewsRequest $request){return $this->newsService->store($request);}public function show($newsId): JsonResponse{return $this->newsService->show($newsId);}public function update(UpdateNewsRequest $request,News $news){return $this->newsService->update($request,$news);}public function destroy(News $news): JsonResponse{return $this->newsService->softDelete($news);}public function restore($newsId): JsonResponse{return $this->newsService->restore($newsId);}public function delete($newsId): JsonResponse{return $this->newsService->delete($newsId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\PermissionController.php =====
namespace App\Http\Controllers;class PermissionController extends Controller{protected $permissionService;public function __construct(PermissionService $permissionService){$this->permissionService = $permissionService;}public function show(){return $this->permissionService->listPermissions();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuestionController.php =====
namespace App\Http\Controllers;class QuestionController extends Controller{protected $questionService;public function __construct(QuestionService $questionService){return $this->questionService = $questionService;}public function create(CreateQuestionRequest $request,int $quiz_id){return $this->questionService->create($request,$quiz_id);}public function update(UpdateQuestionRequest $request,int $quiz_id,int $question_id){return $this->questionService->update($request,$quiz_id,$question_id);}public function destroy(int $quiz_id,int $question_id){return $this->questionService->delete($quiz_id,$question_id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuizController.php =====
namespace App\Http\Controllers;class QuizController extends Controller{protected $quizService;public function __construct(QuizService $quizService){$this->quizService = $quizService;}public function index(ListQuizzesRequest $request){return $this->quizService->listQuizzes($request);}public function store(CreateAndUpdateQuizRequest $request){return $this->quizService->create($request);}public function activate(int $id){return $this->quizService->activate($id);}public function deactivate(int $id){return $this->quizService->deactivate($id);}public function show(int $id){return $this->quizService->showQuiz($id);}public function update(CreateAndUpdateQuizRequest $request,int $id){return $this->quizService->update($request,$id);}public function destroy(int $id){return $this->quizService->destroy($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\RoleController.php =====
namespace App\Http\Controllers;class RoleController extends Controller{protected $roleService;public function __construct(RoleService $roleService){$this->roleService = $roleService;}public function index(){return $this->roleService->list();}public function store(CreateRoleRequest $request){return $this->roleService->create($request);}public function show(int $id){return $this->roleService->getRole($id);}public function update(UpdateRoleRequest $request,int $id){return $this->roleService->update($request,$id);}public function destroy(int $id){return $this->roleService->delete($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SchoolDayController.php =====
namespace App\Http\Controllers;class SchoolDayController extends Controller{protected SchoolDayService $schoolDayService;public function __construct(SchoolDayService $schoolDayService){$this->schoolDayService = $schoolDayService;}public function index(Semester $semester): JsonResponse{return $this->schoolDayService->listSchoolDay($semester);}public function trashed(Semester $semester): JsonResponse{return $this->schoolDayService->listTrashedSchoolDays($semester);}public function store(SchoolDayRequest $request): JsonResponse{return $this->schoolDayService->createSchoolDay($request);}public function update(SchoolDayRequest $request,SchoolDay $schoolDay): JsonResponse{return $this->schoolDayService->updateSchoolDay($request,$schoolDay);}public function destroy(SchoolDay $schoolDay): JsonResponse{return $this->schoolDayService->destroySchoolDay($schoolDay);}public function forceDelete($id): JsonResponse{return $this->schoolDayService->forceDeleteSchoolDay($id);}public function restore($id): JsonResponse{return $this->schoolDayService->restoreSchoolDay($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SchoolShiftController.php =====
namespace App\Http\Controllers;class SchoolShiftController extends Controller{protected $schoolshiftService;public function __construct(SchoolShiftService $schoolShiftService){$this->schoolshiftService = $schoolShiftService;}public function index(){return $this->schoolshiftService->list();}public function store(CreateSchoolShiftRequest $request){return $this->schoolshiftService->create($request);}public function show(string $id){return $this->schoolshiftService->get($id);}public function update(UpdateSchoolShiftRequest $request,$id){return $this->schoolshiftService->update($request,$id);}public function destroy(int $id){return $this->schoolshiftService->delete($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ScoreQuizController.php =====
namespace App\Http\Controllers;class ScoreQuizController extends Controller{protected $scoreQuizService;public function __construct(ScoreQuizService $scoreQuizService){$this->scoreQuizService = $scoreQuizService;}public function create(CreateScoreQuizRequest $request){return $this->scoreQuizService->create($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SectionController.php =====
namespace App\Http\Controllers;class SectionController extends Controller{protected SectionService $sectionService;public function __construct(SectionService $sectionService){$this->sectionService = $sectionService;}public function index(): JsonResponse{return $this->sectionService->listSection();}public function store(SectionRequest $request): JsonResponse{return $this->sectionService->createSection($request);}public function show(Section $section): JsonResponse{return $this->sectionService->showSection($section);}public function update(SectionRequest $request,Section $section): JsonResponse{return $this->sectionService->updateSection($request,$section);}public function destroy(Section $section): JsonResponse{return $this->sectionService->destroySection($section);}public function trashed(): JsonResponse{return $this->sectionService->listTrashedSections();}public function restore($id): JsonResponse{return $this->sectionService->restoreSection($id);}public function forceDelete($id): JsonResponse{return $this->sectionService->forceDeleteSection($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SemesterController.php =====
namespace App\Http\Controllers;class SemesterController extends Controller{protected SemesterService $semesterService;public function __construct(SemesterService $semesterService){$this->semesterService = $semesterService;}public function store(SemesterRequest $request): JsonResponse{return $this->semesterService->createSemester($request);}public function update(SemesterRequest $request,Semester $semester): JsonResponse{return $this->semesterService->updateSemester($request,$semester);}public function destroy(Semester $semester): JsonResponse{return $this->semesterService->destroySemester($semester);}public function forceDelete($id): JsonResponse{return $this->semesterService->forceDeleteSemester($id);}public function restore($id): JsonResponse{return $this->semesterService->restoreSemester($id);}public function Active(Semester $semester): JsonResponse{return $this->semesterService->ActiveSemester($semester);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentAttendanceController.php =====
namespace App\Http\Controllers;class StudentAttendanceController extends Controller{protected $studentAttendanceService;public function __construct(StudentAttendanceService $studentAttendanceService){$this->studentAttendanceService = $studentAttendanceService;}public function index(ListStudentAttendanceRequest $request): ?JsonResponse{return $this->studentAttendanceService->listStudentAttendances($request);}public function store(StoreStudentAttendanceRequest $request){return $this->studentAttendanceService->createStudentAttendance($request);}public function show($studentAttendanceId): JsonResponse{return $this->studentAttendanceService->showStudentAttendance($studentAttendanceId);}public function update(UpdateStudentAttendanceRequest $request,StudentAttendance $studentAttendance){return $this->studentAttendanceService->updateStudentAttendance($request,$studentAttendance->id);}public function destroy(StudentAttendance $studentAttendance): JsonResponse{return $this->studentAttendanceService->deleteStudentAttendance($studentAttendance->id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentController.php =====
namespace App\Http\Controllers;class StudentController extends Controller{protected $studentService;public function __construct(StudentService $studentService){$this->studentService = $studentService;}public function show(){return $this->studentService->listStudents();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentEnrollmentController.php =====
namespace App\Http\Controllers;class StudentEnrollmentController extends Controller{protected StudentEnrollmentService $studentEnrollmentService;public function __construct(StudentEnrollmentService $studentEnrollmentService){$this->studentEnrollmentService = $studentEnrollmentService;}public function index(): JsonResponse{return $this->studentEnrollmentService->listStudentEnrollments();}public function store(StudentEnrollmentRequest $request): JsonResponse{return $this->studentEnrollmentService->createStudentEnrollment($request);}public function show(StudentEnrollment $studentEnrollment): JsonResponse{return $this->studentEnrollmentService->showStudentEnrollment($studentEnrollment);}public function update(StudentEnrollmentRequest $request,StudentEnrollment $studentEnrollment): JsonResponse{return $this->studentEnrollmentService->updateStudentEnrollment($request,$studentEnrollment);}public function destroy(StudentEnrollment $studentEnrollment): JsonResponse{return $this->studentEnrollmentService->destroyStudentEnrollment($studentEnrollment);}public function trashed(): JsonResponse{return $this->studentEnrollmentService->listTrashedStudentEnrollments();}public function restore($id): JsonResponse{return $this->studentEnrollmentService->restoreStudentEnrollment($id);}public function forceDelete($id): JsonResponse{return $this->studentEnrollmentService->forceDeleteStudentEnrollment($id);}public function getByStudent($studentId): JsonResponse{return $this->studentEnrollmentService->getEnrollmentsByStudent($studentId);}public function getBySection($sectionId): JsonResponse{return $this->studentEnrollmentService->getEnrollmentsBySection($sectionId);}public function getBySemester($semesterId): JsonResponse{return $this->studentEnrollmentService->getEnrollmentsBySemester($semesterId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentMarkController.php =====
namespace App\Http\Controllers;class StudentMarkController extends Controller{protected StudentMarkService $studentMarkService;public function __construct(StudentMarkService $studentMarkService){$this->studentMarkService = $studentMarkService;}public function index(): JsonResponse{return $this->studentMarkService->listStudentMarks();}public function store(StudentMarkRequest $request): JsonResponse{return $this->studentMarkService->createStudentMark($request);}public function show(StudentMark $studentMark): JsonResponse{return $this->studentMarkService->showStudentMark($studentMark);}public function update(StudentMarkRequest $request,StudentMark $studentMark): JsonResponse{return $this->studentMarkService->updateStudentMark($request,$studentMark);}public function destroy(StudentMark $studentMark): JsonResponse{return $this->studentMarkService->destroyStudentMark($studentMark);}public function getByEnrollment($enrollmentId): JsonResponse{return $this->studentMarkService->getMarksByEnrollment($enrollmentId);}public function getBySubject($subjectId): JsonResponse{return $this->studentMarkService->getMarksBySubject($subjectId);}public function getBySubjectAndSection($subjectId,$sectionId): JsonResponse{return $this->studentMarkService->getMarksBySubjectAndSection($subjectId,$sectionId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudyNoteController.php =====
namespace App\Http\Controllers;class StudyNoteController extends Controller{protected StudyNoteService $studyNoteService;public function __construct(StudyNoteService $studyNoteService){$this->studyNoteService = $studyNoteService;}public function index(): JsonResponse{return $this->studyNoteService->listStudyNotes();}public function trashed(): JsonResponse{return $this->studyNoteService->listTrashedStudyNotes();}public function store(StudyNoteRequest $request): JsonResponse{return $this->studyNoteService->createStudyNote($request);}public function show($id): JsonResponse{return $this->studyNoteService->showStudyNote($id);}public function update(StudyNoteRequest $request,$id): JsonResponse{return $this->studyNoteService->updateStudyNote($request,$id);}public function destroy($id): JsonResponse{return $this->studyNoteService->deleteStudyNote($id);}public function restore($id): JsonResponse{return $this->studyNoteService->restoreStudyNote($id);}public function forceDelete($id): JsonResponse{return $this->studyNoteService->forceDeleteStudyNote($id);}public function getByStudent($studentId): JsonResponse{return $this->studyNoteService->getByStudent($studentId);}public function getBySchoolDay($schoolDayId): JsonResponse{return $this->studyNoteService->getBySchoolDay($schoolDayId);}public function getBySubject($subjectId): JsonResponse{return $this->studyNoteService->getBySubject($subjectId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SubjectController.php =====
namespace App\Http\Controllers;class SubjectController extends Controller{protected SubjectService $subjectService;public function __construct(SubjectService $subjectService){$this->subjectService = $subjectService;}public function index(){return $this->subjectService->listSubjects();}public function store(SubjectRequest $request){return $this->subjectService->createSubject($request);}public function show(Subject $subject){return $this->subjectService->showSubject($subject);}public function update(SubjectRequest $request,Subject $subject){return $this->subjectService->updateSubject($request,$subject);}public function destroy(Subject $subject){return $this->subjectService->destroySubject($subject);}public function trashed(){return $this->subjectService->listTrashedSubjects();}public function restore($id){return $this->subjectService->restoreSubject($id);}public function forceDelete($id){return $this->subjectService->forceDeleteSubject($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherAttendanceController.php =====
namespace App\Http\Controllers;class TeacherAttendanceController extends Controller{protected $teacherAttendanceService;public function __construct(TeacherAttendanceService $teacherAttendanceService){$this->teacherAttendanceService = $teacherAttendanceService;}public function index(ListTeacherAttendanceRequest $request): ?JsonResponse{return $this->teacherAttendanceService->listTeacherAttendances($request);}public function store(StoreTeacherAttendanceRequest $request){return $this->teacherAttendanceService->createTeacherAttendance($request);}public function show($teacherAttendanceId): JsonResponse{return $this->teacherAttendanceService->showTeacherAttendance($teacherAttendanceId);}public function update(UpdateTeacherAttendanceRequest $request,TeacherAttendance $teacherAttendance){return $this->teacherAttendanceService->updateTeacherAttendance($request,$teacherAttendance->id);}public function destroy(TeacherAttendance $teacherAttendance): JsonResponse{return $this->teacherAttendanceService->deleteTeacherAttendance($teacherAttendance->id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherController.php =====
namespace App\Http\Controllers;class TeacherController extends Controller{protected $teacherService;public function __construct(TeacherService $teacherService){$this->teacherService = $teacherService;}public function show(){return $this->teacherService->listTeachers();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherSectionSubjectController.php =====
namespace App\Http\Controllers;class TeacherSectionSubjectController extends Controller{protected TeacherSectionSubjectService $teacherSectionSubjectService;public function __construct(TeacherSectionSubjectService $teacherSectionSubjectService){$this->teacherSectionSubjectService = $teacherSectionSubjectService;}public function index(): JsonResponse{return $this->teacherSectionSubjectService->listTeacherSectionSubjects();}public function trashed(): JsonResponse{return $this->teacherSectionSubjectService->listTrashedTeacherSectionSubjects();}public function store(TeacherSectionSubjectRequest $request): JsonResponse{return $this->teacherSectionSubjectService->createTeacherSectionSubject($request);}public function show($id): JsonResponse{return $this->teacherSectionSubjectService->showTeacherSectionSubject($id);}public function update(TeacherSectionSubjectRequest $request,$id): JsonResponse{return $this->teacherSectionSubjectService->updateTeacherSectionSubject($request,$id);}public function destroy($id): JsonResponse{return $this->teacherSectionSubjectService->deleteTeacherSectionSubject($id);}public function restore($id): JsonResponse{return $this->teacherSectionSubjectService->restoreTeacherSectionSubject($id);}public function forceDelete($id): JsonResponse{return $this->teacherSectionSubjectService->forceDeleteTeacherSectionSubject($id);}public function getByTeacher($teacherId): JsonResponse{return $this->teacherSectionSubjectService->getByTeacher($teacherId);}public function getBySection($sectionId): JsonResponse{return $this->teacherSectionSubjectService->getBySection($sectionId);}public function getBySubject($subjectId): JsonResponse{return $this->teacherSectionSubjectService->getBySubject($subjectId);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\UserController.php =====
namespace App\Http\Controllers;class UserController extends Controller{protected $userService;public function __construct(UserService $userService){$this->userService = $userService;}public function show($id){return $this->userService->getUser($id);}public function getStaff(){return $this->userService->listAdminsAndTeachers();}public function update(UpdateRequest $request,$id){return $this->userService->updateUser($request,$id);}public function destroy($id){return $this->userService->deleteUser($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\YearController.php =====
namespace App\Http\Controllers;class YearController extends Controller{protected YearService $yearService;public function __construct(YearService $yearService){$this->yearService = $yearService;}public function index(): JsonResponse{return $this->yearService->listYear();}public function trashed(): JsonResponse{return $this->yearService->listTrashedYears();}public function store(YearRequest $request): JsonResponse{return $this->yearService->createYear($request);}public function show(Year $year): JsonResponse{return $this->yearService->showYear($year);}public function update(YearRequest $request,Year $year): JsonResponse{return $this->yearService->updateYear($request,$year);}public function destroy(Year $year): JsonResponse{return $this->yearService->destroyYear($year);}public function forceDelete($id): JsonResponse{return $this->yearService->forceDeleteYear($id);}public function restore($id): JsonResponse{return $this->yearService->restoreYear($id);}public function Active(Year $year): JsonResponse{return $this->yearService->ActiveYear($year);}}

// === [Migrations] ===
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000000_create_users_table.php =====
return new class extends Migration{public function up(): void{Schema::create('users',function(Blueprint $table){$table->id();$table->string('first_name');$table->string('father_name')->nullable();$table->string('last_name');$table->string('mother_name');$table->enum('gender',['male','female']);$table->date('birth_date')->nullable();$table->string('email')->unique()->nullable();$table->string('phone')->nullable();$table->string('password')->nullable();$table->enum('user_type',['admin','teacher','student'])->default('student');$table->timestamp('email_verified_at')->nullable();$table->string('email_verification_token',64)->nullable();$table->string('image')->nullable();$table->timestamp('last_login')->nullable();$table->rememberToken();$table->softDeletes();$table->timestamps();});Schema::create('password_reset_tokens',function(Blueprint $table){$table->string('email')->primary();$table->string('token');$table->timestamp('created_at')->nullable();});Schema::create('sessions',function(Blueprint $table){$table->string('id')->primary();$table->foreignId('user_id')->nullable()->index();$table->string('ip_address',45)->nullable();$table->text('user_agent')->nullable();$table->longText('payload');$table->integer('last_activity')->index();});}public function down(): void{Schema::dropIfExists('users');Schema::dropIfExists('password_reset_tokens');Schema::dropIfExists('sessions');}};
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000001_create_cache_table.php =====
return new class extends Migration{public function up(): void{Schema::create('cache',function(Blueprint $table){$table->string('key')->primary();$table->mediumText('value');$table->integer('expiration');});Schema::create('cache_locks',function(Blueprint $table){$table->string('key')->primary();$table->string('owner');$table->integer('expiration');});}public function down(): void{Schema::dropIfExists('cache');Schema::dropIfExists('cache_locks');}};
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000002_create_jobs_table.php =====
return new class extends Migration{public function up(): void{Schema::create('jobs',function(Blueprint $table){$table->id();$table->string('queue')->index();$table->longText('payload');$table->unsignedTinyInteger('attempts');$table->unsignedInteger('reserved_at')->nullable();$table->unsignedInteger('available_at');$table->unsignedInteger('created_at');});Schema::create('job_batches',function(Blueprint $table){$table->string('id')->primary();$table->string('name');$table->integer('total_jobs');$table->integer('pending_jobs');$table->integer('failed_jobs');$table->longText('failed_job_ids');$table->mediumText('options')->nullable();$table->integer('cancelled_at')->nullable();$table->integer('created_at');$table->integer('finished_at')->nullable();});Schema::create('failed_jobs',function(Blueprint $table){$table->id();$table->string('uuid')->unique();$table->text('connection');$table->text('queue');$table->longText('payload');$table->longText('exception');$table->timestamp('failed_at')->useCurrent();});}public function down(): void{Schema::dropIfExists('jobs');Schema::dropIfExists('job_batches');Schema::dropIfExists('failed_jobs');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_05_13_142552_create_personal_access_tokens_table.php =====
return new class extends Migration{public function up(): void{Schema::create('personal_access_tokens',function(Blueprint $table){$table->id();$table->morphs('tokenable');$table->string('name');$table->string('token',64)->unique();$table->text('abilities')->nullable();$table->timestamp('last_used_at')->nullable();$table->timestamp('expires_at')->nullable();$table->unsignedBigInteger('device_id')->nullable();$table->timestamps();});}public function down(): void{Schema::dropIfExists('personal_access_tokens');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_05_14_171340_create_permission_tables.php =====
return new class extends Migration{public function up(): void{$teams = config('permission.teams');$tableNames = config('permission.table_names');$columnNames = config('permission.column_names');$pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';$pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';throw_if(empty($tableNames),new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));throw_if($teams && empty($columnNames['team_foreign_key'] ?? null),new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));Schema::create($tableNames['permissions'],static function(Blueprint $table){$table->bigIncrements('id');$table->string('name');$table->string('guard_name');$table->timestamps();$table->unique(['name','guard_name']);});Schema::create($tableNames['roles'],static function(Blueprint $table)use($teams,$columnNames){$table->bigIncrements('id');if($teams || config('permission.testing')){$table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();$table->index($columnNames['team_foreign_key'],'roles_team_foreign_key_index');}$table->string('name');$table->string('guard_name');$table->timestamps();if($teams || config('permission.testing')){$table->unique([$columnNames['team_foreign_key'],'name','guard_name']);}else{$table->unique(['name','guard_name']);}});Schema::create($tableNames['model_has_permissions'],static function(Blueprint $table)use($tableNames,$columnNames,$pivotPermission,$teams){$table->unsignedBigInteger($pivotPermission);$table->string('model_type');$table->unsignedBigInteger($columnNames['model_morph_key']);$table->index([$columnNames['model_morph_key'],'model_type'],'model_has_permissions_model_id_model_type_index');$table->foreign($pivotPermission)->references('id')->on($tableNames['permissions'])->onDelete('cascade');if($teams){$table->unsignedBigInteger($columnNames['team_foreign_key']);$table->index($columnNames['team_foreign_key'],'model_has_permissions_team_foreign_key_index');$table->primary([$columnNames['team_foreign_key'],$pivotPermission,$columnNames['model_morph_key'],'model_type'],'model_has_permissions_permission_model_type_primary');}else{$table->primary([$pivotPermission,$columnNames['model_morph_key'],'model_type'],'model_has_permissions_permission_model_type_primary');}});Schema::create($tableNames['model_has_roles'],static function(Blueprint $table)use($tableNames,$columnNames,$pivotRole,$teams){$table->unsignedBigInteger($pivotRole);$table->string('model_type');$table->unsignedBigInteger($columnNames['model_morph_key']);$table->index([$columnNames['model_morph_key'],'model_type'],'model_has_roles_model_id_model_type_index');$table->foreign($pivotRole)->references('id')->on($tableNames['roles'])->onDelete('cascade');if($teams){$table->unsignedBigInteger($columnNames['team_foreign_key']);$table->index($columnNames['team_foreign_key'],'model_has_roles_team_foreign_key_index');$table->primary([$columnNames['team_foreign_key'],$pivotRole,$columnNames['model_morph_key'],'model_type'],'model_has_roles_role_model_type_primary');}else{$table->primary([$pivotRole,$columnNames['model_morph_key'],'model_type'],'model_has_roles_role_model_type_primary');}});Schema::create($tableNames['role_has_permissions'],static function(Blueprint $table)use($tableNames,$pivotRole,$pivotPermission){$table->unsignedBigInteger($pivotPermission);$table->unsignedBigInteger($pivotRole);$table->foreign($pivotPermission)->references('id')->on($tableNames['permissions'])->onDelete('cascade');$table->foreign($pivotRole)->references('id')->on($tableNames['roles'])->onDelete('cascade');$table->primary([$pivotPermission,$pivotRole],'role_has_permissions_permission_id_role_id_primary');});app('cache')->store(config('permission.cache.store')!= 'default' ? config('permission.cache.store'): null)->forget(config('permission.cache.key'));}public function down(): void{$tableNames = config('permission.table_names');if(empty($tableNames)){throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding,or drop the tables manually.');}Schema::drop($tableNames['role_has_permissions']);Schema::drop($tableNames['model_has_roles']);Schema::drop($tableNames['model_has_permissions']);Schema::drop($tableNames['roles']);Schema::drop($tableNames['permissions']);}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_134423_create_device_infos_table.php =====
return new class extends Migration{public function up(): void{Schema::create('device_infos',function(Blueprint $table){$table->id();$table->string('platform');$table->string('type');$table->string('name');$table->string('device_id')->unique();$table->timestamps();});}public function down(): void{Schema::dropIfExists('device_infos');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_135022_create_user_devices_table.php =====
return new class extends Migration{public function up(): void{Schema::create('user_devices',function(Blueprint $table){$table->id();$table->foreignId('device_id')->constrained('device_infos')->cascadeOnDelete();$table->foreignId('user_id')->constrained('users')->cascadeOnDelete();$table->timestamps();});}public function down(): void{Schema::dropIfExists('user_devices');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_100055_create_admins_table.php =====
return new class extends Migration{public function up(): void{Schema::create('admins',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('admins');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_111858_create_teachers_table.php =====
return new class extends Migration{public function up(): void{Schema::create('teachers',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('teachers');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_123212_create_students_table.php =====
return new class extends Migration{public function up(): void{Schema::create('students',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('grandfather');$table->unsignedBigInteger('general_id');$table->boolean('is_active')->default(true);$table->foreignId('created_by')->constrained('users');$table->timestamps();});}public function down(): void{Schema::dropIfExists('students');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123205_create_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quizzes',function(Blueprint $table){$table->id();$table->string('name');$table->timestamps();$table->date('taken_at')->nullable();$table->boolean('is_active')->default(false);$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123447_create_questions_table.php =====
return new class extends Migration{public function up(): void{Schema::create('questions',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->json('question_text');$table->text('question_text_plain')->nullable();$table->string('question_photo')->nullable();$table->json('choices');$table->tinyinteger('choices_count');$table->tinyInteger('right_choice');$table->text('hint')->nullable();$table->string('hint_photo')->nullable();$table->integer('order')->default(0);$table->timestamps();});}public function down(): void{Schema::dropIfExists('questions');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123838_create_score_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('score_quizzes',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->foreignId('student_id')->constrained('students');$table->unsignedBigInteger('full_score');$table->unsignedBigInteger('score');$table->timestamps();});}public function down(): void{Schema::dropIfExists('score_quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082726_create_years_table.php =====
return new class extends Migration{public function up(): void{Schema::create('years',function(Blueprint $table){$table->id();$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->softDeletes();$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('years');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082800_create_semesters_table.php =====
return new class extends Migration{public function up(): void{Schema::create('semesters',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('semesters');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082817_create_school_days_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_days',function(Blueprint $table){$table->id();$table->date('date');$table->foreignId('semester_id')->constrained('semesters');$table->enum('type',['study','exam','holiday']);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('school_days');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082825_create_grades_table.php =====
return new class extends Migration{public function up(): void{Schema::create('grades',function(Blueprint $table){$table->id();$table->string('title');$table->foreignId('year_id')->constrained('years');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('grades');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082835_create_sections_table.php =====
return new class extends Migration{public function up(): void{Schema::create('sections',function(Blueprint $table){$table->id();$table->string('title');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('sections');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082841_create_main_subjects_table.php =====
return new class extends Migration{public function up(): void{Schema::create('main_subjects',function(Blueprint $table){$table->id();$table->foreignId('grade_id')->constrained('grades');$table->string('name');$table->string('code');$table->integer('success_rate');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('main_subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082901_create_subjects_table.php =====
return new class extends Migration{public function up(): void{Schema::create('subjects',function(Blueprint $table){$table->id();$table->string('name');$table->foreignId('main_subject_id')->constrained('main_subjects');$table->string('code');$table->integer('full_mark');$table->integer('homework_percentage');$table->integer('oral_percentage');$table->integer('activity_percentage');$table->integer('quiz_percentage');$table->integer('exam_percentage');$table->integer('num_class_period');$table->boolean('is_failed')->default(false);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083004_create_teacher_section_subject.php =====
return new class extends Migration{public function up(): void{Schema::create('teacher_section_subjects',function(Blueprint $table){$table->id();$table->foreignId('teacher_id')->constrained('teachers');$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('section_id')->constrained('sections');$table->boolean('is_active');$table->integer('num_class_period');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('teacher_section_subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083159_create_student_enrollment_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_enrollments',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('section_id')->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('semester_id')->constrained('semesters');$table->foreignId('year_id')->constrained('years');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');$table->index(['student_id','semester_id']);});}public function down(): void{Schema::dropIfExists('student_enrollments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083240_create_grade_year_settings_table.php =====
return new class extends Migration{public function up(): void{Schema::create('grade_year_settings',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->integer('max_failed_subjects');$table->integer('help_marks');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('grade_year_settings');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083403_create_school_shifts_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_shifts',function(Blueprint $table){$table->id();$table->string('name')->unique();$table->time('start_time');$table->time('end_time');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('school_shifts');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083434_create_time_tables_table.php =====
return new class extends Migration{public function up(): void{Schema::create('timetables',function(Blueprint $table){$table->id();$table->date('valid_from');$table->date('valid_to');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('timetables');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083512_create_class_periods_table.php =====
return new class extends Migration{public function up(): void{Schema::create('class_periods',function(Blueprint $table){$table->id();$table->string('name');$table->time('start_time');$table->time('end_time');$table->foreignId('school_shift_id')->constrained('school_shifts');$table->integer('period_order');$table->enum('type',ClassPeriodType::values())->default(ClassPeriodType::STUDY->value);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->unique(['school_shift_id','period_order']);});}public function down(): void{Schema::dropIfExists('class_periods');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083537_school_shift_targets_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_shift_targets',function(Blueprint $table){$table->id();$table->foreignId('school_shift_id')->constrained('school_shifts');$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();});}public function down(): void{Schema::dropIfExists('school_shift_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083613_create_schedules_table.php =====
return new class extends Migration{public function up(): void{Schema::create('schedules',function(Blueprint $table){$table->id();$table->foreignId('class_period_id')->constrained('class_periods');$table->foreignId('teacher_section_subject_id')->constrained('teacher_section_subjects');$table->foreignId('timetable_id')->constrained('timetables');$table->enum('week_day',[
WeekDay::SUNDAY->value,WeekDay::MONDAY->value,WeekDay::TUESDAY->value,WeekDay::WEDNESDAY->value,WeekDay::THURSDAY->value,WeekDay::FRIDAY->value,WeekDay::SATURDAY->value,]);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('schedules');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083619_create_class_sessions_table.php =====
return new class extends Migration{public function up(): void{Schema::create('class_sessions',function(Blueprint $table){$table->id();$table->foreignId('schedule_id')->constrained('schedules');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('teacher_id')->constrained('teachers');$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('section_id')->constrained('sections');$table->foreignId('class_period_id')->constrained('class_periods');$table->enum('status',[
'scheduled','completed','cancelled',])->default('scheduled');$table->integer('total_students_count')->nullable();$table->integer('present_students_count')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['school_day_id','section_id']);$table->index(['teacher_id','school_day_id']);$table->index(['status','school_day_id']);$table->unique(['schedule_id','school_day_id'],'unique_session_per_day');});}public function down(): void{Schema::dropIfExists('class_sessions');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083642_create_assignments_table.php =====
return new class extends Migration{public function up(): void{Schema::create('assignments',function(Blueprint $table){$table->id();$table->foreignId('assigned_session_id')->constrained('class_sessions');$table->foreignId('due_session_id')->nullable()->constrained('class_sessions');$table->foreignId('section_id')->constrained('sections');$table->enum('type',['homework','oral','quiz','project']);$table->string('title');$table->text('description');$table->string('photo')->nullable();$table->foreignId('subject_id')->constrained('subjects');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');$table->index(['assigned_session_id','due_session_id']);$table->index(['assigned_session_id','subject_id']);$table->index(['due_session_id','subject_id']);$table->index(['assigned_session_id','type']);$table->index(['due_session_id','type']);});}public function down(): void{Schema::dropIfExists('assignments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083659_create_student_marks_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_marks',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('enrollment_id')->constrained('student_enrollments');$table->integer('homework')->nullable();$table->integer('oral')->nullable();$table->integer('activity')->nullable();$table->integer('quiz')->nullable();$table->integer('exam')->nullable();$table->integer('total')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['enrollment_id','subject_id']);});}public function down(): void{Schema::dropIfExists('student_marks');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083716_create_behavior_notes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('behavior_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->enum('behavior_type',['positive','negative']);$table->string('note');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('behavior_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083736_create_study_notes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('study_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->enum('note_type',['dictation','quiz','homework','general'])->default('general');$table->string('note');$table->integer('marks')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('study_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083757_create_student_attendances_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_attendances',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('class_session_id')->constrained('class_sessions');$table->enum('status',['Excused absence','Unexcused absence','Late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['class_session_id','student_id']);});}public function down(): void{Schema::dropIfExists('student_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083823_create_teacher_attendances_table.php =====
return new class extends Migration{public function up(): void{Schema::create('teacher_attendances',function(Blueprint $table){$table->id();$table->foreignId('class_session_id')->constrained('class_sessions');$table->foreignId('teacher_id')->constrained('teachers');$table->enum('status',['Excused absence','Unexcused absence','Late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['class_session_id','teacher_id']);});}public function down(): void{Schema::dropIfExists('teacher_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083843_create_complaints_table.php =====
return new class extends Migration{public function up(): void{Schema::create('complaints',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('content');$table->text('answer')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('complaints');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083913_create_news_table.php =====
return new class extends Migration{public function up(): void{Schema::create('news',function(Blueprint $table){$table->id();$table->string('title');$table->json('content');$table->dateTime('publish_date');$table->string('photo')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('news');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083939_create_news_target_table.php =====
return new class extends Migration{public function up(): void{Schema::create('news_targets',function(Blueprint $table){$table->id();$table->foreignId('news_id')->constrained('news');$table->foreignId('grade_id')->nullable()->constrained('grades');$table->foreignId('section_id')->nullable()->constrained('sections');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('news_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083954_create_files_table.php =====
return new class extends Migration{public function up(): void{Schema::create('files',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->string('title');$table->text('description')->nullable();$table->enum('type',['public','helper'])->default('helper');$table->string('file');$table->unsignedBigInteger('size');$table->dateTime('publish_date');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('files');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084008_create_file_target_table.php =====
return new class extends Migration{public function up(): void{Schema::create('file_targets',function(Blueprint $table){$table->id();$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('grade_id')->nullable()->constrained('grades');$table->foreignId('file_id')->constrained('files');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('file_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084028_create_file_downloads_table.php =====
return new class extends Migration{public function up(): void{Schema::create('file_downloads',function(Blueprint $table){$table->id();$table->foreignId('file_id')->constrained('files');$table->foreignId('user_id')->constrained('users');$table->timestamp('downloaded_at');$table->string('ip_address',45);$table->timestamps();});}public function down(): void{Schema::dropIfExists('file_downloads');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084126_create_messages_table.php =====
return new class extends Migration{public function up(): void{Schema::create('messages',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('message');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('messages');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084405_create_app_updates_table.php =====
return new class extends Migration{public function up(): void{Schema::create('app_updates',function(Blueprint $table){$table->id();$table->string('version');$table->string('platform');$table->string('url');$table->text('change_log')->nullable();$table->boolean('is_force_update');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('app_updates');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084500_create_exams_table.php =====
return new class extends Migration{public function up(): void{Schema::create('exams',function(Blueprint $table){$table->id();$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('main_subject_id')->constrained('main_subjects');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('exams');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_12_192306_create_quiz_targets_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quiz_targets',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained()->onDelete('cascade');$table->foreignId('subject_id')->constrained()->onDelete('cascade');$table->foreignId('section_id')->constrained()->onDelete('cascade');$table->foreignId('semester_id')->constrained()->onDelete('cascade');$table->timestamps();});}public function down(): void{Schema::dropIfExists('quiz_targets');}};

// === [Resources] ===
// ===== C:\Development\Laravel\school\app\Http\Resources\AssignmentResource.php =====
namespace App\Http\Resources;class AssignmentResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'assigned_session' => [
'id' => $this->assignedSession->id,'date' => $this->assignedSession->date->format('Y-m-d'),'time' => $this->assignedSession->time->format('H:i'),],'due_session' => $this->dueSession ? [
'id' => $this->dueSession->id,'date' => $this->dueSession->date->format('Y-m-d'),'time' => $this->dueSession->time->format('H:i'),] : null,'type' => $this->type,'title' => $this->title,'description' => $this->description,'photo' => $this->photo ? asset('storage/' . $this->photo): null,'subject' => [
'id' => $this->subject->id,'name' => $this->subject->name,],'section' => [
'id' => $this->section->id,'title' => $this->section->title,'grade' => [
'id' => $this->section->grade->id,'name' => $this->section->grade->name,],],'created_at' => $this->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),'created_by' => [
'id' => $this->createdBy->id,'name' => $this->createdBy->first_name . ' ' . $this->createdBy->father_name . ' ' . $this->createdBy->last_name,],];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\BehaviorNoteResource.php =====
namespace App\Http\Resources;class BehaviorNoteResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'student_id' => $this->student_id,'school_day_id' => $this->school_day_id,'behavior_type' => $this->behavior_type,'note' => $this->note,'school_day' => new SchoolDayResource($this->whenLoaded('schoolDay')),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\ClassSessionResource.php =====
namespace App\Http\Resources;class ClassSessionResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'schedule_id' => $this->schedule_id,'school_day_id' => $this->school_day_id,'teacher_id' => $this->teacher_id,'subject_id' => $this->subject_id,'section_id' => $this->section_id,'class_period_id' => $this->class_period_id,'status' => $this->status,'total_students_count' => $this->total_students_count,'present_students_count' => $this->present_students_count,'created_by' => $this->created_by,'schedule' => new ScheduleResource($this->whenLoaded('schedule')),'school_day' => new SchoolDayResource($this->whenLoaded('schoolDay')),'teacher' => new TeacherResource($this->whenLoaded('teacher')),'subject' => new SubjectResource($this->whenLoaded('subject')),'section' => new SectionResource($this->whenLoaded('section')),'class_period' => new ClassPeriodResource($this->whenLoaded('classPeriod')),'created_by_user' => new UserResource($this->whenLoaded('createdBy')),'student_attendances' => StudentAttendanceResource::collection($this->whenLoaded('studentAttendances')),'assignments' => AssignmentResource::collection($this->whenLoaded('assignments')),'study_notes' => StudyNoteResource::collection($this->whenLoaded('studyNotes')),'attendance_percentage' => $this->when($this->total_students_count > 0,function(){return round(($this->present_students_count / $this->total_students_count)* 100,2);}),'can_be_started' => $this->canBeStarted(),'is_today' => $this->schoolDay && $this->schoolDay->date->isToday(),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\ComplaintResource.php =====
namespace App\Http\Resources;class ComplaintResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'user_id' => $this->user_id,'title' => $this->title,'content' => $this->content,'answer' => $this->answer,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'user' => new UserResource($this->whenLoaded('user')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\DetailedQuizResource.php =====
namespace App\Http\Resources;class DetailedQuizResource extends JsonResource{public function toArray(Request $request): array{return [
'title' => $this->name,'question_count' => $this->questions->count(),'date' => $this->created_at->format('Y-m-d'),'targets' => QuizTargetResource::collection($this->targets),'questions' => QuestionResource::collection($this->questions),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\ExamResource.php =====
namespace App\Http\Resources;class ExamResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'school_day_id' => $this->school_day_id,'grade_id' => $this->grade_id,'main_subject_id' => $this->main_subject_id,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'school_day' => new SchoolDayResource($this->whenLoaded('schoolDay')),'grade' => new GradeResource($this->whenLoaded('grade')),'main_subject' => new MainSubjectResource($this->whenLoaded('mainSubject')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\FileResource.php =====
namespace App\Http\Resources;class FileResource extends JsonResource{public function toArray(Request $request): array{$user_type = auth()->user()->user_type;$array = $this->studentArray();if($user_type === UserType::Admin->value || $user_type === UserType::Teacher->value){$array = array_merge($array,$this->adminAdditionalAttributes());if($user_type === UserType::Teacher->value){$array[FileStr::apiCanDelete->value] =
auth()->user()->hasPermissionTo(FilesPermission::softDelete->value)&& $this->belongsToOneTeacher()&& !$array['deleted_at'];}}return $array;}public function studentArray(): array{return [
'id' => $this->id,'name' => $this->title,"description" => $this->description,"type" => $this->type,"size" => round($this->size /(1024 * 1024),2),"publish date" => $this->publish_date->format('Y-m-d h:i:s A'),'subject' => $this->subject ?? null
];}public function adminAdditionalAttributes(): array{$targets = $this->whenLoaded('targets');$grades = GradeResource::collection($targets->whereNotNull('grade')->pluck('grade')->unique()->values());$sections = SectionResource::collection($targets->whereNotNull('section')->pluck('section')->unique()->values());$targetsArray = [];if($sections->isNotEmpty()){$targetsArray['sections'] = $sections;}if($grades->isNotEmpty()){$targetsArray['grades'] = $grades;}return [
'deleted_at' => $this->deleted_at?->format('Y-m-d h:i:s A'),'targets' => $targetsArray
];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\GradeResource.php =====
namespace App\Http\Resources;class GradeResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'title' => $this->title,'year_id' => $this->year_id,'year' => $this->whenLoaded('year',function(){return [
'id' => $this->year->id,'name' => $this->year->name,'start_date' => $this->year->start_date?->format('Y-m-d'),'end_date' => $this->year->end_date?->format('Y-m-d'),'is_active' => $this->year->is_active,];}),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'sections' => SectionResource::collection($this->whenLoaded('sections')),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\GradeYearSettingResource.php =====
namespace App\Http\Resources;class GradeYearSettingResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'year_id' => $this->year_id,'grade_id' => $this->grade_id,'max_failed_subjects' => $this->max_failed_subjects,'help_marks' => $this->help_marks,'year' => new YearResource($this->whenLoaded('year')),'grade' => new GradeResource($this->whenLoaded('grade')),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\MainSubjectResource.php =====
namespace App\Http\Resources;class MainSubjectResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,'code' => $this->code,'success_rate' => $this->success_rate,'grade_id' => $this->grade_id,'grade' => new GradeResource($this->whenLoaded('grade')),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'subjects' => SubjectResource::collection($this->whenLoaded('subjects')),'subjects_count' => $this->when($this->relationLoaded('subjects'),$this->subjects->count()),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\MessageResource.php =====
namespace App\Http\Resources;class MessageResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'user_id' => $this->user_id,'title' => $this->title,'message' => $this->message,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'user' => new UserResource($this->whenLoaded('user')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\NewsResource.php =====
namespace App\Http\Resources;class NewsResource extends JsonResource{public function toArray(Request $request): array{$user = auth()->user();if($user->user_type === UserType::Admin->value){$targets = $this->whenLoaded('targets');$grades = GradeResource::collection($targets->whereNotNull('grade')->pluck('grade')->unique()->values());$sections = SectionResource::collection($targets->whereNotNull('section')->pluck('section')->unique()->values());$targetsArray = [];if($sections->isNotEmpty()){$targetsArray['sections'] = $sections;}if($grades->isNotEmpty()){$targetsArray['grades'] = $grades;}return [
"id" => $this->id,"title" => $this->title,"description" => json_decode($this->content),'date' => $this->publish_date->format('Y-m-d h:i:s A'),'created_at' => $this->created_at->format('Y-m-d h:i:s A'),'photo' => $this->photo ? asset('storage/' . $this->photo): null,'deleted_at'=>$this->deleted_at?->format('Y-m-d'),'targets' => $targetsArray,];}else
return [
"id" => $this->id,"title" => $this->title,"description" => json_decode($this->content),'date' => $this->publish_date->format('Y-m-d h:i:s A'),'photo' => $this->photo ? asset('storage/' . $this->photo): null,];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\PermissionResource.php =====
namespace App\Http\Resources;class PermissionResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\QuestionResource.php =====
namespace App\Http\Resources;class QuestionResource extends JsonResource{public function toArray($request): array{return [
'id' => $this->id,'quiz_id' => $this->quiz_id,'question_text' => $this->question_text,'question_photo' => $this->question_photo
? asset('storage/' . $this->question_photo): asset('storage/question_images/default.png'),'choices' => $this->choices,'right_choice' => $this->right_choice,'hint' => $this->hint,'hint_photo' => $this->hint_photo
? asset('storage/' . $this->hint_photo): asset('storage/hint_images/default.png'),'order' => $this->order,'created_at' => $this->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\QuizResource.php =====
namespace App\Http\Resources;class QuizResource extends JsonResource{public function toArray($request): array{return [
'id' => $this->id,'name' => $this->name,'questions_count' => $this->questions_count,'taken_at' => $this->taken_at,'targets' => QuizTargetResource::collection($this->whenLoaded('targets')),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\QuizTargetResource.php =====
namespace App\Http\Resources;class QuizTargetResource extends JsonResource{public function toArray(Request $request): array{return [
'subject' => $this->subject?->name ?? null,'grade' => $this->section?->grade?->title ?? null,'section' => $this->section?->title ?? null,'semester' => $this->semester?->name ?? null,];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\RoleResource.php =====
namespace App\Http\Resources;class RoleResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,'guard_name' => $this->guard_name,'permissions' => $this->permissions->pluck('name'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\SchoolDayResource.php =====
namespace App\Http\Resources;class SchoolDayResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'date' => $this->date?->format('Y-m-d'),'semester_id' => $this->semester_id,'type' => $this->type,'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'semester' => new SemesterResource($this->whenLoaded('semester')),'exams' => ExamResource::collection($this->whenLoaded('exams')),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\SchoolShiftResource.php =====
namespace App\Http\Resources;class SchoolShiftResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,'start_time' => $this->start_time,'end_time' => $this->end_time,'is_active' => $this->is_active,'grade_ids' => $this->targets->pluck('grade_id')->unique()->values(),'section_ids' => $this->targets->pluck('section_id')->unique()->values(),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\SectionResource.php =====
namespace App\Http\Resources;class SectionResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'title' => $this->title,'grade_id' => $this->grade_id,'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'grade' => new GradeResource($this->whenLoaded('grade')),'student_enrollments' => StudentEnrollmentResource::collection($this->whenLoaded('studentEnrollments')),'teacher_section_subjects' => TeacherSectionSubjectResource::collection($this->whenLoaded('teacherSectionSubjects')),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\SemesterResource.php =====
namespace App\Http\Resources;class SemesterResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'year_id' => $this->year_id,'name' => $this->name,'start_date' => $this->start_date?->format('Y-m-d'),'end_date' => $this->end_date?->format('Y-m-d'),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'year' => new YearResource($this->whenLoaded('year')),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'school_days' => SchoolDayResource::collection($this->whenLoaded('schoolDays')),'school_days_count' => $this->whenCounted('schoolDays'),'study_days_count' => $this->when($this->relationLoaded('schoolDays'),function(){return $this->schoolDays->where('type','study')->count();}),'exam_days_count' => $this->when($this->relationLoaded('schoolDays'),function(){return $this->schoolDays->where('type','exam')->count();}),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\StudentAttendanceResource.php =====
namespace App\Http\Resources;class StudentAttendanceResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'student' => [
'id' => $this->student->id,'name' => $this->student->user->first_name . ' ' . $this->student->user->father_name . ' ' . $this->student->user->last_name,'student_id' => $this->student->student_id,],'class_session' => [
'id' => $this->classSession->id,'date' => $this->classSession->date->format('Y-m-d'),'time' => $this->classSession->time->format('H:i'),],'status' => $this->status,'created_at' => $this->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at->format('Y-m-d H:i:s'),'created_by' => [
'id' => $this->createdBy->id,'name' => $this->createdBy->first_name . ' ' . $this->createdBy->father_name . ' ' . $this->createdBy->last_name,],];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\StudentEnrollmentResource.php =====
namespace App\Http\Resources;class StudentEnrollmentResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'student_id' => $this->student_id,'section_id' => $this->section_id,'semester_id' => $this->semester_id,'year_id' => $this->year_id,'enrollment_date' => $this->enrollment_date,'status' => $this->status,'created_by' => $this->created_by,'section' => new SectionResource($this->whenLoaded('section')),'semester' => new SemesterResource($this->whenLoaded('semester')),'year' => new YearResource($this->whenLoaded('year')),'created_by_user' => new UserResource($this->whenLoaded('createdBy')),'grade' => new GradeResource($this->whenLoaded('section.grade')),'year' => new YearResource($this->whenLoaded('semester.year')),'user' => new UserResource($this->whenLoaded('student.user')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\StudentMarkResource.php =====
namespace App\Http\Resources;class StudentMarkResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'subject_id' => $this->subject_id,'enrollment_id' => $this->enrollment_id,'homework' => $this->homework,'oral' => $this->oral,'activity' => $this->activity,'quiz' => $this->quiz,'exam' => $this->exam,'total' => $this->total,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'subject' => new SubjectResource($this->whenLoaded('subject')),'enrollment' => new StudentEnrollmentResource($this->whenLoaded('enrollment')),'section' => new SectionResource($this->whenLoaded('enrollment.section')),'semester' => new SemesterResource($this->whenLoaded('enrollment.semester')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\StudyNoteResource.php =====
namespace App\Http\Resources;class StudyNoteResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'student_id' => $this->student_id,'school_day_id' => $this->school_day_id,'subject_id' => $this->subject_id,'note_type' => $this->note_type,'note' => $this->note,'marks' => $this->marks,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'school_day' => new SchoolDayResource($this->whenLoaded('schoolDay')),'subject' => new SubjectResource($this->whenLoaded('subject')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\SubjectResource.php =====
namespace App\Http\Resources;class SubjectResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,'code' => $this->code,'full_mark' => $this->full_mark,'homework_percentage' => $this->homework_percentage,'oral_percentage' => $this->oral_percentage,'activity_percentage' => $this->activity_percentage,'quiz_percentage' => $this->quiz_percentage,'exam_percentage' => $this->exam_percentage,'num_class_period' => $this->num_class_period,'is_failed' => $this->is_failed,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'main_subject' => new MainSubjectResource($this->whenLoaded('mainSubject')),'grade' => new GradeResource($this->whenLoaded('mainSubject.grade')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\TeacherAttendanceResource.php =====
namespace App\Http\Resources;class TeacherAttendanceResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'teacher' => [
'id' => $this->teacher->id,'name' => $this->teacher->user->first_name . ' ' . $this->teacher->user->father_name . ' ' . $this->teacher->user->last_name,'teacher_id' => $this->teacher->teacher_id,],'class_session' => [
'id' => $this->classSession->id,'date' => $this->classSession->date->format('Y-m-d'),'time' => $this->classSession->time->format('H:i'),],'status' => $this->status,'created_at' => $this->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at->format('Y-m-d H:i:s'),'created_by' => [
'id' => $this->createdBy->id,'name' => $this->createdBy->first_name . ' ' . $this->createdBy->father_name . ' ' . $this->createdBy->last_name,],];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\TeacherSectionSubjectResource.php =====
namespace App\Http\Resources;class TeacherSectionSubjectResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'teacher_id' => $this->teacher_id,'grade_id' => $this->grade_id,'subject_id' => $this->subject_id,'section_id' => $this->section_id,'is_active' => $this->is_active,'num_class_period' => $this->num_class_period,'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'teacher' => new UserResource($this->whenLoaded('teacher')),'grade' => new GradeResource($this->whenLoaded('grade')),'subject' => new SubjectResource($this->whenLoaded('subject')),'section' => new SectionResource($this->whenLoaded('section')),'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'deleted_at' => $this->deleted_at?->format('Y-m-d H:i:s'),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\UserResource.php =====
namespace App\Http\Resources;class UserResource extends JsonResource{public function toArray($request): array{$isGetUserRoute = $request->routeIs('users.show');$isGetStaffRoute = $request->routeIs('staff');return [
'id' => $this->id,'name' => trim("{$this->first_name}{$this->father_name}{$this->last_name}"),'mother_name' => $this->mother_name,'email' => $this->email,'birth_date' => $this->birth_date,'gender' => $this->gender,'phone' => $this->phone,'user_type' => $this->user_type,'role' => $this->when($isGetStaffRoute,function(){$role = $this->roles->first();return $role ? [
'id' => $role->id,'name' => $role->name,] : null;}),'permissions' => $this->when($isGetStaffRoute,function(){$role = $this->roles->first();return $role ? $role->permissions->pluck('name'): [];}),'image' => $this->image ? asset('storage/' . $this->image): asset('storage/user_images/default.png'),'last_login' => $this->when($isGetUserRoute,function(){return $this->last_login ? $this->last_login->format('Y-m-d H:i:s'): 'This user has never logged in';}),'user_type_details' => match($this->user_type){'admin' => [
'created_by' => $this->admin?->createdBy
? trim("{$this->admin->createdBy->first_name}{$this->admin->createdBy->father_name}{$this->admin->createdBy->last_name}"): null,'created_at' => $this->admin?->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->admin?->updated_at->format('Y-m-d H:i:s'),],'teacher' => [
'created_by' => $this->teacher?->createdBy
? trim("{$this->teacher->createdBy->first_name}{$this->teacher->createdBy->father_name}{$this->teacher->createdBy->last_name}"): null,'created_at' => $this->teacher?->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->teacher?->updated_at->format('Y-m-d H:i:s'),],'student' => [
'grandfather' => $this->student?->grandfather,'general_id' => $this->student?->general_id,'is_active' => $this->student?->is_active,'created_by' => $this->student?->createdBy
? trim("{$this->student->createdBy->first_name}{$this->student->createdBy->father_name}{$this->student->createdBy->last_name}"): null,'created_at' => $this->student?->created_at->format('Y-m-d H:i:s'),'updated_at' => $this->student?->updated_at->format('Y-m-d H:i:s'),],},'devices' => $this->when($isGetUserRoute,function(){return $this->devices->map(function($device){return [
'last_login' => $this->last_login->format('Y-m-d H:i:s'),'device_id' => $device->device_id,'name' => $device->name,'type' => $device->type,'platform' => $device->platform,];});}),];}}
// ===== C:\Development\Laravel\school\app\Http\Resources\YearResource.php =====
namespace App\Http\Resources;class YearResource extends JsonResource{public function toArray(Request $request): array{return [
'id' => $this->id,'name' => $this->name,'start_date' => $this->start_date?->format('Y-m-d'),'end_date' => $this->end_date?->format('Y-m-d'),'is_active' => $this->is_active,'created_at' => $this->created_at?->format('Y-m-d H:i:s'),'updated_at' => $this->updated_at?->format('Y-m-d H:i:s'),'created_by' => $this->createdBy->id . '-' . $this->createdBy->first_name . ' ' . $this->createdBy->last_name,'semesters' => SemesterResource::collection($this->whenLoaded('semesters')),];}}

// === [Exceptions] ===
// ===== C:\Development\Laravel\school\app\Exceptions\DeviceAlreadyExistsException.php =====
namespace App\Exceptions;class DeviceAlreadyExistsException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.user.device_exists'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\ImageUploadFailed.php =====
namespace App\Exceptions;class ImageUploadFailed extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.user.image_upload_failed'),404,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\InvalidPasswordException.php =====
namespace App\Exceptions;class InvalidPasswordException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.auth.invalid_password'),401,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\InvalidQuestionTextException.php =====
namespace App\Exceptions;class InvalidQuestionTextException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.question.invalid_text'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\InvalidUserException.php =====
namespace App\Exceptions;class InvalidUserException extends Exception{protected $message;public function __construct(string $message){parent::__construct();$this->message = $message;}public function render(){return ResponseHelper::jsonResponse(null,$this->message,400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\InvalidUserTypeException.php =====
namespace App\Exceptions;class InvalidUserTypeException extends Exception{public function render(){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_user_type'),403,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\MustPassUserTypeException.php =====
namespace App\Exceptions;class MustPassUserTypeException extends Exception{public function render(){return ResponseHelper::jsonResponse(null,__('messages.auth.pass_user_type'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\PermissionException.php =====
namespace App\Exceptions;class PermissionException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.auth.permission_denied'),403,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\QuestionAlreadyExistsException.php =====
namespace App\Exceptions;class QuestionAlreadyExistsException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.question.already_exists'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\QuestionNotFoundException.php =====
namespace App\Exceptions;class QuestionNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.question.not-found'),404,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\QuizAlreadySubmittedException.php =====
namespace App\Exceptions;class QuizAlreadySubmittedException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.quiz.score_already_submitted'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\QuizNotFoundException.php =====
namespace App\Exceptions;class QuizNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.quiz.not-found'),404,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\RoleNotFoundException.php =====
namespace App\Exceptions;class RoleNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.role.not_found'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\SchoolShiftNotFoundException.php =====
namespace App\Exceptions;class SchoolShiftNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.school_shift.not_found'),404,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\StudentNotFoundException.php =====
namespace App\Exceptions;class StudentNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.student.not_found'),400,false);}}
// ===== C:\Development\Laravel\school\app\Exceptions\UserNotFoundException.php =====
namespace App\Exceptions;class UserNotFoundException extends Exception{public function render(){return ResponseHelper::jsonResponse([],__('messages.user.not-found'),404,false);}}

// === [Helpers] ===
// ===== C:\Development\Laravel\school\app\Helpers\AuthHelper.php =====
namespace App\Helpers;class AuthHelper{public static function authorize($permissionName){if(!auth()->user()->hasPermissionTo($permissionName))throw new PermissionException();}}
// ===== C:\Development\Laravel\school\app\Helpers\ResponseHelper.php =====
namespace App\Helpers;class ResponseHelper{public static function jsonResponse($data = null,string $message = '',int $statusCode = 200,bool $successful = true): \Illuminate\Http\JsonResponse{$responseData = [
'successful' => $successful,'message' => $message,'data' => $data,'status_code' => $statusCode,];if(is_null($data)||(is_array($data)&& empty($data))){unset($responseData['data']);}return response()->json($responseData,$statusCode);}}

// === [Routes] ===
// ===== C:\Development\Laravel\school\routes\api.php =====
Route::prefix('auth')->name('auth.')->group(function(){Route::post('login',[AuthController::class,'login'])->name('login')->middleware('throttle:10,1');Route::post('forgot-password',[AuthController::class,'forgotPassword'])->name('forgot-password')->middleware('throttle:5,1');Route::post('reset-password',[AuthController::class,'resetPassword'])->name('reset-password')->middleware('throttle:5,1');Route::middleware(['auth:api'])->group(function(){Route::post('refresh',[AuthController::class,'refresh'])->name('refresh');Route::post('logout',[AuthController::class,'logout'])->name('logout');});});Route::middleware('auth:api')->group(function(){Route::post('register',[AuthController::class,'register']);Route::get('admins',[AdminController::class,'show']);Route::get('teachers',[TeacherController::class,'show']);Route::get('students',[StudentController::class,'show']);Route::get('staff',[UserController::class,'getStaff'])->name('staff');Route::resource('users',UserController::class)->only(['show','destroy']);Route::post('users/{user}',[UserController::class,'update']);Route::resource('roles',RoleController::class);Route::get('permissions',[PermissionController::class,'show']);Route::resource('school_shifts',SchoolShiftController::class);})->middleware(['user_type:admin','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('change-password',[AuthController::class,'changePassword'])->name('change-password');})->middleware(['user_type:admin|teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::apiResource('quizzes',QuizController::class);Route::put('quizzes/{id}/activate',[QuizController::class,'activate']);Route::put('quizzes/{id}/deactivate',[QuizController::class,'deactivate']);Route::post('quizzes/{quiz_id}/questions',[QuestionController::class,'create']);Route::post('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'update']);Route::delete('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'destroy']);Route::get('quizzes',[QuizController::class,'index']);Route::get('quiz/{id}',[QuizController::class,'show']);})->middleware(['user_type:teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('score-quizzes',[ScoreQuizController::class,'create']);})->middleware(['user_type:student','throttle:5,1']);require __DIR__.'/news.php';require __DIR__.'/files.php';require __DIR__.'/years.php';require __DIR__.'/semesters.php';require __DIR__.'/school-days.php';require __DIR__.'/grades.php';require __DIR__.'/sections.php';require __DIR__.'/subjects.php';require __DIR__.'/student-enrollments.php';require __DIR__.'/grade-year-settings.php';require __DIR__.'/student-marks.php';require __DIR__.'/teacher-section-subjects.php';require __DIR__.'/study-notes.php';require __DIR__.'/behavior-notes.php';require __DIR__.'/exams.php';require __DIR__.'/complaints.php';require __DIR__.'/messages.php';require __DIR__.'/class-sessions.php';require __DIR__.'/student-attendances.php';require __DIR__.'/teacher-attendances.php';require __DIR__.'/assignments.php';
// ===== C:\Development\Laravel\school\routes\assignments.php =====
Route::prefix('assignments')->controller(AssignmentController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::get('/{assignment}','show');Route::post('/store','store');Route::post('/restore/{assignment}','restore');Route::post('/{assignment}','update');Route::delete('/delete/{assignment}','delete');Route::delete('/{assignment}','destroy');});
// ===== C:\Development\Laravel\school\routes\behavior-notes.php =====
Route::middleware('auth:api')->group(function(){Route::get('behavior-notes/trashed',[BehaviorNoteController::class,'trashed']);Route::apiResource('behavior-notes',BehaviorNoteController::class);Route::patch('behavior-notes/{id}/restore',[BehaviorNoteController::class,'restore']);Route::delete('behavior-notes/{id}/force-delete',[BehaviorNoteController::class,'forceDelete']);Route::get('behavior-notes/student/{studentId}',[BehaviorNoteController::class,'getByStudent']);Route::get('behavior-notes/school-day/{schoolDayId}',[BehaviorNoteController::class,'getBySchoolDay']);});
// ===== C:\Development\Laravel\school\routes\class-sessions.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('class-sessions',ClassSessionController::class);Route::patch('class-sessions/{class_session}/cancel',[ClassSessionController::class,'cancel']);Route::get('class-sessions/teacher/{teacherId}',[ClassSessionController::class,'getByTeacher']);Route::get('class-sessions/section/{sectionId}',[ClassSessionController::class,'getBySection']);Route::get('class-sessions/school-day/{schoolDayId}',[ClassSessionController::class,'getBySchoolDay']);});
// ===== C:\Development\Laravel\school\routes\complaints.php =====
Route::middleware('auth:api')->group(function(){Route::get('complaints/trashed',[ComplaintController::class,'trashed']);Route::apiResource('complaints',ComplaintController::class);Route::patch('complaints/{id}/restore',[ComplaintController::class,'restore']);Route::delete('complaints/{id}/force-delete',[ComplaintController::class,'forceDelete']);Route::get('complaints/user/{userId}',[ComplaintController::class,'getByUser']);Route::post('complaints/{id}/answer',[ComplaintController::class,'answer']);});
// ===== C:\Development\Laravel\school\routes\console.php =====
Artisan::command('inspire',function(){$this->comment(Inspiring::quote());})->purpose('Display an inspiring quote');
// ===== C:\Development\Laravel\school\routes\exams.php =====
Route::middleware('auth:api')->group(function(){Route::get('exams/trashed',[ExamController::class,'trashed']);Route::apiResource('exams',ExamController::class);Route::patch('exams/{id}/restore',[ExamController::class,'restore']);Route::delete('exams/{id}/force-delete',[ExamController::class,'forceDelete']);Route::get('exams/school-day/{schoolDayId}',[ExamController::class,'getBySchoolDay']);Route::get('exams/grade/{gradeId}',[ExamController::class,'getByGrade']);});
// ===== C:\Development\Laravel\school\routes\files.php =====
Route::middleware('auth:api')->prefix('files')->controller(FileController::class)->group(function(){Route::get('/','index')->name('files.index');Route::get('/subject/{id}','bySubject')->name('files.bySubject');Route::get('/download/{file}','download')->name('files.download');Route::get('/{file}','show')->name('files.show');Route::post('/store','store')->name('files.store');Route::post('/restore/{file}','restore')->name('files.store');Route::post('/{file}','update')->name('files.update');Route::delete('delete/{file}','delete')->name('files.delete');Route::delete('/{file}','destroy')->name('files.destroy');});
// ===== C:\Development\Laravel\school\routes\grade-year-settings.php =====
Route::middleware('auth:api')->group(function(){Route::get('grade-year-settings/trashed',[GradeYearSettingController::class,'trashed']);Route::apiResource('grade-year-settings',GradeYearSettingController::class);Route::patch('grade-year-settings/{id}/restore',[GradeYearSettingController::class,'restore']);Route::delete('grade-year-settings/{id}/force-delete',[GradeYearSettingController::class,'forceDelete']);Route::get('grade-year-settings/grade/{gradeId}',[GradeYearSettingController::class,'getByGrade']);Route::get('grade-year-settings/year/{yearId}',[GradeYearSettingController::class,'getByYear']);});
// ===== C:\Development\Laravel\school\routes\grades.php =====
Route::middleware('auth:api')->group(function(){Route::get('grades/trashed',[GradeController::class,'trashed']);Route::apiResource('grades',GradeController::class);Route::patch('grades/{id}/restore',[GradeController::class,'restore']);Route::delete('grades/{id}/force-delete',[GradeController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\messages.php =====
Route::middleware('auth:api')->group(function(){Route::get('messages/trashed',[MessageController::class,'trashed']);Route::apiResource('messages',MessageController::class);Route::patch('messages/{id}/restore',[MessageController::class,'restore']);Route::delete('messages/{id}/force-delete',[MessageController::class,'forceDelete']);Route::get('messages/user/{userId}',[MessageController::class,'getByUser']);});
// ===== C:\Development\Laravel\school\routes\news.php =====
Route::prefix('news')->controller(NewsController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::get('/{news}','show');Route::post('/store','store');Route::post('/restore/{news}','restore');Route::post('/{news}','update');Route::delete('/delete/{news}','delete');Route::delete('/{news}','destroy');});
// ===== C:\Development\Laravel\school\routes\school-days.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('school-days')->group(function(){Route::get('/{semester}/trashed',[SchoolDayController::class,'trashed']);Route::get('/{semester}',[SchoolDayController::class,'index']);Route::post('/',[SchoolDayController::class,'store']);Route::put('/{schoolDay}',[SchoolDayController::class,'update']);Route::delete('/{schoolDay}',[SchoolDayController::class,'destroy']);Route::patch('/{id}/restore',[SchoolDayController::class,'restore']);Route::delete('/{id}/force-delete',[SchoolDayController::class,'forceDelete']);});});
// ===== C:\Development\Laravel\school\routes\sections.php =====
Route::middleware('auth:api')->group(function(){Route::get('sections/trashed',[SectionController::class,'trashed']);Route::apiResource('sections',SectionController::class);Route::patch('sections/{id}/restore',[SectionController::class,'restore']);Route::delete('sections/{id}/force-delete',[SectionController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\semesters.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('semesters')->group(function(){Route::post('/',[SemesterController::class,'store']);Route::put('/{semester}',[SemesterController::class,'update']);Route::delete('/{semester}',[SemesterController::class,'destroy']);Route::patch('/{semester}/active',[SemesterController::class,'Active']);Route::patch('/{id}/restore',[SemesterController::class,'restore']);Route::delete('/{id}/force-delete',[SemesterController::class,'forceDelete']);});});
// ===== C:\Development\Laravel\school\routes\student-attendances.php =====
Route::prefix('student-attendances')->controller(StudentAttendanceController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::get('/{studentAttendance}','show');Route::post('/store','store');Route::post('/{studentAttendance}','update');Route::delete('/{studentAttendance}','destroy');});
// ===== C:\Development\Laravel\school\routes\student-enrollments.php =====
Route::middleware('auth:api')->group(function(){Route::get('student-enrollments/trashed',[StudentEnrollmentController::class,'trashed']);Route::apiResource('student-enrollments',StudentEnrollmentController::class);Route::patch('student-enrollments/{id}/restore',[StudentEnrollmentController::class,'restore']);Route::delete('student-enrollments/{id}/force-delete',[StudentEnrollmentController::class,'forceDelete']);Route::get('student-enrollments/student/{studentId}',[StudentEnrollmentController::class,'getByStudent']);Route::get('student-enrollments/section/{sectionId}',[StudentEnrollmentController::class,'getBySection']);Route::get('student-enrollments/semester/{semesterId}',[StudentEnrollmentController::class,'getBySemester']);});
// ===== C:\Development\Laravel\school\routes\student-marks.php =====
Route::middleware('auth:api')->group(function(){Route::apiResource('student-marks',StudentMarkController::class);Route::get('student-marks/enrollment/{enrollmentId}',[StudentMarkController::class,'getByEnrollment']);Route::get('student-marks/subject/{subjectId}',[StudentMarkController::class,'getBySubject']);Route::get('student-marks/subject/{subjectId}/section/{sectionId}',[StudentMarkController::class,'getBySubjectAndSection']);});
// ===== C:\Development\Laravel\school\routes\study-notes.php =====
Route::middleware('auth:api')->group(function(){Route::get('study-notes/trashed',[StudyNoteController::class,'trashed']);Route::apiResource('study-notes',StudyNoteController::class);Route::patch('study-notes/{id}/restore',[StudyNoteController::class,'restore']);Route::delete('study-notes/{id}/force-delete',[StudyNoteController::class,'forceDelete']);Route::get('study-notes/student/{studentId}',[StudyNoteController::class,'getByStudent']);Route::get('study-notes/school-day/{schoolDayId}',[StudyNoteController::class,'getBySchoolDay']);Route::get('study-notes/subject/{subjectId}',[StudyNoteController::class,'getBySubject']);});
// ===== C:\Development\Laravel\school\routes\subjects.php =====
Route::middleware('auth:api')->group(function(){Route::get('main-subjects/trashed',[MainSubjectController::class,'trashed']);Route::apiResource('main-subjects',MainSubjectController::class);Route::post('main-subjects/with-subject',[MainSubjectController::class,'createWithSubject']);Route::patch('main-subjects/{id}/restore',[MainSubjectController::class,'restore']);Route::delete('main-subjects/{id}/force-delete',[MainSubjectController::class,'forceDelete']);Route::get('subjects/trashed',[SubjectController::class,'trashed']);Route::apiResource('subjects',SubjectController::class);Route::patch('subjects/{id}/restore',[SubjectController::class,'restore']);Route::delete('subjects/{id}/force-delete',[SubjectController::class,'forceDelete']);});
// ===== C:\Development\Laravel\school\routes\teacher-attendances.php =====
Route::prefix('teacher-attendances')->controller(TeacherAttendanceController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::get('/{teacherAttendance}','show');Route::post('/store','store');Route::post('/{teacherAttendance}','update');Route::delete('/{teacherAttendance}','destroy');});
// ===== C:\Development\Laravel\school\routes\teacher-section-subjects.php =====
Route::middleware('auth:api')->group(function(){Route::get('teacher-section-subjects/trashed',[TeacherSectionSubjectController::class,'trashed']);Route::apiResource('teacher-section-subjects',TeacherSectionSubjectController::class);Route::patch('teacher-section-subjects/{id}/restore',[TeacherSectionSubjectController::class,'restore']);Route::delete('teacher-section-subjects/{id}/force-delete',[TeacherSectionSubjectController::class,'forceDelete']);Route::get('teacher-section-subjects/teacher/{teacherId}',[TeacherSectionSubjectController::class,'getByTeacher']);Route::get('teacher-section-subjects/section/{sectionId}',[TeacherSectionSubjectController::class,'getBySection']);Route::get('teacher-section-subjects/subject/{subjectId}',[TeacherSectionSubjectController::class,'getBySubject']);});
// ===== C:\Development\Laravel\school\routes\web.php =====
Route::get('/reset-password/{token}',function($token){return 'Reset link: ' . $token;})->name('password.reset');
// ===== C:\Development\Laravel\school\routes\years.php =====
Route::middleware('auth:api')->group(function(){Route::prefix('years')->group(function(){Route::get('/',[YearController::class,'index']);Route::get('/trashed',[YearController::class,'trashed']);Route::post('/',[YearController::class,'store']);Route::get('/{year}',[YearController::class,'show']);Route::put('/{year}',[YearController::class,'update']);Route::delete('/{year}',[YearController::class,'destroy']);Route::patch('/{year}/active',[YearController::class,'Active']);Route::patch('/{id}/restore',[YearController::class,'restore']);Route::delete('/{id}/force-delete',[YearController::class,'forceDelete']);});});
