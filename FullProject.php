// === FULL PROJECT COMPACT EXPORT ===

// === [Controllers] ===
// ===== C:\Development\Laravel\school\app\Http\Controllers\AdminController.php =====
namespace App\Http\Controllers;class AdminController extends Controller{protected $adminService;public function __construct(AdminService $adminService){$this->adminService = $adminService;}public function show(){return $this->adminService->listAdmins();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\AuthController.php =====
namespace App\Http\Controllers;class AuthController extends Controller{protected $authService;public function __construct(AuthService $authService){$this->authService = $authService;}public function register(RegisterRequest $request){return $this->authService->register($request);}public function login(LoginRequest $request){$user_type = strtolower(request()->query('user_type'));return $this->authService->login($request,$user_type);}public function refresh(Request $request){return $this->authService->refresh($request);}public function logout(Request $request){return $this->authService->logout($request);}public function changePassword(ChangePasswordRequest $request){return $this->authService->changePassword($request);}public function forgotPassword(ForgotPasswordRequest $request){return $this->authService->forgotPassword($request);}public function resetPassword(ResetPasswordRequest $request){return $this->authService->resetPassword($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\Controller.php =====
namespace App\Http\Controllers;abstract class Controller{}
// ===== C:\Development\Laravel\school\app\Http\Controllers\GradeController.php =====
namespace App\Http\Controllers;class GradeController extends Controller{protected GradeService $gradeService;public function __construct(GradeService $gradeService){$this->gradeService = $gradeService;}public function index(){return $this->gradeService->listGrade();}public function store(GradeRequest $request){return $this->gradeService->createGrade($request);}public function show(Grade $grade){return $this->gradeService->showGrade($grade);}public function update(Request $request,Grade $grade){return $this->gradeService->updateGrade($request,$grade);}public function destroy(Grade $grade){return $this->gradeService->destroyGrade($grade);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\NewsController.php =====
namespace App\Http\Controllers;class NewsController extends Controller{protected $newsService;public function __construct(NewsService $newsService){$this->newsService = $newsService;}public function index(): ?JsonResponse{return $this->newsService->getNews();}public function store(CreateNewsRequest $request){return $this->newsService->createNews($request);}public function show(News $news){return $this->newsService->showNews($news);}public function update(UpdateNewsRequest $request,News $news){return $this->newsService->updateNews($request,$news);}public function destroy(News $news): JsonResponse{return $this->newsService->deleteNews($news);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuestionController.php =====
namespace App\Http\Controllers;class QuestionController extends Controller{protected $questionService;public function __construct(QuestionService $questionService){return $this->questionService = $questionService;}public function create(CreateQuestionRequest $request,int $quiz_id){return $this->questionService->create($request,$quiz_id);}public function update(UpdateQuestionRequest $request,int $quiz_id,int $question_id){return $this->questionService->update($request,$quiz_id,$question_id);}public function destroy(int $quiz_id,int $question_id){return $this->questionService->delete($quiz_id,$question_id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\QuizController.php =====
namespace App\Http\Controllers;class QuizController extends Controller{protected $quizService;public function __construct(QuizService $quizService){$this->quizService = $quizService;}public function index(ListQuizzesRequest $request){return $this->quizService->listQuizzes($request);}public function store(CreateAndUpdateQuizRequest $request){return $this->quizService->create($request);}public function activate(int $id){return $this->quizService->activate($id);}public function deactivate(int $id){return $this->quizService->deactivate($id);}public function show(int $id){return $this->quizService->showQuiz($id);}public function update(CreateAndUpdateQuizRequest $request,int $id){return $this->quizService->update($request,$id);}public function destroy(int $id){return $this->quizService->destroy($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\RoleController.php =====
namespace App\Http\Controllers;class RoleController extends Controller{protected $roleService;public function __construct(RoleService $roleService){$this->roleService = $roleService;}public function index(){}public function store(CreateRoleRequest $request){return $this->roleService->create($request);}public function show(string $id){}public function update(Request $request,string $id){}public function destroy(string $id){}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SchoolDayController.php =====
namespace App\Http\Controllers;class SchoolDayController extends Controller{protected SchoolDayService $schoolDayService;public function __construct(SchoolDayService $schoolDayService){$this->schoolDayService = $schoolDayService;}public function index(Semester $semester){return $this->schoolDayService->listSchoolDay($semester);}public function store(SchoolDayRequest $request){return $this->schoolDayService->createSchoolDay($request);}public function update(Request $request,SchoolDay $schoolDay){return $this->schoolDayService->updateSchoolDay($request,$schoolDay);}public function destroy(SchoolDay $schoolDay){return $this->schoolDayService->destroySchoolDay($schoolDay);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\ScoreQuizController.php =====
namespace App\Http\Controllers;class ScoreQuizController extends Controller{protected $scoreQuizService;public function __construct(ScoreQuizService $scoreQuizService){$this->scoreQuizService = $scoreQuizService;}public function create(CreateScoreQuizRequest $request){return $this->scoreQuizService->create($request);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SectionController.php =====
namespace App\Http\Controllers;class SectionController extends Controller{protected SectionService $sectionService;public function __construct(SectionService $sectionService){$this->sectionService = $sectionService;}public function index(){return $this->sectionService->listSection();}public function store(SectionRequest $request){return $this->sectionService->createSection($request);}public function show(Section $section){return $this->sectionService->showSection($section);}public function update(SectionRequest $request,Section $section){return $this->sectionService->updateSection($request,$section);}public function destroy(Section $section){return $this->sectionService->destroySection($section);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\SemesterController.php =====
namespace App\Http\Controllers;class SemesterController extends Controller{protected SemesterService $semesterService;public function __construct(SemesterService $semesterService){$this->semesterService = $semesterService;}public function store(SemesterRequest $request){return $this->semesterService->createSemester($request);}public function update(Request $request,Semester $semester){return $this->semesterService->updateSemester($request,$semester);}public function destroy(Semester $semester){return $this->semesterService->destroySemester($semester);}public function Active(Semester $semester){return $this->semesterService->ActiveSemester($semester);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\StudentController.php =====
namespace App\Http\Controllers;class StudentController extends Controller{protected $studentService;public function __construct(StudentService $studentService){$this->studentService = $studentService;}public function show(){return $this->studentService->listStudents();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\TeacherController.php =====
namespace App\Http\Controllers;class TeacherController extends Controller{protected $teacherService;public function __construct(TeacherService $teacherService){$this->teacherService = $teacherService;}public function show(){return $this->teacherService->listTeachers();}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\UserController.php =====
namespace App\Http\Controllers;class UserController extends Controller{protected $userService;public function __construct(UserService $userService){$this->userService = $userService;}public function show($id){return $this->userService->getUser($id);}public function getStaff(){return $this->userService->listAdminsAndTeachers();}public function update(UpdateRequest $request,$id){return $this->userService->updateUser($request,$id);}public function destroy($id){return $this->userService->deleteUser($id);}}
// ===== C:\Development\Laravel\school\app\Http\Controllers\YearController.php =====
namespace App\Http\Controllers;class YearController extends Controller{protected YearService $yearService;public function __construct(YearService $yearService){$this->yearService = $yearService;}public function index(){return $this->yearService->listYear();}public function store(YearRequest $request){return $this->yearService->createYear($request);}public function show(Year $year){return $this->yearService->showYear($year);}public function update(Request $request,Year $year){return $this->yearService->updateYear($request,$year);}public function destroy(Year $year){return $this->yearService->destroyYear($year);}public function Active(Year $year){return $this->yearService->ActiveYear($year);}}

// === [Migrations] ===
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000000_create_users_table.php =====
return new class extends Migration{public function up(): void{Schema::create('users',function(Blueprint $table){$table->id();$table->string('first_name');$table->string('father_name')->nullable();$table->string('last_name');$table->string('mother_name');$table->enum('gender',['male','female']);$table->date('birth_date')->nullable();$table->string('email')->unique()->nullable();$table->string('phone')->nullable();$table->string('password')->nullable();$table->enum('user_type',['admin','teacher','student'])->default('student');$table->timestamp('email_verified_at')->nullable();$table->string('email_verification_token',64)->nullable();$table->string('image')->nullable();$table->timestamp('last_login')->nullable();$table->rememberToken();$table->softDeletes();$table->timestamps();});Schema::create('password_reset_tokens',function(Blueprint $table){$table->string('email')->primary();$table->string('token');$table->timestamp('created_at')->nullable();});Schema::create('sessions',function(Blueprint $table){$table->string('id')->primary();$table->foreignId('user_id')->nullable()->index();$table->string('ip_address',45)->nullable();$table->text('user_agent')->nullable();$table->longText('payload');$table->integer('last_activity')->index();});}public function down(): void{Schema::dropIfExists('users');Schema::dropIfExists('password_reset_tokens');Schema::dropIfExists('sessions');}};
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000001_create_cache_table.php =====
The table is there but I didn't upload it to reduce the size.
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000002_create_jobs_table.php =====
The table is there but I didn't upload it to reduce the size.
// ===== C:\Development\Laravel\school\database\migrations\2025_05_13_142552_create_personal_access_tokens_table.php =====
return new class extends Migration{public function up(): void{Schema::create('personal_access_tokens',function(Blueprint $table){$table->id();$table->morphs('tokenable');$table->string('name');$table->string('token',64)->unique();$table->text('abilities')->nullable();$table->timestamp('last_used_at')->nullable();$table->timestamp('expires_at')->nullable();$table->unsignedBigInteger('device_id')->nullable();$table->timestamps();});}public function down(): void{Schema::dropIfExists('personal_access_tokens');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_05_14_171340_create_permission_tables.php =====
The table is there but I didn't upload it to reduce the size.
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_134423_create_device_infos_table.php =====
return new class extends Migration{public function up(): void{Schema::create('device_infos',function(Blueprint $table){$table->id();$table->string('platform');$table->string('type');$table->string('name');$table->string('device_id')->unique();$table->timestamps();});}public function down(): void{Schema::dropIfExists('device_infos');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_135022_create_user_devices_table.php =====
return new class extends Migration{public function up(): void{Schema::create('user_devices',function(Blueprint $table){$table->id();$table->foreignId('device_id')->constrained('device_infos')->cascadeOnDelete();$table->foreignId('user_id')->constrained('users')->cascadeOnDelete();$table->timestamps();});}public function down(): void{Schema::dropIfExists('user_devices');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_100055_create_admins_table.php =====
return new class extends Migration{public function up(): void{Schema::create('admins',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('admins');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_111858_create_teachers_table.php =====
return new class extends Migration{public function up(): void{Schema::create('teachers',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('teachers');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_123212_create_students_table.php =====
return new class extends Migration{public function up(): void{Schema::create('students',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('grandfather');$table->unsignedBigInteger('general_id');$table->boolean('is_active')->default(true);$table->foreignId('created_by')->constrained('users');$table->timestamps();});}public function down(): void{Schema::dropIfExists('students');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123205_create_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quizzes',function(Blueprint $table){$table->id();$table->string('name');$table->timestamps();$table->date('taken_at')->nullable();$table->boolean('is_active')->default(false);$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123447_create_questions_table.php =====
return new class extends Migration{public function up(): void{Schema::create('questions',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->json('question_text');$table->text('question_text_plain')->nullable();$table->string('question_photo')->nullable();$table->json('choices');$table->tinyinteger('choices_count');$table->tinyInteger('right_choice');$table->text('hint')->nullable();$table->string('hint_photo')->nullable();$table->integer('order')->default(0);$table->timestamps();});}public function down(): void{Schema::dropIfExists('questions');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123838_create_score_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('score_quizzes',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->foreignId('student_id')->constrained('students');$table->unsignedBigInteger('full_score');$table->unsignedBigInteger('score');$table->timestamps();});}public function down(): void{Schema::dropIfExists('score_quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082616_create_grades_table.php =====
return new class extends Migration{public function up(){Schema::create('grades',function(Blueprint $table){$table->id();$table->string('title');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('grades');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082708_create_sections_table.php =====
return new class extends Migration{public function up(){Schema::create('sections',function(Blueprint $table){$table->id();$table->string('title');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('sections');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082726_create_years_table.php =====
return new class extends Migration{public function up(){Schema::create('years',function(Blueprint $table){$table->id();$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('years');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082800_create_semesters_table.php =====
return new class extends Migration{public function up(){Schema::create('semesters',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('semesters');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082817_create_school_days_table.php =====
return new class extends Migration{public function up(){Schema::create('school_days',function(Blueprint $table){$table->id();$table->date('date');$table->foreignId('semester_id')->constrained('semesters');$table->enum('type',['study','exam','holiday']);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('school_days');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082841_create_subject_majors_table.php =====
return new class extends Migration{public function up(){Schema::create('subject_majors',function(Blueprint $table){$table->id();$table->foreignId('grade_id')->constrained('grades');$table->string('name');$table->string('code');$table->integer('success_rate');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('subject_majors');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082901_create_subjects_table.php =====
return new class extends Migration{public function up(){Schema::create('subjects',function(Blueprint $table){$table->id();$table->string('name');$table->foreignId('subject_major_id')->constrained('subject_majors');$table->string('code');$table->integer('full_mark');$table->integer('homework_percentage');$table->integer('oral_percentage');$table->integer('activity_percentage');$table->integer('quiz_percentage');$table->integer('exam_percentage');$table->integer('num_class_period');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083004_create_teacher_section_subject.php =====
return new class extends Migration{public function up(){Schema::create('teacher_section_subjects',function(Blueprint $table){$table->id();$table->foreignId('teacher_id')->constrained('teachers');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('section_id')->constrained('sections');$table->boolean('is_active');$table->integer('num_class_period');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('teacher_section_subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083159_create_student_enrollment_table.php =====
return new class extends Migration{public function up(){Schema::create('student_enrollments',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('section_id')->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('semester_id')->constrained('semesters');$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['student_id','semester_id']);});}public function down(){Schema::dropIfExists('student_enrollments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083240_create_grade_year_settings_table.php =====
return new class extends Migration{public function up(){Schema::create('grade_year_settings',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->integer('max_failed_subjects');$table->integer('help_marks');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('grade_year_settings');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083403_create_school_shifts_table.php =====
return new class extends Migration{public function up(){Schema::create('school_shifts',function(Blueprint $table){$table->id();$table->string('name')->unique();$table->time('start_time');$table->time('end_time');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('school_shifts');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083434_create_time_tables_table.php =====
return new class extends Migration{public function up(){Schema::create('timetables',function(Blueprint $table){$table->id();$table->date('valid_from');$table->date('valid_to');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('timetables');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083512_create_class_periods_table.php =====
return new class extends Migration{public function up(){Schema::create('class_periods',function(Blueprint $table){$table->id();$table->string('name');$table->time('start_time');$table->time('end_time');$table->foreignId('work_shift_id')->constrained('school_shifts');$table->integer('period_order');$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->unique(['work_shift_id','period_order']);});}public function down(){Schema::dropIfExists('class_periods');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083537_create_class_period_targets_table.php =====
return new class extends Migration{public function up(){Schema::create('class_period_targets',function(Blueprint $table){$table->id();$table->foreignId('class_period_id')->constrained('class_periods');$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();});}public function down(){Schema::dropIfExists('class_period_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083613_create_schedules_table.php =====
return new class extends Migration{public function up(){Schema::create('schedules',function(Blueprint $table){$table->id();$table->foreignId('class_period_id')->constrained('class_periods');$table->foreignId('teacher_section_subject_id')->constrained('teacher_section_subjects');$table->foreignId('timetable_id')->constrained('timetables');$table->integer('week_day');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('schedules');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083642_create_assignments_table.php =====
return new class extends Migration{public function up(){Schema::create('assignments',function(Blueprint $table){$table->id();$table->foreignId('schedules_id')->constrained('schedules');$table->foreignId('school_day_id')->constrained('school_days');$table->enum('type',['homework','oral']);$table->string('title');$table->text('description');$table->string('photo');$table->foreignId('subject_id')->constrained('subjects');$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['school_day_id','subject_id']);});}public function down(){Schema::dropIfExists('assignments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083659_create_student_marks_table.php =====
return new class extends Migration{public function up(){Schema::create('student_marks',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('enrollment_id')->constrained('student_enrollments');$table->integer('homework')->nullable();$table->integer('oral')->nullable();$table->integer('activity')->nullable();$table->integer('quiz')->nullable();$table->integer('exam')->nullable();$table->integer('total')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['enrollment_id','subject_id']);});}public function down(){Schema::dropIfExists('student_marks');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083716_create_behavior_notes_table.php =====
return new class extends Migration{public function up(){Schema::create('behavior_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->enum('behavior_type',['positive','negative']);$table->string('note');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('behavior_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083736_create_study_notes_table.php =====
return new class extends Migration{public function up(){Schema::create('study_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->string('note');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('study_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083757_create_student_attendances_table.php =====
return new class extends Migration{public function up(){Schema::create('student_attendances',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('class_period_id')->nullable()->constrained('class_periods');$table->enum('status',['Excused absence','Unexcused absence','late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['student_id','school_day_id']);});}public function down(){Schema::dropIfExists('student_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083823_create_teacher_attendances_table.php =====
return new class extends Migration{public function up(){Schema::create('teacher_attendances',function(Blueprint $table){$table->id();$table->foreignId('class_period_id')->constrained('class_periods');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('teacher_id')->constrained('teachers');$table->enum('status',['Excused absence','Unexcused absence','late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('teacher_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083843_create_complaints_table.php =====
return new class extends Migration{public function up(){Schema::create('complaints',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('content');$table->text('answer')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('complaints');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083913_create_news_table.php =====
return new class extends Migration{public function up(){Schema::create('news',function(Blueprint $table){$table->id();$table->string('title');$table->json('content');$table->foreignId('school_day_id')->constrained('school_days');$table->string('photo')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('news');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083939_create_news_target_table.php =====
return new class extends Migration{public function up(){Schema::create('news_targets',function(Blueprint $table){$table->id();$table->foreignId('news_id')->constrained('news');$table->foreignId('grade_id')->nullable()->constrained('grades');$table->foreignId('section_id')->nullable()->constrained('sections');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('news_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083954_create_files_table.php =====
return new class extends Migration{public function up(){Schema::create('files',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->string('title');$table->text('description')->nullable();$table->unsignedBigInteger('size');$table->unsignedBigInteger('publish_date');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('files');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084008_create_file_target_table.php =====
return new class extends Migration{public function up(){Schema::create('file_targets',function(Blueprint $table){$table->id();$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('file_id')->constrained('files');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('file_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084028_create_file_downloads_table.php =====
return new class extends Migration{public function up(){Schema::create('file_downloads',function(Blueprint $table){$table->id();$table->foreignId('file_id')->constrained('files');$table->foreignId('user_id')->constrained('users');$table->timestamp('downloaded_at');$table->string('ip_address',45);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('file_downloads');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084126_create_messages_table.php =====
return new class extends Migration{public function up(){Schema::create('messages',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('message');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('messages');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084405_create_student_app_updates_table.php =====
return new class extends Migration{public function up(){Schema::create('student_app_updates',function(Blueprint $table){$table->id();$table->string('version');$table->string('platform');$table->string('url');$table->text('change_log')->nullable();$table->boolean('is_force_update');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('student_app_updates');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084429_create_teacher_app_updates_table.php =====
return new class extends Migration{public function up(){Schema::create('teacher_app_updates',function(Blueprint $table){$table->id();$table->string('version');$table->string('platform');$table->string('url');$table->text('change_log')->nullable();$table->boolean('is_force_update');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(){Schema::dropIfExists('teacher_app_updates');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_12_192306_create_quiz_targets_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quiz_targets',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained()->onDelete('cascade');$table->foreignId('subject_id')->constrained()->onDelete('cascade');$table->foreignId('section_id')->constrained()->onDelete('cascade');$table->foreignId('semester_id')->constrained()->onDelete('cascade');$table->timestamps();});}public function down(): void{Schema::dropIfExists('quiz_targets');}};

// === [Services] ===
// ===== C:\Development\Laravel\school\app\Services\AdminService.php =====
namespace App\Services;class AdminService{public function listAdmins(){if(!auth()->user()->hasPermissionTo('عرض المشرفين')){throw new PermissionException();}$admins = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','admin')->with(['admin'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($admins),);}}
// ===== C:\Development\Laravel\school\app\Services\AuthService.php =====
namespace App\Services;class AuthService{public function __construct(){}public function register($request){$admin = auth()->user();if(!$admin->hasPermissionTo('انشاء مستخدم')){throw new PermissionException();}$credentials = $request->validated();if($request->hasFile('image')){try{$image = $request->file('image');$imageName = $image->hashName();$imagePath = 'user_images/' . $imageName;if(!Storage::disk('public')->exists($imagePath)){$image->storeAs('user_images',$imageName,'public');}$credentials['image'] = $imagePath;}catch(\Exception $e){throw new ImageUploadFailed();}}else{$credentials['image'] = 'user_images/default.png';}$userTypeName = $credentials['user_type'];if($request->user_type !== 'student')$credentials['password'] = Hash::make($credentials['password']);$user = null;DB::transaction(function()use($admin,$credentials,$userTypeName){$user = User::create($credentials);match($userTypeName){'admin' => Admin::create([
'user_id' => $user->id,'created_by' => $admin->id,]),'teacher' => Teacher::create([
'user_id' => $user->id,'created_by' => $admin->id,]),'student' => Student::create([
'user_id' => $user->id,'created_by' => $admin->id,'grandfather'=> $credentials['grandfather'],'mother' => $credentials['mother'],'general_id' => $credentials['general_id'],'is_active' => $credentials['is_active']
])};});return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.created'),201,true);}public function login($request,$user_type){$credentials = $request->validated();$username = $credentials['user_name'];$expectedUserType = strtolower($user_type);if(!$expectedUserType){throw new MustPassUserTypeException();}if(!in_array($expectedUserType,['admin','teacher','student'])){throw new InvalidUserTypeException();}$prefixMap = [
'admin' => 'Adm_','teacher' => 'Tch_','student' => 'Std_',];$expectedPrefix = $prefixMap[$expectedUserType];if(!str_starts_with($username,$expectedPrefix)){throw new InvalidUserException(__('messages.auth.invalid_username_prefix'));}$idPart = str_replace($expectedPrefix,'',$username);if(!is_numeric($idPart)){throw new InvalidUserException(__('messages.auth.invalid_user_id'));}$userId =(int)$idPart;$user = User::find($userId);if(!$user){throw new UserNotFoundException();}if($user->user_type !== $expectedUserType){throw new InvalidUserTypeException();}if(!Hash::check($credentials['password'],$user->password)){throw new InvalidPasswordException();}$user->update(['last_login' => now()]);DB::beginTransaction();try{$device = Device_info::where('device_id',$credentials['device_id'])->first();if($device){$conflict =
$device->platform !== $credentials['platform'] ||
$device->type !== $credentials['device_type'] ||
$device->name !== $credentials['device_name'];if($conflict){throw new DeviceAlreadyExistsException();}$user->devices()->syncWithoutDetaching([$device->id]);}else{$device = Device_info::create([
'device_id' => $credentials['device_id'],'platform' => $credentials['platform'],'type' => $credentials['device_type'],'name' => $credentials['device_name'],]);$user->devices()->attach($device->id);}$accessToken = $user->createToken('access_token',['access']);$refreshToken = $user->createToken('refresh_token',['refresh']);$accessToken->accessToken->expires_at = now()->addMinutes(60);$accessToken->accessToken->device_id = $device->id;$accessToken->accessToken->save();$refreshToken->accessToken->expires_at = now()->addDays(30);$refreshToken->accessToken->device_id = $device->id;$refreshToken->accessToken->save();DB::commit();return ResponseHelper::jsonResponse([
'user' => new UserResource($user),'access_token' => $accessToken->plainTextToken,'refresh_token' => $refreshToken->plainTextToken,],__('messages.auth.login'));}catch(\Throwable $e){DB::rollBack();throw $e;}}public function refresh(Request $request){$refreshToken = $request->bearerToken();$token = PersonalAccessToken::findToken($refreshToken);if(!$token || !in_array('refresh',$token->abilities ?? [])){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),401,false);}$user = $token->tokenable;$deviceId = $token->device_id;$token->delete();$newAccessToken = $user->createToken('access_token',['access']);$newRefreshToken = $user->createToken('refresh_token',['refresh']);$newAccessToken->accessToken->expires_at = now()->addMinutes(60);$newAccessToken->accessToken->device_id = $deviceId;$newAccessToken->accessToken->save();$newRefreshToken->accessToken->expires_at = now()->addDays(30);$newRefreshToken->accessToken->device_id = $deviceId;$newRefreshToken->accessToken->save();return ResponseHelper::jsonResponse([
'new_access_token' => $newAccessToken->plainTextToken,'new_refresh_token' => $newRefreshToken->plainTextToken
],__('messages.auth.refresh'),200,true);}public function logout(Request $request){$token = $request->user()->currentAccessToken();$deviceId = $token->device_id;if($token->expires_at?->isPast()|!$token || !in_array('access',$token->abilities ?? [])){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),401,false);}$token->delete();$request->user()->tokens()->where('device_id',$deviceId)->whereJsonContains('abilities','refresh')->delete();return ResponseHelper::jsonResponse(null,__('messages.auth.logout'),200,true);}public function changePassword($request){$user = auth()->user();if(!$user->hasPermissionTo('change_password')){throw new PermissionException();}$credentials = $request->validated();if(!Hash::check($credentials['current_password'],$user->password)){return ResponseHelper::jsonResponse(null,__('messages.auth.invalid_password'),401,false);}$user->update([
'password' => Hash::make($credentials['new_password']),]);return ResponseHelper::jsonResponse(null,__('messages.auth.password_changed'),200,true);}public function forgotPassword($request){$request->validated();Password::sendResetLink($request->only('email'));return ResponseHelper::jsonResponse(null,__('messages.auth.reset_link_sent'),200,true);}public function resetPassword($request){$request->validated();$status = Password::reset($request->only('email','password','password_confirmation','token'),function($user,$password){$user->forceFill([
'password' => Hash::make($password),])->save();$user->tokens()->delete();});return $status === Password::PASSWORD_RESET
? ResponseHelper::jsonResponse(null,__('messages.auth.password_changed'),200,true): ResponseHelper::jsonResponse(null,__('messages.auth.invalid_token'),400,false);}}
// ===== C:\Development\Laravel\school\app\Services\GradeService.php =====
namespace App\Services;class GradeService{public function listGrade(){$grades = Grade::with([
'createdBy',])->orderBy('created_at','desc')->get();return ResponseHelper::jsonResponse(GradeResource::collection($grades));}public function createGrade(GradeRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$grade = Grade::create($credentials);return ResponseHelper::jsonResponse(new GradeResource($grade),__('messages.grade.created'),201,true);}public function showGrade(Grade $grade){$grade->load([
'createdBy',]);return ResponseHelper::jsonResponse(new GradeResource($grade),);}public function updateGrade($request,Grade $grade){$grade->update([
'title' => $request->title,]);$grade->load([
'createdBy',]);return ResponseHelper::jsonResponse(new GradeResource($grade),__('messages.grade.updated'),);}public function destroyGrade(Grade $grade){$grade->delete();return ResponseHelper::jsonResponse(null,__('messages.grade.deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\NewsService.php =====
namespace App\Services;class NewsService{public function getNews(){$user = auth()->user();if($user->role === 'student'){return $this->getStudentNews();}if($user->role === 'admin'){return $this->getAdminNews();}}public function getStudentNews(): JsonResponse{$student = auth()->user()->student;$enrollments = StudentEnrollment::where('student_id',$student->id)->whereHas('semester.year',function($query){$query->where('is_active',true);})->get();$sectionIds = $enrollments->pluck('section_id');$gradeId = $enrollments->pluck('grade_id')->unique();$news = News::whereHas('newsTargets',function($query)use($gradeId,$sectionIds){$query
->whereIn('section_id',$sectionIds)->orWhere('grade_id',$gradeId)->orWhere(function($q){$q->whereNull('section_id')->whereNull('grade_id');});})->orderBy('created_at','desc')->get();$uniqueNews = collect($news)->unique('id')->values();return ResponseHelper::jsonResponse(NewsResource::collection($uniqueNews));}public function getAdminNews(){$news = News::with('newsTargets.section','newsTargets.grade')->get();return ResponseHelper::jsonResponse(NewsResource::collection($news));}public function handlePhoto($request){$photoPath = null;if($request->hasFile('photo')){try{$image = $request->file('photo');$imageName = $image->hashName();$imagePath = 'news_images/' . $imageName;if(!Storage::disk('public')->exists($imagePath)){$image->storeAs('news_images',$imageName,'public');}$photoPath = $imagePath;}catch(\Exception $e){throw new ImageUploadFailed();}}return $photoPath;}public function createNews($request): NewsResource{$user = auth()->user();$data = $request->validated();$photoPath = $this->handlePhoto($request);$curDay = '2025-05-11';$schoolDay = SchoolDay::where('date',$curDay)->first();$content = $data['content'];$content = $this->handleContent($content);$news = News::create([
'title' => $data['title'],'content' => $content,'photo' => $photoPath,'school_day_id' => $schoolDay->id,'created_by' => $user->id,]);$this->handleNewsTargetsOnCreate($request,$news);return NewsResource::make($news);}public function updateNews($request,$news){$user = auth()->user();$data = $request->validated();$photoPath = $this->handlePhoto($request);$content = $this->handleContent($data['content']);$data['content'] = $content;if($request->filled('section_ids')){$this->updateSections($news,$request);}else if($request->filled('grade_ids')){$this->updateGrades($news,$request);}else{NewsTarget::where('news_id',$news->id)->delete();NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => null,'created_by' => $user->id,]);}if($photoPath){$data['photo'] = $photoPath;}$news->update($data);return ResponseHelper::jsonResponse(NewsResource::make($news),'news updated');}public function showNews(News $news){return ResponseHelper::jsonResponse(NewsResource::make($news));}public function deleteNews($news){$data = clone $news;NewsTarget::where('news_id',$news->id)->delete();$news->delete();return ResponseHelper::jsonResponse(NewsResource::make($data),'news deleted');}public function handleContent(mixed $content): mixed{if(is_string($content)){$decodedContent = json_decode($content,true);if(json_last_error()!== JSON_ERROR_NONE){throw new \InvalidArgumentException('Invalid JSON content provided');}if(!isset($decodedContent['ops'])|| !is_array($decodedContent['ops'])){throw new \InvalidArgumentException('Content must have ops array structure');}}return $content;}public function handleNewsTargetsOnCreate($request,$news): void{$user = auth()->user();if($request->filled('section_ids')){foreach($request->section_ids as $section_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => $section_id,'created_by' => $user->id,]);}}else if($request->filled('grade_ids')){foreach($request->grade_ids as $grade_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => $grade_id,'section_id' => null,'created_by' => $user->id,]);}}else{NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => null,'created_by' => $user->id,]);}}public function updateSections($news,$request): void{$user = auth()->user();NewsTarget::where('news_id',$news->id)->whereNotNull('grade_id')->delete();NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNull('grade_id')->delete();$existingSections = NewsTarget::where('news_id',$news->id)->whereNotNull('section_id')->whereNull('grade_id')->pluck('section_id')->toArray();$sectionsToDelete = array_diff($existingSections,$request->section_ids);$sectionsToAdd = array_diff($request->section_ids,$existingSections);NewsTarget::where('news_id',$news->id)->whereIn('section_id',$sectionsToDelete)->whereNull('grade_id')->delete();foreach($sectionsToAdd as $section_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => null,'section_id' => $section_id,'created_by' => $user->id,]);}}public function updateGrades($news,$request): void{$user = auth()->user();NewsTarget::where('news_id',$news->id)->whereNotNull('section_id')->delete();NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNull('grade_id')->delete();$existingGrades = NewsTarget::where('news_id',$news->id)->whereNull('section_id')->whereNotNull('grade_id')->pluck('grade_id')->toArray();$gradesToDelete = array_diff($existingGrades,$request->grade_ids);$gradesToAdd = array_diff($request->grade_ids,$existingGrades);NewsTarget::where('news_id',$news->id)->whereIn('grade_id',$gradesToDelete)->whereNull('section_id')->delete();foreach($gradesToAdd as $grade_id){NewsTarget::create([
'news_id' => $news->id,'grade_id' => $grade_id,'section_id' => null,'created_by' => $user->id,]);}}}
// ===== C:\Development\Laravel\school\app\Services\QuestionService.php =====
namespace App\Services;class QuestionService{private function handleImageUpload($request,string $fieldName,string $folder): ?string{if(!$request->hasFile($fieldName)){if($fieldName == 'question_photo')return 'question_images/default.png';else
return 'hint_images/default.png';}try{$file = $request->file($fieldName);$hash = md5_file($file->getRealPath());$extension = $file->getClientOriginalExtension();$filename = "{$folder}/{$hash}.{$extension}";if(!Storage::disk('public')->exists($filename)){Storage::disk('public')->putFileAs($folder,$file,"{$hash}.{$extension}");}return $filename;}catch(\Exception $e){throw new ImageUploadFailed();}}private function normalizeDeltaToPlainText($delta){if(is_string($delta)){$decoded = json_decode($delta,true);}elseif(is_array($delta)){$decoded = $delta;}else{return '';}$ops = $decoded['ops'] ?? [];$plainText = '';foreach($ops as $op){if(isset($op['insert'])){$plainText .= $op['insert'];}}$plainText = strtolower($plainText);$plainText = preg_replace('/\s+/','',$plainText);return trim($plainText);}public function create($request,$quiz_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$credentials = $request->validated();$plainText = $this->normalizeDeltaToPlainText($request->input('question_text'));$existingQuestion = Question::where('quiz_id',$quiz_id)->whereRaw("LOWER(question_text_plain)= ?",[strtolower($plainText)])->first();if($existingQuestion || empty($plainText)){throw new QuestionAlreadyExistsException();}$credentials['quiz_id'] = $quiz_id;$credentials['question_text_plain'] = $plainText;$credentials['question_photo'] = $this->handleImageUpload($request,'question_photo','question_images');$credentials['hint_photo'] = $this->handleImageUpload($request,'hint_photo','hint_images');if($credentials['right_choice'] >= $credentials['choices_count']){return ResponseHelper::jsonResponse(null,__('messages.question.invalid_right_choice'),400,false);}Question::create($credentials);return ResponseHelper::jsonResponse(null,__('messages.question.created'),);}public function update($request,$quiz_id,$question_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعديل سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz){throw new QuizNotFoundException();}$question = Question::where('id',$question_id)->where('quiz_id',$quiz_id)->first();if(!$question){throw new QuestionNotFoundException();}$credentials = $request->validated();if(array_key_exists('question_text',$credentials)){$plain = $this->normalizeDeltaToPlainText($credentials['question_text']);if(empty($plain)){throw new InvalidQuestionTextException();}$credentials['question_text_plain'] = $plain;}if($request->hasFile('question_photo')){if($question->question_photo && $question->question_photo !== 'question_images/default.png'){Storage::disk('public')->delete($question->question_photo);}$credentials['question_photo'] = $this->handleImageUpload($request,'question_photo','question_images');}if($request->hasFile('hint_photo')){if($question->hint_photo && $question->hint_photo !== 'hint_images/default.png'){Storage::disk('public')->delete($question->hint_photo);}$credentials['hint_photo'] = $this->handleImageUpload($request,'hint_photo','hint_images');}if($credentials['right_choice'] >= $credentials['choices_count']){return ResponseHelper::jsonResponse(null,__('messages.question.invalid_right_choice'),400,false);}$question->update($credentials);return ResponseHelper::jsonResponse([],__('messages.question.updated'),201);}public function delete(int $quiz_id,int $question_id){$user = auth()->user();$quiz = Quiz::find($quiz_id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('حذف سؤال'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$question = Question::where('id',$question_id)->where('quiz_id',$quiz_id)->first();if(!$question){throw new QuestionNotFoundException();}if($question->question_photo && $question->question_photo !== 'question_images/default.png'){Storage::disk('public')->delete($question->question_photo);}if($question->hint_photo && $question->hint_photo !== 'hint_images/default.png'){Storage::disk('public')->delete($question->hint_photo);}$question->delete();return ResponseHelper::jsonResponse(null,__('messages.question.deleted'),200);}}
// ===== C:\Development\Laravel\school\app\Services\QuizService.php =====
namespace App\Services;class QuizService{public function listQuizzes($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('عرض الاختبارات المؤتمتة'))){throw new PermissionException();}$credentials = $request->validated();$query = Quiz::withCount('questions')->with(['targets.subject','targets.section.grade','targets.semester'])->where('created_by',$user->id);if(isset($credentials['grade_id'])){$query->whereHas('targets.section.grade',fn($q)=> $q->where('id',$credentials['grade_id']));}if(isset($credentials['section_id'])){$query->whereHas('targets',fn($q)=> $q->where('section_id',$credentials['section_id']));}$quizzes = $query->get();return ResponseHelper::jsonResponse(QuizResource::collection($quizzes),__('messages.quiz.listed'));}public function showQuiz($id){$user = auth()->user();$quiz = Quiz::with([
'questions','targets.subject','targets.section.grade','targets.semester',])->find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('عرض الاختبار المؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}return ResponseHelper::jsonResponse(new DetailedQuizResource($quiz),__('messages.quiz.fetched'));}public function create($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء اختبار مؤتمت'))){throw new PermissionException();}$credentials = $request->validated();DB::beginTransaction();try{$quiz = Quiz::create([
'name' => $credentials['name'],'created_by' => $user->id,]);foreach($credentials['targets'] as $target){QuizTarget::create([
'quiz_id' => $quiz->id,'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);}DB::commit();return ResponseHelper::jsonResponse(null,__('messages.quiz.created'),201);}catch(\Throwable $e){DB::rollBack();throw $e;}}public function activate($id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تفعيل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if($quiz->is_active){return ResponseHelper::jsonResponse(null,__("messages.quiz.already_active"),422,false);}$quiz->update([
'is_active' => 1,'taken_at' => now(),]);return ResponseHelper::jsonResponse(null,__("messages.quiz.activated"));}public function deactivate(int $id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعطيل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz->is_active){return ResponseHelper::jsonResponse(null,__("messages.quiz.already_inactive"),422,false);}$quiz->update([
'is_active' => false
]);return ResponseHelper::jsonResponse(null,__("messages.quiz.deactivated"));}public function update($request,$id){$user = auth()->user();$quiz = Quiz::find($id);if(!$quiz){throw new QuizNotFoundException();}if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('تعديل اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}$credentials = $request->validated();DB::beginTransaction();try{$quiz->update([
'name' => $credentials['name'],]);$existingIds = [];foreach($credentials['targets'] as $target){if(isset($target['id'])){$quizTarget = QuizTarget::where('id',$target['id'])->where('quiz_id',$quiz->id)->first();if($quizTarget){$quizTarget->update([
'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);$existingIds[] = $quizTarget->id;}}else{$new = $quiz->targets()->create([
'subject_id' => $target['subject_id'],'section_id' => $target['section_id'],'semester_id' => $target['semester_id'],]);$existingIds[] = $new->id;}}$quiz->targets()->whereNotIn('id',$existingIds)->delete();DB::commit();return ResponseHelper::jsonResponse(null,__("messages.quiz.updated"),201);}catch(\Throwable $e){DB::rollBack();throw $e;}}public function destroy($id){$user = auth()->user();$quiz = Quiz::with('questions','targets')->find($id);if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('حذف اختبار مؤتمت'))|| $quiz->created_by !== $user->id){throw new PermissionException();}if(!$quiz){throw new QuizNotFoundException();}$quiz->delete();return ResponseHelper::jsonResponse(null,__("messages.quiz.deleted"));}}
// ===== C:\Development\Laravel\school\app\Services\RoleService.php =====
namespace App\Services;class RoleService{public function create($request){$user = auth()->user();if($user->hasPermissionTo('انشاء دور')){throw new PermissionException();}$credentials = $request->validated();try{DB::beginTransaction();$role = Role::create([
'name' => $credentials['name'],'guard_name' => 'api',]);if(!empty($credentials['permissions'])){$role->syncPermissions($credentials['permissions']);}DB::commit();return ResponseHelper::jsonResponse(null,__('messages.role.created'),201);}catch(\Exception $e){DB::rollBack();}}}
// ===== C:\Development\Laravel\school\app\Services\SchoolDayService.php =====
namespace App\Services;class SchoolDayService{public function listSchoolDay(Semester $semester){$schoolDays = $semester->schoolDays;return ResponseHelper::jsonResponse(SchoolDayResource::collection($schoolDays));}public function createSchoolDay(SchoolDayRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$schoolDay = SchoolDay::create($credentials);return ResponseHelper::jsonResponse(new SchoolDayResource($schoolDay),__('messages.school_day.created'),201,true);}public function updateSchoolDay($request,SchoolDay $schoolDay){$schoolDay->update([
'date' => $request->date,'semester_id' => $request->semester_id,'type' => $request->type,]);$schoolDay->load(['createdBy','semester']);return ResponseHelper::jsonResponse(new SchoolDayResource($schoolDay),__('messages.school_day.updated'),);}public function destroySchoolDay(SchoolDay $schoolDay){if($schoolDay->assignments()->exists()||
$schoolDay->behaviorNotes()->exists()||
$schoolDay->studyNotes()->exists()||
$schoolDay->studentAttendances()->exists()||
$schoolDay->teacherAttendances()->exists()){return response()->json([
'message' => 'Cannot delete school day with existing related data'
],400);}$schoolDay->delete();return ResponseHelper::jsonResponse(null,__('messages.school_day.deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\ScoreQuizService.php =====
namespace App\Services;class ScoreQuizService{public function create($request){$user = auth()->user();if($user->user_type !== 'teacher' && !($user->user_type === 'admin' && $user->hasPermissionTo('انشاء نتيجة اختبار مؤتمت'))){throw new PermissionException();}$student_id = auth()->user()->student->id;if(!$student_id){throw new StudentNotFoundException();}$credentials = $request->validated();$credentials['student_id'] = $student_id;$existing = ScoreQuiz::where('quiz_id',$credentials['quiz_id'])->where('student_id',$student_id)->first();if($existing){throw new QuizAlreadySubmittedException();}if($credentials['score'] > $credentials['full_score']){ResponseHelper::jsonResponse([
null,__('messages.quiz.score_must_not_exceed{$credentials->full_score}.'),400,false
]);}ScoreQuiz::create($credentials);return ResponseHelper::jsonResponse(null,__('messages.quiz.score_created'),200);}}
// ===== C:\Development\Laravel\school\app\Services\SectionService.php =====
namespace App\Services;class SectionService{public function listSection(){$sections = Section::with(['createdBy','grade'])->orderBy('title','asc')->get();return ResponseHelper::jsonResponse(SectionResource::collection($sections));}public function createSection(SectionRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$section = Section::create($credentials);$section->load(['createdBy','grade']);return ResponseHelper::jsonResponse(new SectionResource($section),__('messages.section.created'),201,true);}public function showSection(Section $section){$section->load([
'createdBy','grade',]);return ResponseHelper::jsonResponse(new SectionResource($section),);}public function updateSection(SectionRequest $request,Section $section){$section->update($request->validated());$section->load(['createdBy','grade']);return ResponseHelper::jsonResponse(new SectionResource($section),__('messages.section.updated'),);}public function destroySection(Section $section){$section->delete();return ResponseHelper::jsonResponse(null,__('messages.section.deleted'),);}}
// ===== C:\Development\Laravel\school\app\Services\SemesterService.php =====
namespace App\Services;class SemesterService{public function createSemester(SemesterRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$semester = Semester::create($credentials);return ResponseHelper::jsonResponse(new SemesterResource($semester),__('messages.semester.created'),201,true);}public function updateSemester($request,$semester){$semester->update([
'name' => $request->name,'start_date' => $request->start_date,'end_date' => $request->end_date,'is_active' => $request->is_active ?? $semester->is_active,]);$semester->load(['createdBy']);return ResponseHelper::jsonResponse(new SemesterResource($semester),__('messages.semester.updated'),);}public function destroySemester(Semester $semester){if($semester->schoolDays()->exists()){return response()->json([
'message' => 'Cannot delete semester with existing school days'
],400);}$semester->delete();return ResponseHelper::jsonResponse(null,__('messages.semester.deleted'),);}public function ActiveSemester(Semester $semester){$activeYears = Year::where('is_active',true)->get();foreach($activeYears as $activeYear){$activeYear->update(['is_active' => false]);}$year = $semester->year();$year->update(['is_active' => true]);$activeSemesters = Semester::where('is_active',true)->get();foreach($activeSemesters as $activeSemester){$activeSemester->update(['is_active' => false]);}$semester->update(['is_active' => true]);return ResponseHelper::jsonResponse(new SemesterResource($semester),);}}
// ===== C:\Development\Laravel\school\app\Services\StudentService.php =====
namespace App\Services;class StudentService{public function listStudents(){if(!auth()->user()->hasPermissionTo('عرض الطلاب')){throw new PermissionException();}$students = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','student')->with(['devices','student'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($students),);}}
// ===== C:\Development\Laravel\school\app\Services\TeacherService.php =====
namespace App\Services;class TeacherService{public function listTeachers(){if(!auth()->user()->hasPermissionTo('عرض الاساتذة')){throw new PermissionException();}$teachers = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->where('user_type','teacher')->with(['teacher'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($teachers),);}}
// ===== C:\Development\Laravel\school\app\Services\UserService.php =====
namespace App\Services;class UserService{public function __construct(){}public function getUser($id){$user = User::select([
'id','first_name','father_name','last_name','email','user_type','birth_date','gender','phone','image','last_login'
])->with('devices')->find($id);if(!$user){throw new UserNotFoundException();}match($user->user_type){'admin' => $user->load('admin.createdBy'),'teacher' => $user->load('teacher.createdBy'),'student' => $user->load('student.createdBy'),};return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.get'));}public function updateUser($request,$id){$admin = auth()->user();if(!$admin->hasPermissionTo('تعديل مستخدم')){throw new PermissionException();}$user = User::select([
'id','first_name','father_name','last_name','email','user_type','birth_date','gender','phone','image'
])->find($id);if(!$user){throw new UserNotFoundException();}$credentials = $request->validated();if($request->hasFile('image')){try{if($user->image && $user->image !== 'user_images/default.png'){Storage::disk('public')->delete($user->image);}$credentials['image'] = $request->file('image')->store('user_images','public');$user->image = $credentials['image'];$user->save();}catch(\Exception $e){throw new ImageUploadFailed();}}DB::transaction(function()use($user,$credentials){$user->update($credentials);match($user->user_type){'admin' => $user->admin->touch(),'teacher' => $user->teacher->touch(),'student' => $user->student->update([
'updated_at' => now(),'grandfather' => $credentials['grandfather'] ?? $user->student->grandfather,'general_id' => $credentials['general_id'] ?? $user->student->general_id,'is_active' => $credentials['is_active'] ?? $user->student->is_active,])};});return ResponseHelper::jsonResponse(new UserResource($user),__('messages.user.updated'),201,true);}public function deleteUser(int $id){$admin = auth()->user();if(!$admin->hasPermissionTo('حذف مستخدم')){throw new PermissionException();}$user = User::find($id);if(!$user){throw new UserNotFoundException();}DB::transaction(function()use($user){match($user->user_type){'admin' => $user->admin?->delete(),'teacher' => $user->teacher?->delete(),'student' => $user->student?->delete()};if($user->image !== 'user_images/default.png'){Storage::disk('public')->delete($user->image);}$user->delete();});return ResponseHelper::jsonResponse(null,__('messages.user.deleted'),200,true);}public function listAdminsAndTeachers(){if(!auth()->user()->hasPermissionTo('عرض المشرفين و الاساتذة')){throw new PermissionException();}$users = User::select('id','first_name','father_name','last_name','gender','birth_date','email','phone','user_type','image')->whereIn('user_type',['admin','teacher'])->with(['admin','teacher'])->orderBy('id','asc')->paginate(15);return ResponseHelper::jsonResponse(UserResource::collection($users),__('messages.user.list_admins_and_teachers'),);}}
// ===== C:\Development\Laravel\school\app\Services\YearService.php =====
namespace App\Services;class YearService{public function listYear(){$years = Year::with(['createdBy','semesters'])->orderBy('start_date','desc')->get();return ResponseHelper::jsonResponse(YearResource::collection($years));}public function createYear(YearRequest $request){$admin = auth()->user();$credentials = $request->validated();$credentials['created_by'] = $admin->id;$year = Year::create($credentials);return ResponseHelper::jsonResponse(new YearResource($year),__('messages.year.created'),201,true);}public function showYear(Year $year){$year->load(['createdBy','semesters.schoolDays','settingGradeYears.grade']);return ResponseHelper::jsonResponse(new YearResource($year),);}public function updateYear($request,Year $year){$year->update([
'name' => $request->name,'start_date' => $request->start_date,'end_date' => $request->end_date,'is_active' => $request->is_active ?? $year->is_active,]);$year->load(['createdBy','semesters']);return ResponseHelper::jsonResponse(new YearResource($year),__('messages.year.updated'),);}public function destroyYear(Year $year){if($year->semesters()->exists()){return response()->json([
'message' => 'Cannot delete year with existing semesters'
],Response::HTTP_CONFLICT);}$year->delete();return ResponseHelper::jsonResponse(null,__('messages.year.deleted'),);}public function ActiveYear(Year $year){$activeYears = Year::where('is_active',true)->get();foreach($activeYears as $activeYear){$activeYear->update(['is_active' => false]);}$year->update(['is_active' => true]);return ResponseHelper::jsonResponse(new YearResource($year),);}}

// === [Routes] ===
// ===== C:\Development\Laravel\school\routes\api.php =====
Route::prefix('auth')->name('auth.')->group(function(){Route::post('login',[AuthController::class,'login'])->name('login')->middleware('throttle:10,1');Route::post('forgot-password',[AuthController::class,'forgotPassword'])->name('forgot-password')->middleware('throttle:5,1');Route::post('reset-password',[AuthController::class,'resetPassword'])->name('reset-password')->middleware('throttle:5,1');Route::middleware(['auth:api'])->group(function(){Route::post('refresh',[AuthController::class,'refresh'])->name('refresh');Route::post('logout',[AuthController::class,'logout'])->name('logout');});});Route::middleware('auth:api')->group(function(){Route::post('register',[AuthController::class,'register']);Route::get('admins',[AdminController::class,'show']);Route::get('teachers',[TeacherController::class,'show']);Route::get('students',[StudentController::class,'show']);Route::get('staff',[UserController::class,'getStaff']);Route::resource('users',UserController::class)->only(['show','destroy']);Route::post('users/{user}',[UserController::class,'update']);Route::resource('roles',RoleController::class);})->middleware(['user_type:admin','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('change-password',[AuthController::class,'changePassword'])->name('change-password');})->middleware(['user_type:admin|teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::apiResource('quizzes',QuizController::class);Route::put('quizzes/{id}/activate',[QuizController::class,'activate']);Route::put('quizzes/{id}/deactivate',[QuizController::class,'deactivate']);Route::post('quizzes/{quiz_id}/questions',[QuestionController::class,'create']);Route::post('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'update']);Route::delete('quizzes/{quiz_id}/questions/{question_id}',[QuestionController::class,'destroy']);Route::get('quizzes',[QuizController::class,'index']);Route::get('quiz/{id}',[QuizController::class,'show']);})->middleware(['user_type:teacher','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::post('score-quizzes',[ScoreQuizController::class,'create']);})->middleware(['user_type:student','throttle:5,1']);Route::middleware('auth:api')->group(function(){Route::prefix('years')->group(function(){Route::get('/',[YearController::class,'index']);Route::post('/',[YearController::class,'store']);Route::get('/{year}',[YearController::class,'show']);Route::put('/{year}',[YearController::class,'update']);Route::delete('/{year}',[YearController::class,'destroy']);Route::patch('/{year}/active',[YearController::class,'Active']);});Route::prefix('semesters')->group(function(){Route::post('/',[SemesterController::class,'store']);Route::put('/{semester}',[SemesterController::class,'update']);Route::delete('/{semester}',[SemesterController::class,'destroy']);Route::patch('/{semester}/active',[SemesterController::class,'Active']);});Route::prefix('school-days')->group(function(){Route::get('/{semester}',[SchoolDayController::class,'index']);Route::post('/',[SchoolDayController::class,'store']);Route::put('/{schoolDay}',[SchoolDayController::class,'update']);Route::delete('/{schoolDay}',[SchoolDayController::class,'destroy']);});Route::apiResource('grades',GradeController::class);Route::apiResource('sections',SectionController::class);});
// ===== C:\Development\Laravel\school\routes\console.php =====
Artisan::command('inspire',function(){$this->comment(Inspiring::quote());})->purpose('Display an inspiring quote');
// ===== C:\Development\Laravel\school\routes\news.php =====
Route::prefix('student/news')->middleware(['auth:api'])->group(function(){Route::get('/',[NewsController::class,'index'])->name('news.index');})->middleware(['role:student','throttle:5,1']);Route::prefix('admin/news')->controller(NewsController::class)->middleware('auth:api')->group(function(){Route::get('/','index');Route::post('/store','store');Route::get('/{news}','show');Route::delete('/{news}','destroy');Route::post('/{news}','update');})->middleware(['role:admin','throttle:5,1']);
// ===== C:\Development\Laravel\school\routes\web.php =====
Route::get('/reset-password/{token}',function($token){return 'Reset link: ' . $token;})->name('password.reset');
