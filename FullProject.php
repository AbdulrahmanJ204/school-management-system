// === FULL PROJECT COMPACT EXPORT ===

// === [Models] ===
// ===== C:\Development\Laravel\school\app\Models\ActivityLog.php =====
namespace App\Models;class ActivityLog extends Model{use HasFactory;protected $fillable = [
'user_id','user_type','action','table_name','record_id','changes','ip_address','user_agent',];protected $casts = [
'changes' => 'array',];public function user(): BelongsTo{return $this->belongsTo(User::class);}public static function getUserTypes(): array{return ['student','teacher','admin'];}public function scopeByUserType($query,$userType){return $query->where('user_type',$userType);}public function scopeByTable($query,$tableName){return $query->where('table_name',$tableName);}public function scopeByAction($query,$action){return $query->where('action',$action);}public function scopeByDateRange($query,$startDate,$endDate){return $query->whereBetween('created_at',[$startDate,$endDate]);}}
// ===== C:\Development\Laravel\school\app\Models\Admin.php =====
namespace App\Models;class Admin extends Model{protected $fillable = [
'user_id','created_by'
];public function user(){return $this->belongsTo(User::class,'user_id');}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\AppUpdate.php =====
namespace App\Models;class AppUpdate extends Model{}
// ===== C:\Development\Laravel\school\app\Models\Assignment.php =====
namespace App\Models;class Assignment extends Model{use SoftDeletes;protected $fillable = [
'assigned_session_id','due_session_id','type','title','description','photo','subject_id','section_id','created_by'
];public function assignedSession(): BelongsTo{return $this->belongsTo(ClassSession::class,'assigned_session_id');}public function dueSession(): BelongsTo{return $this->belongsTo(ClassSession::class,'due_session_id');}public function subject(): BelongsTo{return $this->belongsTo(Subject::class);}public function section(): BelongsTo{return $this->belongsTo(Section::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\BehaviorNote.php =====
namespace App\Models;class BehaviorNote extends Model{use SoftDeletes;protected $table = 'behavior_notes';protected $fillable = [
'student_id','school_day_id','behavior_type','note','created_by'
];protected $casts = [
'behavior_type' => 'string'
];public function student(): BelongsTo{return $this->belongsTo(Student::class,'student_id');}public function schoolDay(): BelongsTo{return $this->belongsTo(SchoolDay::class,'school_day_id');}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\ClassPeriod.php =====
namespace App\Models;class ClassPeriod extends Model{protected $fillable = [
'name','start_time','end_time','school_shift_id','period_order','type','created_by','duration_minutes'
];protected $casts = [
'type' => ClassPeriodType::class,];public function schoolShift(){return $this->belongsTo(SchoolShift::class);}public function schedules(){return $this->hasMany(Schedule::class);}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\ClassSession.php =====
namespace App\Models;class ClassSession extends Model{protected $fillable = [
'schedule_id','school_day_id','teacher_id','subject_id','section_id','class_period_id','status','total_students_count','present_students_count','created_by'
];protected $casts = [
'total_students_count' => 'integer','present_students_count' => 'integer'
];public function schedule(): BelongsTo{return $this->belongsTo(Schedule::class);}public function schoolDay(): BelongsTo{return $this->belongsTo(SchoolDay::class);}public function teacher(): BelongsTo{return $this->belongsTo(Teacher::class);}public function subject(): BelongsTo{return $this->belongsTo(Subject::class);}public function section(): BelongsTo{return $this->belongsTo(Section::class);}public function classPeriod(): BelongsTo{return $this->belongsTo(ClassPeriod::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function studentAttendances(): HasMany{return $this->hasMany(StudentAttendance::class);}public function assignments(): HasMany{return $this->hasMany(Assignment::class);}public function studyNotes(): HasMany{return $this->hasMany(StudyNote::class);}public function scopeToday($query){return $query->whereHas('schoolDay',function($q){$q->where('date',Carbon::today());});}public function scopeByStatus($query,$status){return $query->where('status',$status);}public function scopeForTeacher($query,$teacherId){return $query->where('teacher_id',$teacherId);}public function scopeForSection($query,$sectionId){return $query->where('section_id',$sectionId);}public function canBeStarted(): bool{return $this->status === 'scheduled' && 
$this->schoolDay->date->isToday();}}
// ===== C:\Development\Laravel\school\app\Models\Complaint.php =====
namespace App\Models;class Complaint extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'user_id','title','content','answer','created_by'
];public function user(): BelongsTo{return $this->belongsTo(User::class,'user_id');}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\DailyLogReport.php =====
namespace App\Models;class DailyLogReport extends Model{use HasFactory;protected $fillable = [
'report_date','total_logs','pdf_path','excel_path',];protected $casts = [
'report_date' => 'date',];public function scopeByDateRange($query,$startDate,$endDate){return $query->whereBetween('report_date',[$startDate,$endDate]);}public function scopeByDate($query,$date){return $query->where('report_date',$date);}public function hasPdfReport(): bool{return !empty($this->pdf_path)&& Storage::exists($this->pdf_path);}public function hasExcelReport(): bool{return !empty($this->excel_path)&& Storage::exists($this->excel_path);}public function getPdfFullPath(): ?string{return $this->pdf_path ? Storage::path($this->pdf_path): null;}public function getExcelFullPath(): ?string{return $this->excel_path ? Storage::path($this->excel_path): null;}}
// ===== C:\Development\Laravel\school\app\Models\Device_info.php =====
namespace App\Models;class Device_info extends Model{use HasFactory;protected $fillable = [
'brand','device','manufacturer','model','product','name','identifier','os_version','os_name',];public function users(){return $this->belongsToMany(User::class,'user_devices','device_id','user_id')->withTimestamps();}public function scopeForUserByIdentifier($query,$userId,$identifier){return $query->whereHas('users',function($q)use($userId){$q->where('user_id',$userId);})->where('identifier',$identifier);}}
// ===== C:\Development\Laravel\school\app\Models\ErrorLog.php =====
namespace App\Models;class ErrorLog extends Model{use HasFactory;protected $fillable = [
'user_id','code','file','line','message','trace','url','method','input','ip_address','user_agent',];protected $casts = [
'input' => 'array',];public function user(): BelongsTo{return $this->belongsTo(User::class);}public function scopeByCode($query,$code){return $query->where('code',$code);}public function scopeByFile($query,$file){return $query->where('file',$file);}public function scopeByDateRange($query,$startDate,$endDate){return $query->whereBetween('created_at',[$startDate,$endDate]);}public function scopeByMethod($query,$method){return $query->where('method',$method);}}
// ===== C:\Development\Laravel\school\app\Models\Exam.php =====
namespace App\Models;class Exam extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'school_day_id','grade_id','main_subject_id','created_by'
];public function schoolDay(): BelongsTo{return $this->belongsTo(SchoolDay::class,'school_day_id');}public function grade(): BelongsTo{return $this->belongsTo(Grade::class,'grade_id');}public function mainSubject(): BelongsTo{return $this->belongsTo(MainSubject::class,'main_subject_id');}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\File.php =====
namespace App\Models;class File extends Model{use SoftDeletes,NewsAndFilesScopes;protected $fillable = [
'subject_id','title','description','size','file','publish_date','type','created_by',];protected $casts = [
'publish_date' => 'datetime',];protected $with = ['targets'];public static function boot(): void{parent::boot();static::deleting(function($file){if(!$file->isForceDeleting()){$file->targets()->delete();}});static::forceDeleting(function($file){if(Storage::disk(FileStr::StorageDisk->value)->exists($file->file))Storage::disk(FileStr::StorageDisk->value)->delete($file->file);$file->allTargets()->forceDelete();});}public function subject(): BelongsTo{return $this->belongsTo(Subject::class);}public function targets(): HasMany{return $this->hasMany(FileTarget::class)->withTrashed()->where('deleted_at',$this->deleted_at);}public function allTargets(): HasMany{return $this->hasMany(FileTarget::class,'file_id')->withTrashed();}public function loadSectionAndGrade(): void{$this->load('targets.section.grade','targets.grade');}public function getDeleteSnapshot(): self{$clone = clone $this;$targets = $this->targets()->get();$clone->setRelation('targets',$targets);return $clone;}public function restoreWithTargets(): static{$targets = $this->targets()->get();$this->restore();$targets->each->restore();$this->setRelation('targets',$targets);return $this;}public function belongsToOneTeacher(): bool{$fileSections = $this->targets()->pluck('section_id')->toArray();$teacherSectionsIds = TeacherSectionSubject::where('teacher_id',auth()->user()->teacher->id)->where('is_active',true)->where('subject_id',$this->subject_id)->pluck('section_id')->toArray();return empty(array_diff($fileSections,$teacherSectionsIds));}public function loadTargets(): void{$this->setRelation('targets',$this->targets()->get());}protected function belongsToTeacher(Builder $query,$teacherId,$subjectID,$SectionId): void{$query->join('file_targets',function($join){$join->on('files.id','=','file_targets.file_id')->whereNull('file_targets.deleted_at');})->join('teacher_section_subjects as tss',function($join)use($SectionId,$subjectID,$teacherId){$join->on('tss.subject_id','=','files.subject_id')->on('tss.section_id','=','file_targets.section_id')->where('tss.teacher_id',$teacherId)->where('tss.is_active',true);if($subjectID)$join->where('tss.subject_id',$subjectID);if($SectionId)$join->where('tss.section_id',$SectionId);})->select('files.*')->distinct();}protected function forSubject(Builder $query,$subjectID): Builder{return $query->where('subject_id',$subjectID);}protected function forType(Builder $query,$type): Builder{return $query->where('type',$type);}}
// ===== C:\Development\Laravel\school\app\Models\FileDownload.php =====
namespace App\Models;class FileDownload extends Model{protected $fillable = [
'user_id','file_id','ip_address','downloaded_at',];public function user(): BelongsTo{return $this->belongsTo(User::class);}public function file(): BelongsTo{return $this->belongsTo(File::class);}}
// ===== C:\Development\Laravel\school\app\Models\FileTarget.php =====
namespace App\Models;class FileTarget extends Model{use SoftDeletes,TargetsScopes;protected $fillable = [
'section_id','grade_id','file_id','created_by'
];public function file():BelongsTo{return $this->belongsTo(File::class);}public function section():BelongsTo{return $this->belongsTo(Section::class);}public function grade():BelongsTo{return $this->belongsTo(Grade::class);}}
// ===== C:\Development\Laravel\school\app\Models\Grade.php =====
namespace App\Models;class Grade extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'title','year_id','created_by'
];protected $casts = [
'created_at' => 'datetime','updated_at' => 'datetime',];public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function sections(): HasMany{return $this->hasMany(Section::class);}public function mainSubjects(): HasMany{return $this->hasMany(MainSubject::class);}public function settingGradeYears(): HasMany{return $this->hasMany(GradeYearSetting::class);}public function schoolShiftTargets(): HasMany{return $this->hasMany(SchoolShiftTarget::class);}public function year(): BelongsTo{return $this->belongsTo(Year::class);}public function quizTargets(){return $this->hasMany(QuizTarget::class);}}
// ===== C:\Development\Laravel\school\app\Models\GradeYearSetting.php =====
namespace App\Models;class GradeYearSetting extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'year_id','max_failed_subjects','help_marks','grade_id','created_by'
];protected $casts = [
'max_failed_subjects' => 'integer','help_marks' => 'integer'
];public function year(): BelongsTo{return $this->belongsTo(Year::class);}public function grade(): BelongsTo{return $this->belongsTo(Grade::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\MainSubject.php =====
namespace App\Models;class MainSubject extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'grade_id','name','code','success_rate','created_by'
];protected $casts = [
'success_rate' => 'integer'
];public function grade(): BelongsTo{return $this->belongsTo(Grade::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function subjects(): HasMany{return $this->hasMany(Subject::class);}}
// ===== C:\Development\Laravel\school\app\Models\Message.php =====
namespace App\Models;class Message extends Model{use SoftDeletes,HasFactory;protected $table = 'messages';protected $fillable = [
'user_id','title','message','created_by'
];public function user(): BelongsTo{return $this->belongsTo(User::class,'user_id');}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\News.php =====
namespace App\Models;class News extends Model{use HasFactory,SoftDeletes,NewsAndFilesScopes;protected $fillable = ['title','content','publish_date','photo','created_at','updated_at','created_by'];protected $casts = [
'description' => 'json','publish_date' => 'datetime',];protected $with = [ 'targets'];protected static function boot(){parent::boot();static::deleting(function($news){if(!$news->isForceDeleting()){$news->targets()->delete();}});static::forceDeleting(function(News $news){if($news->photo){Storage::disk(NewsStr::StorageDisk->value)->delete($news->photo);}$news->allTargets()->forceDelete();});}public function getDeleteSnapshot(): self{$clone = clone $this;$this->loadTargets();return $clone;}public function targets(): HasMany{return $this->hasMany(NewsTarget::class,'news_id')->withTrashed()->where('deleted_at',$this->deleted_at);}public function allTargets(): HasMany{return $this->hasMany(NewsTarget::class,'news_id')->withTrashed();}public function restoreWithTargets(): static{$targets = $this->targets()->get();$this->restore();$targets->each->restore();$this->setRelation('targets',$targets);return $this;}public function loadTargets(): void{$this->setRelation('targets',$this->targets()->get());}}
// ===== C:\Development\Laravel\school\app\Models\NewsTarget.php =====
namespace App\Models;class NewsTarget extends Model{use SoftDeletes,HasFactory,TargetsScopes;protected $fillable = [
'news_id','grade_id','section_id','created_by'
];public function news(): BelongsTo{return $this->belongsTo(News::class,'news_id');}public function section(): BelongsTo{return $this->belongsTo(Section::class,'section_id');}public function grade(): BelongsTo{return $this->belongsTo(Grade::class,'grade_id');}}
// ===== C:\Development\Laravel\school\app\Models\Question.php =====
namespace App\Models;class Question extends Model{protected $fillable = ['quiz_id','question_text','question_photo','choices','right_choice','hint','hint_photo','order','question_text_plain','choices_count'];protected $casts = [
'question_text' => 'array','choices' => 'array',];public function quiz(){return $this->belongsTo(Quiz::class,'quiz_id');}}
// ===== C:\Development\Laravel\school\app\Models\Quiz.php =====
namespace App\Models;class Quiz extends Model{protected $fillable = ['name','created_by','is_active','taken_at','full_score','quiz_photo'];public function questions(){return $this->hasMany(Question::class);}public function scores(){return $this->hasMany(ScoreQuiz::class);}public function targets(){return $this->hasMany(QuizTarget::class);}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\QuizScore.php =====
namespace App\Models;class QuizScore extends Model{protected $fillable = [
'quiz_id','student_id','score','full_score'
];public function quiz(){return $this->belongsTo(Quiz::class);}public function student(){return $this->belongsTo(Student::class);}}
// ===== C:\Development\Laravel\school\app\Models\QuizTarget.php =====
namespace App\Models;class QuizTarget extends Model{use HasFactory;protected $fillable = [
'quiz_id','subject_id','section_id','semester_id','grade_id'
];public function quiz(){return $this->belongsTo(Quiz::class);}public function subject(){return $this->belongsTo(Subject::class);}public function section(){return $this->belongsTo(Section::class);}public function semester(){return $this->belongsTo(Semester::class);}public function grade(){return $this->belongsTo(Grade::class);}}
// ===== C:\Development\Laravel\school\app\Models\Schedule.php =====
namespace App\Models;class Schedule extends Model{protected $fillable = [
'class_period_id','teacher_section_subject_id','timetable_id','week_day','created_by'
];public function timetable(){return $this->belongsTo(Timetable::class);}public function classPeriod(){return $this->belongsTo(ClassPeriod::class);}public function teacherSectionSubject(){return $this->belongsTo(TeacherSectionSubject::class);}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\SchoolDay.php =====
namespace App\Models;class SchoolDay extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'date','semester_id','type','created_by'
];protected $casts = [
'date' => 'date'
];public function semester(): BelongsTo{return $this->belongsTo(Semester::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function assignments(): HasMany{return $this->hasMany(Assignment::class);}public function behaviorNotes(): HasMany{return $this->hasMany(BehaviorNote::class);}public function studyNotes(): HasMany{return $this->hasMany(StudyNote::class);}public function studentAttendances(): HasMany{return $this->hasMany(StudentAttendance::class);}public function teacherAttendances(): HasMany{return $this->hasMany(TeacherAttendance::class);}public function news(): HasMany{return $this->hasMany(News::class);}public function exams(): HasMany{return $this->hasMany(Exam::class);}public function scopeStudyDays($query){return $query->where('type','study');}public function scopeExamDays($query){return $query->where('type','exam');}}
// ===== C:\Development\Laravel\school\app\Models\SchoolShift.php =====
namespace App\Models;class SchoolShift extends Model{protected $fillable = [
'name','start_time','end_time','is_active','created_by'
];public function classPeriods(){return $this->hasMany(ClassPeriod::class);}public function targets(){return $this->hasMany(SchoolShiftTarget::class);}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\SchoolShiftTarget.php =====
namespace App\Models;class SchoolShiftTarget extends Model{protected $fillable = [
'school_shift_id','section_id','grade_id',];public function schoolShift(){return $this->belongsTo(SchoolShift::class);}public function grade(){return $this->belongsTo(Grade::class);}public function section(){return $this->belongsTo(Section::class);}}
// ===== C:\Development\Laravel\school\app\Models\ScoreQuiz.php =====
namespace App\Models;class ScoreQuiz extends Model{protected $table = 'score_quizzes';protected $fillable = ['quiz_id','student_id','score','taken_at'];public function quiz(){return $this->belongsTo(Quiz::class,'quiz_id');}public function student(){return $this->belongsTo(Student::class,'student_id');}}
// ===== C:\Development\Laravel\school\app\Models\Section.php =====
namespace App\Models;class Section extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'title','grade_id','created_by'
];protected $casts = [
'created_at' => 'datetime','updated_at' => 'datetime',];protected $with =['grade'];public function grade(): BelongsTo{return $this->belongsTo(Grade::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function studentEnrollments(): HasMany{return $this->hasMany(StudentEnrollment::class);}public function quizTargets(): HasMany{return $this->hasMany(QuizTarget::class);}public function schoolShiftTargets(): HasMany{return $this->hasMany(SchoolShiftTarget::class);}}
// ===== C:\Development\Laravel\school\app\Models\Semester.php =====
namespace App\Models;class Semester extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'year_id','name','start_date','end_date','is_active','created_by'
];protected $casts = [
'start_date' => 'date','end_date' => 'date','is_active' => 'boolean'
];public function year(): BelongsTo{return $this->belongsTo(Year::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function schoolDays(): HasMany{return $this->hasMany(SchoolDay::class);}public function studentEnrollments(): HasMany{return $this->hasMany(StudentEnrollment::class);}public function quizTargets(): HasMany{return $this->hasMany(QuizTarget::class);}}
// ===== C:\Development\Laravel\school\app\Models\Student.php =====
namespace App\Models;class Student extends Model{protected $table = 'students';protected $fillable = [
'user_id','grandfather','general_id','created_by','is_active','mother'
];public function user(){return $this->belongsTo(User::class,'user_id');}public function createdBy(){return $this->belongsTo(User::class,'created_by');}public function studentEnrollments(){return $this->hasMany(StudentEnrollment::class,'student_id');}public function yearEnrollments($yearId){return $this->studentEnrollments()->whereHas('semester.year',function($query)use($yearId){$query->where('id',$yearId);})->get();}public function studyNotes(): HasMany{return $this->hasMany(StudyNote::class,'student_id');}public function behaviorNotes(): HasMany{return $this->hasMany(BehaviorNote::class,'student_id');}}
// ===== C:\Development\Laravel\school\app\Models\StudentAttendance.php =====
namespace App\Models;class StudentAttendance extends Model{protected $fillable = [
'student_id','class_session_id','status','created_by'
];public function student(): BelongsTo{return $this->belongsTo(Student::class);}public function classSession(): BelongsTo{return $this->belongsTo(ClassSession::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\StudentEnrollment.php =====
namespace App\Models;class StudentEnrollment extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'student_id','grade_id','section_id','semester_id','year_id','created_by'
];public function student(): BelongsTo{return $this->belongsTo(Student::class);}public function section(): BelongsTo{return $this->belongsTo(Section::class);}public function semester(): BelongsTo{return $this->belongsTo(Semester::class);}public function year(): BelongsTo{return $this->belongsTo(Year::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function studentMarks(): HasMany{return $this->hasMany(StudentMark::class,'enrollment_id');}public function getGradeAttribute(){return $this->section->grade;}public function getYearAttribute(){return $this->semester->year;}public function getUserAttribute(){return $this->student->user;}public function scopeForSemester($query,$semesterId){return $query->where('semester_id',$semesterId);}public function scopeForSection($query,$sectionId){return $query->where('section_id',$sectionId);}public function scopeForGrade($query,$gradeId){return $query->whereHas('section',function($q)use($gradeId){$q->where('grade_id',$gradeId);});}}
// ===== C:\Development\Laravel\school\app\Models\StudentMark.php =====
namespace App\Models;class StudentMark extends Model{use HasFactory;protected $fillable = [
'subject_id','enrollment_id','homework','oral','activity','quiz','exam','total','created_by'
];protected $casts = [
'homework' => 'integer','oral' => 'integer','activity' => 'integer','quiz' => 'integer','exam' => 'integer','total' => 'integer'
];public function subject(): BelongsTo{return $this->belongsTo(Subject::class);}public function enrollment(): BelongsTo{return $this->belongsTo(StudentEnrollment::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function getStudentAttribute(){return $this->enrollment->student;}public function getSectionAttribute(){return $this->enrollment->section;}public function getSemesterAttribute(){return $this->enrollment->semester;}public function calculateTotal(): float|int{$subject = $this->subject;$total = 0;if($this->homework){$total +=($this->homework * $subject->homework_percentage)/ 100;}if($this->oral){$total +=($this->oral * $subject->oral_percentage)/ 100;}if($this->activity){$total +=($this->activity * $subject->activity_percentage)/ 100;}if($this->quiz){$total +=($this->quiz * $subject->quiz_percentage)/ 100;}if($this->exam){$total +=($this->exam * $subject->exam_percentage)/ 100;}return $total;}}
// ===== C:\Development\Laravel\school\app\Models\StudyNote.php =====
namespace App\Models;class StudyNote extends Model{use SoftDeletes;protected $table = 'study_notes';protected $fillable = [
'student_id','school_day_id','subject_id','note_type','note','marks','created_by'
];protected $casts = [
'marks' => 'integer','note_type' => NoteTypeEnum::class
];public function student(): BelongsTo{return $this->belongsTo(Student::class,'student_id');}public function schoolDay(): BelongsTo{return $this->belongsTo(SchoolDay::class,'school_day_id');}public function subject(): BelongsTo{return $this->belongsTo(Subject::class,'subject_id');}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\Subject.php =====
namespace App\Models;class Subject extends Model{use HasFactory,SoftDeletes;protected $fillable = [
'name','main_subject_id','code','full_mark','homework_percentage','oral_percentage','activity_percentage','quiz_percentage','exam_percentage','num_class_period','is_failed','created_by'
];protected $casts = [
'full_mark' => 'integer','homework_percentage' => 'integer','oral_percentage' => 'integer','activity_percentage' => 'integer','quiz_percentage' => 'integer','exam_percentage' => 'integer','num_class_period' => 'integer','is_failed' => 'boolean'
];public function mainSubject(): BelongsTo{return $this->belongsTo(MainSubject::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function teacherSectionSubjects(): HasMany{return $this->hasMany(TeacherSectionSubject::class);}public function quizTargets(): HasMany{return $this->hasMany(QuizTarget::class);}public function assignments(): HasMany{return $this->hasMany(Assignment::class);}public function studentMarks(): HasMany{return $this->hasMany(StudentMark::class);}public function studyNotes(): HasMany{return $this->hasMany(StudyNote::class);}public function files(): HasMany{return $this->hasMany(File::class);}public function getGrade(){return $this->mainSubject->grade;}public function TotalPercentage(){return $this->homework_percentage + $this->oral_percentage +
$this->activity_percentage + $this->quiz_percentage +
$this->exam_percentage;}}
// ===== C:\Development\Laravel\school\app\Models\Teacher.php =====
namespace App\Models;class Teacher extends Model{protected $fillable = [
'user_id','created_by'
];public function user(): BelongsTo{return $this->belongsTo(User::class,'user_id');}public function teacherSectionSubjects(): HasMany{return $this->hasMany(TeacherSectionSubject::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\TeacherAttendance.php =====
namespace App\Models;class TeacherAttendance extends Model{protected $fillable = [
'class_session_id','teacher_id','status','created_by'
];public function classSession(): BelongsTo{return $this->belongsTo(ClassSession::class);}public function teacher(): BelongsTo{return $this->belongsTo(Teacher::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\TeacherSectionSubject.php =====
namespace App\Models;class TeacherSectionSubject extends Model{use SoftDeletes;protected $table = 'teacher_section_subjects';protected $fillable = [
'teacher_id','grade_id','subject_id','section_id','is_active','num_class_period','created_by'
];protected $casts = [
'is_active' => 'boolean','num_class_period' => 'integer'
];public function teacher(): BelongsTo{return $this->belongsTo(Teacher::class,'teacher_id');}public function grade(): BelongsTo{return $this->belongsTo(Grade::class,'grade_id');}public function subject(): BelongsTo{return $this->belongsTo(Subject::class,'subject_id');}public function section(): BelongsTo{return $this->belongsTo(Section::class,'section_id');}public function schedules(): HasMany{return $this->hasMany(Schedule::class);}public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\TimeTable.php =====
namespace App\Models;class TimeTable extends Model{protected $fillable = [
'valid_from','valid_to','is_active','created_by',];protected $casts = [
'valid_from' => 'date','valid_to' => 'date','is_active' => 'boolean',];public function schedules(){return $this->hasMany(Schedule::class);}public function createdBy(){return $this->belongsTo(User::class,'created_by');}}
// ===== C:\Development\Laravel\school\app\Models\User.php =====
namespace App\Models;class User extends Authenticatable implements MustVerifyEmail{use HasRoles,HasApiTokens,HasFactory,Notifiable,LogsActivity;protected $fillable = [
'first_name','last_name','father_name','mother_name','birth_date','gender','email','user_name','password','phone','image','user_type','last_login',];protected $hidden = [
'password','remember_token',];protected $casts = [
'last_login' => 'datetime',];protected function casts(): array{return [
'email_verified_at' => 'datetime','password' => 'hashed',];}public function devices(){return $this->belongsToMany(Device_info::class,'user_devices','user_id','device_id')->withTimestamps()->withPivot('last_used_at');}public function admin(){return $this->hasOne(Admin::class,'user_id');}public function teacher(){return $this->hasOne(Teacher::class,'user_id');}public function student(){return $this->hasOne(Student::class,'user_id');}public function createdAdmins(){return $this->hasMany(Admin::class,'created_by_id');}public function createdTeachers(){return $this->hasMany(Teacher::class,'created_by_id');}public function createdStudents(){return $this->hasMany(Student::class,'created_by_id');}public function findOrCreateDevice(array $deviceData){$identifier = $deviceData['identifier'] ?? null;if(!$identifier){$device = Device_info::create($deviceData);$this->devices()->attach($device->id,['last_used_at' => now()]);return $device;}$existingDevice = Device_info::forUserByIdentifier($this->id,$identifier)->first();if($existingDevice){$existingDevice->update($deviceData);$this->devices()->updateExistingPivot($existingDevice->id,['last_used_at' => now()]);return $existingDevice;}$device = Device_info::create($deviceData);$this->devices()->attach($device->id,['last_used_at' => now()]);return $device;}public function getDevicesOrderedByLastUsed(){return $this->devices()->orderBy('last_used_at','desc')->get();}}
// ===== C:\Development\Laravel\school\app\Models\Year.php =====
namespace App\Models;class Year extends Model{use HasFactory,SoftDeletes;use LogsActivity;protected $fillable = [
'name','start_date','end_date','is_active','created_by'
];protected $casts = [
'start_date' => 'date','end_date' => 'date','is_active' => 'boolean'
];public function createdBy(): BelongsTo{return $this->belongsTo(User::class,'created_by');}public function semesters(): HasMany{return $this->hasMany(Semester::class);}public function settingGradeYears(): HasMany{return $this->hasMany(GradeYearSetting::class);}public function grades(): HasMany{return $this->hasMany(Grade::class);}public function studentEnrollments(): HasMany{return $this->hasMany(StudentEnrollment::class);}public function scopeActive($query){return $query->where('is_active',true);}}

// === [Migrations] ===
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000000_create_users_table.php =====
return new class extends Migration{public function up(): void{Schema::create('users',function(Blueprint $table){$table->id();$table->string('first_name');$table->string('father_name')->nullable();$table->string('last_name');$table->string('mother_name');$table->enum('gender',['male','female']);$table->date('birth_date')->nullable();$table->string('email')->unique()->nullable();$table->string('phone')->nullable();$table->string('password')->nullable();$table->enum('user_type',['admin','teacher','student'])->default('student');$table->timestamp('email_verified_at')->nullable();$table->string('email_verification_token',64)->nullable();$table->string('image')->nullable();$table->timestamp('last_login')->nullable();$table->rememberToken();$table->softDeletes();$table->timestamps();});Schema::create('password_reset_tokens',function(Blueprint $table){$table->string('email')->primary();$table->string('token');$table->timestamp('created_at')->nullable();});Schema::create('sessions',function(Blueprint $table){$table->string('id')->primary();$table->foreignId('user_id')->nullable()->index();$table->string('ip_address',45)->nullable();$table->text('user_agent')->nullable();$table->longText('payload');$table->integer('last_activity')->index();});}public function down(): void{Schema::dropIfExists('users');Schema::dropIfExists('password_reset_tokens');Schema::dropIfExists('sessions');}};
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000001_create_cache_table.php =====
return new class extends Migration{public function up(): void{Schema::create('cache',function(Blueprint $table){$table->string('key')->primary();$table->mediumText('value');$table->integer('expiration');});Schema::create('cache_locks',function(Blueprint $table){$table->string('key')->primary();$table->string('owner');$table->integer('expiration');});}public function down(): void{Schema::dropIfExists('cache');Schema::dropIfExists('cache_locks');}};
// ===== C:\Development\Laravel\school\database\migrations\0001_01_01_000002_create_jobs_table.php =====
return new class extends Migration{public function up(): void{Schema::create('jobs',function(Blueprint $table){$table->id();$table->string('queue')->index();$table->longText('payload');$table->unsignedTinyInteger('attempts');$table->unsignedInteger('reserved_at')->nullable();$table->unsignedInteger('available_at');$table->unsignedInteger('created_at');});Schema::create('job_batches',function(Blueprint $table){$table->string('id')->primary();$table->string('name');$table->integer('total_jobs');$table->integer('pending_jobs');$table->integer('failed_jobs');$table->longText('failed_job_ids');$table->mediumText('options')->nullable();$table->integer('cancelled_at')->nullable();$table->integer('created_at');$table->integer('finished_at')->nullable();});Schema::create('failed_jobs',function(Blueprint $table){$table->id();$table->string('uuid')->unique();$table->text('connection');$table->text('queue');$table->longText('payload');$table->longText('exception');$table->timestamp('failed_at')->useCurrent();});}public function down(): void{Schema::dropIfExists('jobs');Schema::dropIfExists('job_batches');Schema::dropIfExists('failed_jobs');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_01_15_000001_create_activity_logs_table.php =====
return new class extends Migration{public function up(): void{Schema::create('activity_logs',function(Blueprint $table){$table->id();$table->unsignedBigInteger('user_id')->nullable();$table->enum('user_type',['student','teacher','admin'])->nullable();$table->string('action',50);$table->string('table_name',100)->nullable();$table->unsignedBigInteger('record_id')->nullable();$table->json('changes')->nullable();$table->string('ip_address',45)->nullable();$table->text('user_agent')->nullable();$table->timestamps();$table->index(['user_id','user_type']);$table->index(['table_name','record_id']);$table->index('created_at');});}public function down(): void{Schema::dropIfExists('activity_logs');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_01_15_000002_create_daily_log_reports_table.php =====
return new class extends Migration{public function up(): void{Schema::create('daily_log_reports',function(Blueprint $table){$table->id();$table->date('report_date');$table->integer('total_logs')->default(0);$table->string('pdf_path')->nullable();$table->string('excel_path')->nullable();$table->timestamps();$table->unique('report_date');$table->index('created_at');});}public function down(): void{Schema::dropIfExists('daily_log_reports');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_01_15_000003_create_error_logs_table.php =====
return new class extends Migration{public function up(): void{Schema::create('error_logs',function(Blueprint $table){$table->id();$table->foreignId('user_id')->nullable()->constrained('users');$table->string('code')->nullable();$table->string('file')->nullable();$table->integer('line')->nullable();$table->text('message');$table->text('trace')->nullable();$table->string('url')->nullable();$table->string('method')->nullable();$table->json('input')->nullable();$table->string('ip_address',45)->nullable();$table->string('user_agent')->nullable();$table->timestamps();$table->index('code');$table->index('created_at');});}public function down(): void{Schema::dropIfExists('error_logs');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_05_13_142552_create_personal_access_tokens_table.php =====
return new class extends Migration{public function up(): void{Schema::create('personal_access_tokens',function(Blueprint $table){$table->id();$table->morphs('tokenable');$table->string('name');$table->string('token',64)->unique();$table->text('abilities')->nullable();$table->timestamp('last_used_at')->nullable();$table->timestamp('expires_at')->nullable();$table->unsignedBigInteger('device_id')->nullable();$table->timestamps();});}public function down(): void{Schema::dropIfExists('personal_access_tokens');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_05_14_171340_create_permission_tables.php =====
return new class extends Migration{public function up(): void{$teams = config('permission.teams');$tableNames = config('permission.table_names');$columnNames = config('permission.column_names');$pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';$pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';throw_if(empty($tableNames),new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));throw_if($teams && empty($columnNames['team_foreign_key'] ?? null),new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));Schema::create($tableNames['permissions'],static function(Blueprint $table){$table->bigIncrements('id');$table->string('name');$table->string('guard_name');$table->timestamps();$table->unique(['name','guard_name']);});Schema::create($tableNames['roles'],static function(Blueprint $table)use($teams,$columnNames){$table->bigIncrements('id');if($teams || config('permission.testing')){$table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();$table->index($columnNames['team_foreign_key'],'roles_team_foreign_key_index');}$table->string('name');$table->string('guard_name');$table->timestamps();if($teams || config('permission.testing')){$table->unique([$columnNames['team_foreign_key'],'name','guard_name']);}else{$table->unique(['name','guard_name']);}});Schema::create($tableNames['model_has_permissions'],static function(Blueprint $table)use($tableNames,$columnNames,$pivotPermission,$teams){$table->unsignedBigInteger($pivotPermission);$table->string('model_type');$table->unsignedBigInteger($columnNames['model_morph_key']);$table->index([$columnNames['model_morph_key'],'model_type'],'model_has_permissions_model_id_model_type_index');$table->foreign($pivotPermission)->references('id')->on($tableNames['permissions'])->onDelete('cascade');if($teams){$table->unsignedBigInteger($columnNames['team_foreign_key']);$table->index($columnNames['team_foreign_key'],'model_has_permissions_team_foreign_key_index');$table->primary([$columnNames['team_foreign_key'],$pivotPermission,$columnNames['model_morph_key'],'model_type'],'model_has_permissions_permission_model_type_primary');}else{$table->primary([$pivotPermission,$columnNames['model_morph_key'],'model_type'],'model_has_permissions_permission_model_type_primary');}});Schema::create($tableNames['model_has_roles'],static function(Blueprint $table)use($tableNames,$columnNames,$pivotRole,$teams){$table->unsignedBigInteger($pivotRole);$table->string('model_type');$table->unsignedBigInteger($columnNames['model_morph_key']);$table->index([$columnNames['model_morph_key'],'model_type'],'model_has_roles_model_id_model_type_index');$table->foreign($pivotRole)->references('id')->on($tableNames['roles'])->onDelete('cascade');if($teams){$table->unsignedBigInteger($columnNames['team_foreign_key']);$table->index($columnNames['team_foreign_key'],'model_has_roles_team_foreign_key_index');$table->primary([$columnNames['team_foreign_key'],$pivotRole,$columnNames['model_morph_key'],'model_type'],'model_has_roles_role_model_type_primary');}else{$table->primary([$pivotRole,$columnNames['model_morph_key'],'model_type'],'model_has_roles_role_model_type_primary');}});Schema::create($tableNames['role_has_permissions'],static function(Blueprint $table)use($tableNames,$pivotRole,$pivotPermission){$table->unsignedBigInteger($pivotPermission);$table->unsignedBigInteger($pivotRole);$table->foreign($pivotPermission)->references('id')->on($tableNames['permissions'])->onDelete('cascade');$table->foreign($pivotRole)->references('id')->on($tableNames['roles'])->onDelete('cascade');$table->primary([$pivotPermission,$pivotRole],'role_has_permissions_permission_id_role_id_primary');});app('cache')->store(config('permission.cache.store')!= 'default' ? config('permission.cache.store'): null)->forget(config('permission.cache.key'));}public function down(): void{$tableNames = config('permission.table_names');if(empty($tableNames)){throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding,or drop the tables manually.');}Schema::drop($tableNames['role_has_permissions']);Schema::drop($tableNames['model_has_roles']);Schema::drop($tableNames['model_has_permissions']);Schema::drop($tableNames['roles']);Schema::drop($tableNames['permissions']);}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_134423_create_device_infos_table.php =====
return new class extends Migration{public function up(): void{Schema::create('device_infos',function(Blueprint $table){$table->id();$table->string('brand')->nullable();$table->string('device')->nullable();$table->string('manufacturer')->nullable();$table->string('model')->nullable();$table->string('product')->nullable();$table->string('name')->nullable();$table->string('identifier')->nullable();$table->string('os_version')->nullable();$table->string('os_name')->nullable();$table->timestamps();});}public function down(): void{Schema::dropIfExists('device_infos');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_22_135022_create_user_devices_table.php =====
return new class extends Migration{public function up(): void{Schema::create('user_devices',function(Blueprint $table){$table->id();$table->foreignId('device_id')->constrained('device_infos')->cascadeOnDelete();$table->foreignId('user_id')->constrained('users')->cascadeOnDelete();$table->timestamps();$table->timestamp('last_used_at')->nullable();});}public function down(): void{Schema::dropIfExists('user_devices');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_100055_create_admins_table.php =====
return new class extends Migration{public function up(): void{Schema::create('admins',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('admins');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_111858_create_teachers_table.php =====
return new class extends Migration{public function up(): void{Schema::create('teachers',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('teachers');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_06_25_123212_create_students_table.php =====
return new class extends Migration{public function up(): void{Schema::create('students',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('grandfather');$table->unsignedBigInteger('general_id');$table->boolean('is_active')->default(true);$table->foreignId('created_by')->constrained('users');$table->timestamps();});}public function down(): void{Schema::dropIfExists('students');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123205_create_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quizzes',function(Blueprint $table){$table->id();$table->string('name');$table->timestamps();$table->date('taken_at')->nullable();$table->boolean('is_active')->default(false);$table->unsignedBigInteger('full_score');$table->string('quiz_photo')->nullable();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123447_create_questions_table.php =====
return new class extends Migration{public function up(): void{Schema::create('questions',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->json('question_text');$table->text('question_text_plain')->nullable();$table->string('question_photo')->nullable();$table->json('choices');$table->tinyinteger('choices_count');$table->tinyInteger('right_choice');$table->text('hint')->nullable();$table->string('hint_photo')->nullable();$table->integer('order')->default(0);$table->timestamps();});}public function down(): void{Schema::dropIfExists('questions');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_02_123838_create_score_quizzes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('score_quizzes',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained('quizzes');$table->foreignId('student_id')->constrained('students');$table->unsignedBigInteger('score');$table->timestamps();});}public function down(): void{Schema::dropIfExists('score_quizzes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082726_create_years_table.php =====
return new class extends Migration{public function up(): void{Schema::create('years',function(Blueprint $table){$table->id();$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->softDeletes();$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('years');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082800_create_semesters_table.php =====
return new class extends Migration{public function up(): void{Schema::create('semesters',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->string('name');$table->date('start_date');$table->date('end_date');$table->boolean('is_active')->default(0);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('semesters');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082817_create_school_days_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_days',function(Blueprint $table){$table->id();$table->date('date');$table->foreignId('semester_id')->constrained('semesters');$table->enum('type',['study','exam','holiday']);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('school_days');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082825_create_grades_table.php =====
return new class extends Migration{public function up(): void{Schema::create('grades',function(Blueprint $table){$table->id();$table->string('title');$table->foreignId('year_id')->constrained('years');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('grades');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082835_create_sections_table.php =====
return new class extends Migration{public function up(): void{Schema::create('sections',function(Blueprint $table){$table->id();$table->string('title');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('sections');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082841_create_main_subjects_table.php =====
return new class extends Migration{public function up(): void{Schema::create('main_subjects',function(Blueprint $table){$table->id();$table->foreignId('grade_id')->constrained('grades');$table->string('name');$table->string('code');$table->integer('success_rate');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('main_subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_082901_create_subjects_table.php =====
return new class extends Migration{public function up(): void{Schema::create('subjects',function(Blueprint $table){$table->id();$table->string('name');$table->foreignId('main_subject_id')->constrained('main_subjects');$table->string('code');$table->integer('full_mark');$table->integer('homework_percentage');$table->integer('oral_percentage');$table->integer('activity_percentage');$table->integer('quiz_percentage');$table->integer('exam_percentage');$table->integer('num_class_period');$table->boolean('is_failed')->default(false);$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083004_create_teacher_section_subject.php =====
return new class extends Migration{public function up(): void{Schema::create('teacher_section_subjects',function(Blueprint $table){$table->id();$table->foreignId('teacher_id')->constrained('teachers');$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('section_id')->constrained('sections');$table->boolean('is_active');$table->integer('num_class_period');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('teacher_section_subjects');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083159_create_student_enrollment_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_enrollments',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('section_id')->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('semester_id')->constrained('semesters');$table->foreignId('year_id')->constrained('years');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');$table->index(['student_id','semester_id']);});}public function down(): void{Schema::dropIfExists('student_enrollments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083240_create_grade_year_settings_table.php =====
return new class extends Migration{public function up(): void{Schema::create('grade_year_settings',function(Blueprint $table){$table->id();$table->foreignId('year_id')->constrained('years');$table->integer('max_failed_subjects');$table->integer('help_marks');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('grade_year_settings');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083403_create_school_shifts_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_shifts',function(Blueprint $table){$table->id();$table->string('name')->unique();$table->time('start_time');$table->time('end_time');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('school_shifts');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083434_create_time_tables_table.php =====
return new class extends Migration{public function up(): void{Schema::create('time_tables',function(Blueprint $table){$table->id();$table->date('valid_from');$table->date('valid_to');$table->boolean('is_active');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('timetables');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083512_create_class_periods_table.php =====
return new class extends Migration{public function up(): void{Schema::create('class_periods',function(Blueprint $table){$table->id();$table->string('name');$table->time('start_time');$table->time('end_time');$table->foreignId('school_shift_id')->constrained('school_shifts');$table->integer('period_order');$table->enum('type',ClassPeriodType::values())->default(ClassPeriodType::STUDY->value);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->integer('duration_minutes');$table->unique(['school_shift_id','period_order']);});}public function down(): void{Schema::dropIfExists('class_periods');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083537_school_shift_targets_table.php =====
return new class extends Migration{public function up(): void{Schema::create('school_shift_targets',function(Blueprint $table){$table->id();$table->foreignId('school_shift_id')->constrained('school_shifts');$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('grade_id')->constrained('grades');$table->timestamps();});}public function down(): void{Schema::dropIfExists('school_shift_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083613_create_schedules_table.php =====
return new class extends Migration{public function up(): void{Schema::create('schedules',function(Blueprint $table){$table->id();$table->foreignId('class_period_id')->constrained('class_periods');$table->foreignId('teacher_section_subject_id')->constrained('teacher_section_subjects');$table->foreignId('timetable_id')->constrained('time_tables');$table->enum('week_day',[
WeekDay::SUNDAY->value,WeekDay::MONDAY->value,WeekDay::TUESDAY->value,WeekDay::WEDNESDAY->value,WeekDay::THURSDAY->value,WeekDay::FRIDAY->value,WeekDay::SATURDAY->value,]);$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('schedules');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083619_create_class_sessions_table.php =====
return new class extends Migration{public function up(): void{Schema::create('class_sessions',function(Blueprint $table){$table->id();$table->foreignId('schedule_id')->constrained('schedules');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('teacher_id')->constrained('teachers');$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('section_id')->constrained('sections');$table->foreignId('class_period_id')->constrained('class_periods');$table->enum('status',[
'scheduled','completed','cancelled',])->default('scheduled');$table->integer('total_students_count')->nullable();$table->integer('present_students_count')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['school_day_id','section_id']);$table->index(['teacher_id','school_day_id']);$table->index(['status','school_day_id']);$table->unique(['schedule_id','school_day_id'],'unique_session_per_day');});}public function down(): void{Schema::dropIfExists('class_sessions');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083642_create_assignments_table.php =====
return new class extends Migration{public function up(): void{Schema::create('assignments',function(Blueprint $table){$table->id();$table->foreignId('assigned_session_id')->constrained('class_sessions');$table->foreignId('due_session_id')->nullable()->constrained('class_sessions');$table->foreignId('section_id')->constrained('sections');$table->enum('type',['homework','oral','quiz','project']);$table->string('title');$table->text('description');$table->string('photo')->nullable();$table->foreignId('subject_id')->constrained('subjects');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');$table->index(['assigned_session_id','due_session_id']);$table->index(['assigned_session_id','subject_id']);$table->index(['due_session_id','subject_id']);$table->index(['assigned_session_id','type']);$table->index(['due_session_id','type']);});}public function down(): void{Schema::dropIfExists('assignments');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083659_create_student_marks_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_marks',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->constrained('subjects');$table->foreignId('enrollment_id')->constrained('student_enrollments');$table->integer('homework')->nullable();$table->integer('oral')->nullable();$table->integer('activity')->nullable();$table->integer('quiz')->nullable();$table->integer('exam')->nullable();$table->integer('total')->nullable();$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['enrollment_id','subject_id']);});}public function down(): void{Schema::dropIfExists('student_marks');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083716_create_behavior_notes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('behavior_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->enum('behavior_type',['positive','negative']);$table->string('note');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('behavior_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083736_create_study_notes_table.php =====
return new class extends Migration{public function up(): void{Schema::create('study_notes',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->enum('note_type',['dictation','quiz','homework','general'])->default('general');$table->string('note');$table->integer('marks')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('study_notes');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083757_create_student_attendances_table.php =====
return new class extends Migration{public function up(): void{Schema::create('student_attendances',function(Blueprint $table){$table->id();$table->foreignId('student_id')->constrained('students');$table->foreignId('class_session_id')->constrained('class_sessions');$table->enum('status',['Excused absence','Unexcused absence','Late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['class_session_id','student_id']);});}public function down(): void{Schema::dropIfExists('student_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083823_create_teacher_attendances_table.php =====
return new class extends Migration{public function up(): void{Schema::create('teacher_attendances',function(Blueprint $table){$table->id();$table->foreignId('class_session_id')->constrained('class_sessions');$table->foreignId('teacher_id')->constrained('teachers');$table->enum('status',['Excused absence','Unexcused absence','Late']);$table->timestamps();$table->foreignId('created_by')->constrained('users');$table->index(['class_session_id','teacher_id']);});}public function down(): void{Schema::dropIfExists('teacher_attendances');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083843_create_complaints_table.php =====
return new class extends Migration{public function up(): void{Schema::create('complaints',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('content');$table->text('answer')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('complaints');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083913_create_news_table.php =====
return new class extends Migration{public function up(): void{Schema::create('news',function(Blueprint $table){$table->id();$table->string('title');$table->json('content');$table->dateTime('publish_date');$table->string('photo')->nullable();$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('news');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083939_create_news_target_table.php =====
return new class extends Migration{public function up(): void{Schema::create('news_targets',function(Blueprint $table){$table->id();$table->foreignId('news_id')->constrained('news');$table->foreignId('grade_id')->nullable()->constrained('grades');$table->foreignId('section_id')->nullable()->constrained('sections');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('news_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_083954_create_files_table.php =====
return new class extends Migration{public function up(): void{Schema::create('files',function(Blueprint $table){$table->id();$table->foreignId('subject_id')->nullable()->constrained('subjects');$table->string('title');$table->text('description')->nullable();$table->enum('type',['public','helper'])->default('helper');$table->string('file');$table->unsignedBigInteger('size');$table->dateTime('publish_date');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('files');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084008_create_file_target_table.php =====
return new class extends Migration{public function up(): void{Schema::create('file_targets',function(Blueprint $table){$table->id();$table->foreignId('section_id')->nullable()->constrained('sections');$table->foreignId('grade_id')->nullable()->constrained('grades');$table->foreignId('file_id')->constrained('files');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('file_targets');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084028_create_file_downloads_table.php =====
return new class extends Migration{public function up(): void{Schema::create('file_downloads',function(Blueprint $table){$table->id();$table->foreignId('file_id')->constrained('files');$table->foreignId('user_id')->constrained('users');$table->timestamp('downloaded_at');$table->string('ip_address',45);$table->timestamps();});}public function down(): void{Schema::dropIfExists('file_downloads');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084126_create_messages_table.php =====
return new class extends Migration{public function up(): void{Schema::create('messages',function(Blueprint $table){$table->id();$table->foreignId('user_id')->constrained('users');$table->string('title');$table->text('message');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('messages');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084405_create_app_updates_table.php =====
return new class extends Migration{public function up(): void{Schema::create('app_updates',function(Blueprint $table){$table->id();$table->string('version');$table->string('platform');$table->string('url');$table->text('change_log')->nullable();$table->boolean('is_force_update');$table->timestamps();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('app_updates');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_10_084500_create_exams_table.php =====
return new class extends Migration{public function up(): void{Schema::create('exams',function(Blueprint $table){$table->id();$table->foreignId('school_day_id')->constrained('school_days');$table->foreignId('grade_id')->constrained('grades');$table->foreignId('main_subject_id')->constrained('main_subjects');$table->timestamps();$table->softDeletes();$table->foreignId('created_by')->constrained('users');});}public function down(): void{Schema::dropIfExists('exams');}};
// ===== C:\Development\Laravel\school\database\migrations\2025_07_12_192306_create_quiz_targets_table.php =====
return new class extends Migration{public function up(): void{Schema::create('quiz_targets',function(Blueprint $table){$table->id();$table->foreignId('quiz_id')->constrained()->onDelete('cascade');$table->foreignId('subject_id')->constrained()->onDelete('cascade');$table->foreignId('section_id')->constrained()->onDelete('cascade');$table->foreignId('semester_id')->constrained()->onDelete('cascade');$table->foreignId('grade_id')->constrained()->onDelete('cascade');$table->timestamps();});}public function down(): void{Schema::dropIfExists('quiz_targets');}};
