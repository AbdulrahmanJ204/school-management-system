{
    "sourceFile": "app/Services/AuthService.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1751900774319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751900813804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,12 +107,12 @@\n \n         try {\n             $device = Device_info::where('device_id', $credentials['device_id'])->first();\n \n-            // // If device exists, check if it belongs to the user already\n-            // if ($device && $user->devices->contains($device->id)) {\n-            //     throw new DeviceAlreadyExistsException();\n-            // }\n+            // If device exists, check if it belongs to the user already\n+            if ($device && $user->devices->contains($device->id)) {\n+                throw new DeviceAlreadyExistsException();\n+            }\n \n             // If device doesn't exist, create it\n             else {\n                 $device = Device_info::create([\n"
                },
                {
                    "date": 1751900821507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n                     'platform'  => $credentials['platform'],\n                     'type'      => $credentials['device_type'],\n                     'name'      => $credentials['device_name'],\n                 ]);\n-            }\n+            \n \n             // Attach device to the user (now we’re sure it’s not duplicated)\n             $user->devices()->attach($device->id);\n \n@@ -235,5 +235,5 @@\n         return $status === Password::PASSWORD_RESET\n             ? ResponseHelper::jsonResponse(null, __('messages.auth.password_changed'), 200, true)\n             : ResponseHelper::jsonResponse(null, __('messages.auth.invalid_token'), 400, false);\n     }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1751900832238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,24 +106,16 @@\n         DB::beginTransaction();\n \n         try {\n             $device = Device_info::where('device_id', $credentials['device_id'])->first();\n-\n-            // If device exists, check if it belongs to the user already\n-            if ($device && $user->devices->contains($device->id)) {\n-                throw new DeviceAlreadyExistsException();\n-            }\n-\n-            // If device doesn't exist, create it\n-            else {\n                 $device = Device_info::create([\n                     'device_id' => $credentials['device_id'],\n                     'platform'  => $credentials['platform'],\n                     'type'      => $credentials['device_type'],\n                     'name'      => $credentials['device_name'],\n                 ]);\n-            \n \n+\n             // Attach device to the user (now we’re sure it’s not duplicated)\n             $user->devices()->attach($device->id);\n \n             // 5. Generate tokens\n@@ -235,5 +227,5 @@\n         return $status === Password::PASSWORD_RESET\n             ? ResponseHelper::jsonResponse(null, __('messages.auth.password_changed'), 200, true)\n             : ResponseHelper::jsonResponse(null, __('messages.auth.invalid_token'), 400, false);\n     }\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751900880677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,16 +106,24 @@\n         DB::beginTransaction();\n \n         try {\n             $device = Device_info::where('device_id', $credentials['device_id'])->first();\n+\n+            // If device exists, check if it belongs to the user already\n+            if ($device && $user->devices->contains($device->id)) {\n+                throw new DeviceAlreadyExistsException();\n+            }\n+\n+            // If device doesn't exist, create it\n+            else {\n                 $device = Device_info::create([\n                     'device_id' => $credentials['device_id'],\n                     'platform'  => $credentials['platform'],\n                     'type'      => $credentials['device_type'],\n                     'name'      => $credentials['device_name'],\n                 ]);\n+            }\n \n-\n             // Attach device to the user (now we’re sure it’s not duplicated)\n             $user->devices()->attach($device->id);\n \n             // 5. Generate tokens\n"
                }
            ],
            "date": 1751900774319,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Services;\n\nuse App\\Exceptions\\DeviceAlreadyExistsException;\nuse App\\Exceptions\\ImageUploadFailed;\nuse App\\Exceptions\\InvalidPasswordException;\nuse App\\Exceptions\\PermissionException;\nuse App\\Helpers\\ResponseHelper;\nuse App\\Helpers\\UserTypeHelper;\nuse App\\Models\\Admin;\nuse App\\Models\\Device_info;\nuse App\\Models\\Student;\nuse App\\Models\\Teacher;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Laravel\\Sanctum\\PersonalAccessToken;\nuse Spatie\\Permission\\Models\\Role;\n\n\nclass AuthService\n{\n    /**\n     * Create a new class instance.\n     */\n    public function __construct()\n    {\n        //\n    }\n    public function register($request)\n    {\n        $admin = auth()->user();\n\n        if (!$admin->hasPermissionTo('create_user')) {\n            throw new PermissionException();\n        }\n\n        $credentials = $request->validated();\n\n        if( $request->hasFile('image')) {\n            try {\n                $credentials['image'] = $request->file('image')->store('user_images', 'public');\n            } catch (\\Exception $e) {\n                throw new ImageUploadFailed();\n            }\n        }\n        else {\n            $credentials['image'] = 'user_images/default.png';\n        }\n\n        $roleName =  $credentials['role'];\n        $guardName = RoleHelper::getGuardForRole($roleName);\n\n        if($request->role !== 'student')\n            $credentials['password'] = Hash::make($credentials['password']);\n\n        DB::transaction(function () use ($admin, $credentials, $roleName, $guardName) {\n\n            $user = User::create($credentials);\n\n            $role = Role::where('name', $roleName)->where('guard_name', $guardName)->firstOrFail();\n            $user->assignRole($role);\n\n            match ($roleName) {\n                'admin' => Admin::create([\n                    'user_id' => $user->id,\n                    'created_by' => $admin->id,\n                ]),\n                'teacher' => Teacher::create([\n                    'user_id' => $user->id,\n                    'created_by' => $admin->id,\n                ]),\n                'student' => Student::create([\n                    'user_id' => $user->id,\n                    'created_by' => $admin->id,\n                    'grandfather'=> $credentials['grandfather'],\n                    'general_id'      => $credentials['general_id'],\n                    'is_active' => $credentials['is_active']\n                ])\n            };\n        });\n\n        return ResponseHelper::jsonResponse(\n            null,\n            __('messages.user.created'),\n            201,\n            true\n        );\n    }\n    public function login($request)\n    {\n        $credentials = $request->validated();\n\n        $user = User::where('email', $credentials['email'])->firstOrFail();\n\n        if (!Hash::check($credentials['password'], $user->password)) {\n            throw new InvalidPasswordException();\n        }\n\n        // Update last login time\n        $user->update(['last_login' => now()]);\n\n        DB::beginTransaction();\n\n        try {\n            $device = Device_info::where('device_id', $credentials['device_id'])->first();\n\n            // // If device exists, check if it belongs to the user already\n            // if ($device && $user->devices->contains($device->id)) {\n            //     throw new DeviceAlreadyExistsException();\n            // }\n\n            // If device doesn't exist, create it\n            else {\n                $device = Device_info::create([\n                    'device_id' => $credentials['device_id'],\n                    'platform'  => $credentials['platform'],\n                    'type'      => $credentials['device_type'],\n                    'name'      => $credentials['device_name'],\n                ]);\n            }\n\n            // Attach device to the user (now we’re sure it’s not duplicated)\n            $user->devices()->attach($device->id);\n\n            // 5. Generate tokens\n            $accessToken = $user->createToken('access_token', ['access']);\n            $refreshToken = $user->createToken('refresh_token', ['refresh']);\n\n            // 6. Set token expiration and device ID\n            $accessToken->accessToken->expires_at = now()->addMinutes(60);\n            $accessToken->accessToken->device_id = $device->id;\n            $accessToken->accessToken->save();\n\n            $refreshToken->accessToken->expires_at = now()->addMinutes(3600);\n            $refreshToken->accessToken->device_id = $device->id;\n            $refreshToken->accessToken->save();\n\n            DB::commit();\n\n            // 7. Return success response\n            return ResponseHelper::jsonResponse([\n                'access_token'  => $accessToken->plainTextToken,\n                'refresh_token' => $refreshToken->plainTextToken\n            ], __('messages.auth.login'));\n\n        } catch (\\Throwable $e) {\n            DB::rollBack();\n\n            // Re-throw expected exceptions (like DeviceAlreadyExists)\n            throw $e;\n        }\n    }\n    public function logout(Request $request)\n    {\n        $token = $request->user()->currentAccessToken();\n        $deviceId = $token->device_id;\n\n        if ($token->expires_at?->isPast()|!$token || !in_array('access', $token->abilities ?? [])) {\n            return ResponseHelper::jsonResponse(null, __('messages.auth.invalid_token'), 401, false);\n        }\n\n        $token->delete();\n\n        $request->user()->tokens()\n            ->where('device_id', $deviceId)\n            ->whereJsonContains('abilities', 'refresh')\n            ->delete();\n\n        return ResponseHelper::jsonResponse(\n            null,\n            __('messages.auth.logout'),\n            200,\n            true\n        );\n    }\n    public function changePassword($request)\n    {\n        $user = auth()->user();\n\n        if (!$user->hasPermissionTo('change_password')) {\n            throw new PermissionException();\n        }\n\n        $credentials = $request->validated();\n\n        if (!Hash::check($credentials['current_password'], $user->password)) {\n            return ResponseHelper::jsonResponse(\n                null,\n                __('messages.auth.invalid_password'), // You can define this in your lang file\n                401,\n                false\n            );\n        }\n\n        $user->update([\n            'password' => Hash::make($credentials['new_password']),\n        ]);\n\n        return ResponseHelper::jsonResponse(\n            null,\n            __('messages.auth.password_changed'),\n            200,\n            true\n        );\n    }\n\n    public function forgotPassword($request)\n    {\n        $request->validated();\n\n        Password::sendResetLink($request->only('email'));\n\n        return ResponseHelper::jsonResponse(null, __('messages.auth.reset_link_sent'), 200, true);\n    }\n\n    public function resetPassword($request)\n    {\n        $request->validated();\n\n        $status = Password::reset(\n            $request->only('email', 'password', 'password_confirmation', 'token'),\n            function ($user, $password) {\n                $user->forceFill([\n                    'password' => Hash::make($password),\n                ])->save();\n\n                $user->tokens()->delete();\n            }\n        );\n\n        return $status === Password::PASSWORD_RESET\n            ? ResponseHelper::jsonResponse(null, __('messages.auth.password_changed'), 200, true)\n            : ResponseHelper::jsonResponse(null, __('messages.auth.invalid_token'), 400, false);\n    }\n}"
        }
    ]
}
