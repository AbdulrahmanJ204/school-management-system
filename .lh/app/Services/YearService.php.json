{
    "sourceFile": "app/Services/YearService.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755949258429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755949258429,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Services;\n\nuse App\\Enums\\PermissionEnum;\nuse App\\Exceptions\\PermissionException;\nuse App\\Helpers\\ResponseHelper;\nuse App\\Http\\Requests\\YearRequest;\nuse App\\Http\\Resources\\YearResource;\nuse App\\Models\\Year;\nuse App\\Traits\\HasPermissionChecks;\nuse Illuminate\\Http\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response as ResponseAlias;\n\nclass YearService\n{\n    use HasPermissionChecks;\n\n    /**\n     * @throws PermissionException\n     */\n    public function listYear(): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::VIEW_YEARS);\n\n        $years = Year::with([\n            'semesters'\n        ])\n            ->orderBy('start_date', 'desc')\n            ->get();\n\n        return ResponseHelper::jsonResponse(\n            YearResource::collection($years)\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function listTrashedYears(): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::MANAGE_DELETED_YEARS);\n\n        $years = Year::with([\n            'semesters'\n        ])\n            ->onlyTrashed()\n            ->orderBy('start_date', 'desc')\n            ->get();\n\n        return ResponseHelper::jsonResponse(\n            YearResource::collection($years)\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function createYear(YearRequest $request): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::CREATE_YEAR);\n\n        $admin = auth()->user();\n        $credentials = $request->validated();\n        $credentials['created_by'] = $admin->id;\n        $year = Year::create($credentials);\n\n        return ResponseHelper::jsonResponse(\n            new YearResource($year),\n            __('messages.year.created'),\n            ResponseAlias::HTTP_CREATED,\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function showYear(Year $year): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::VIEW_YEAR);\n\n        $year->load([\n            'semesters.schoolDays',\n            'settingGradeYears.grade'\n        ]);\n        return ResponseHelper::jsonResponse(\n            new YearResource($year),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function updateYear($request, Year $year): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::UPDATE_YEAR);\n\n        if($request->is_active){\n            $activeYears = Year::where('is_active',true)->get();\n            foreach ($activeYears as $activeYear){\n                $activeYear->update(['is_active' => false]);\n            }\n        }\n\n        $year->update([\n            'name' => $request->name,\n            'start_date' => $request->start_date,\n            'end_date' => $request->end_date,\n            'is_active' => $request->is_active ?? $year->is_active,\n        ]);\n\n        $year->load([\n            'semesters'\n        ]);\n\n        return ResponseHelper::jsonResponse(\n            new YearResource($year),\n            __('messages.year.updated'),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function destroyYear(Year $year): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::DELETE_YEAR);\n\n        // Check if year has related data\n        if ($year->semesters()->exists()) {\n            return response()->json([\n                'message' => 'Cannot delete year with existing semesters'\n            ], ResponseAlias::HTTP_CONFLICT);\n        }\n\n        $year->delete();\n\n        return ResponseHelper::jsonResponse(\n            null,\n            __('messages.year.deleted'),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function restoreYear($id): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::MANAGE_DELETED_YEARS);\n\n        $year = Year::withTrashed()->findOrFail($id);\n\n        if (!$year->trashed()) {\n            return ResponseHelper::jsonResponse(\n                null,\n                'Year is not deleted',\n                ResponseAlias::HTTP_BAD_REQUEST,\n                false\n            );\n        }\n\n        $year->restore();\n\n        return ResponseHelper::jsonResponse(\n            new YearResource($year),\n            __('messages.year.restored'),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function forceDeleteYear($id): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::MANAGE_DELETED_YEARS);\n\n//        $year = Year::withTrashed()->findOrFail($id);\n        $year = Year::findOrFail($id);\n\n        // Check if year has related data\n        if ($year->semesters()->exists()) {\n            return ResponseHelper::jsonResponse(\n                null,\n                __('messages.year.has_semesters'),\n                ResponseAlias::HTTP_BAD_REQUEST,\n                false\n            );\n        }\n\n        $year->forceDelete();\n\n        return ResponseHelper::jsonResponse(\n            null,\n            __('messages.year.force_deleted'),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function ActiveYear(Year $year): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::UPDATE_YEAR);\n\n        $activeYears = Year::where('is_active',true)->get();\n        foreach ($activeYears as $activeYear){\n            $activeYear->update(['is_active' => false]);\n        }\n        $year->update(['is_active' => true]);\n\n        return ResponseHelper::jsonResponse(\n            new YearResource($year),\n        );\n    }\n\n    /**\n     * @throws PermissionException\n     */\n    public function getYearsWithNestedData(): JsonResponse\n    {\n        $this->checkPermission(PermissionEnum::VIEW_YEARS);\n\n        $years = Year::with([\n            'semesters',\n            'grades.sections',\n            'grades.mainSubjects.subjects'\n        ])\n            ->orderBy('start_date', 'desc')\n            ->get();\n\n        return ResponseHelper::jsonResponse(\n            YearResource::collection($years),\n            'Years with nested data',\n            ResponseAlias::HTTP_OK,\n            true\n        );\n    }\n}"
        }
    ]
}